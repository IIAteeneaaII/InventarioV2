
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CatalogoSKU
 * 
 */
export type CatalogoSKU = $Result.DefaultSelection<Prisma.$CatalogoSKUPayload>
/**
 * Model VistaPorSKU
 * 
 */
export type VistaPorSKU = $Result.DefaultSelection<Prisma.$VistaPorSKUPayload>
/**
 * Model Lote
 * 
 */
export type Lote = $Result.DefaultSelection<Prisma.$LotePayload>
/**
 * Model Modem
 * 
 */
export type Modem = $Result.DefaultSelection<Prisma.$ModemPayload>
/**
 * Model Registro
 * 
 */
export type Registro = $Result.DefaultSelection<Prisma.$RegistroPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model Estado
 * 
 */
export type Estado = $Result.DefaultSelection<Prisma.$EstadoPayload>
/**
 * Model TransicionEstado
 * 
 */
export type TransicionEstado = $Result.DefaultSelection<Prisma.$TransicionEstadoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Rol: {
  UAI: 'UAI',
  UA: 'UA',
  UV: 'UV',
  UReg: 'UReg',
  UTI: 'UTI',
  UR: 'UR',
  UC: 'UC',
  UE: 'UE',
  ULL: 'ULL',
  UEN: 'UEN'
};

export type Rol = (typeof Rol)[keyof typeof Rol]


export const EstadoRegistro: {
  SN_OK: 'SN_OK',
  SCRAP_COSMETICO: 'SCRAP_COSMETICO',
  SCRAP_ELECTRONICO: 'SCRAP_ELECTRONICO',
  SCRAP_INFESTACION: 'SCRAP_INFESTACION',
  REPARACION: 'REPARACION'
};

export type EstadoRegistro = (typeof EstadoRegistro)[keyof typeof EstadoRegistro]


export const EstadoLote: {
  EN_PROCESO: 'EN_PROCESO',
  PAUSADO: 'PAUSADO',
  COMPLETADO: 'COMPLETADO',
  CANCELADO: 'CANCELADO'
};

export type EstadoLote = (typeof EstadoLote)[keyof typeof EstadoLote]


export const FaseProceso: {
  REGISTRO: 'REGISTRO',
  TEST_INICIAL: 'TEST_INICIAL',
  COSMETICA: 'COSMETICA',
  LIBERACION_LIMPIEZA: 'LIBERACION_LIMPIEZA',
  ENSAMBLE: 'ENSAMBLE',
  RETEST: 'RETEST',
  EMPAQUE: 'EMPAQUE'
};

export type FaseProceso = (typeof FaseProceso)[keyof typeof FaseProceso]


export const MotivoScrap: {
  FUERA_DE_RANGO: 'FUERA_DE_RANGO',
  DEFECTO_SW: 'DEFECTO_SW',
  SIN_REPARACION: 'SIN_REPARACION',
  COSMETICA: 'COSMETICA',
  INFESTADO: 'INFESTADO',
  OTRO: 'OTRO'
};

export type MotivoScrap = (typeof MotivoScrap)[keyof typeof MotivoScrap]


export const DetalleScrap: {
  CIRCUITO_OK_BASE_NOK: 'CIRCUITO_OK_BASE_NOK',
  BASE_OK_CIRCUITO_NOK: 'BASE_OK_CIRCUITO_NOK',
  CIRCUITO_NOK_BASE_NOK: 'CIRCUITO_NOK_BASE_NOK',
  INFESTACION: 'INFESTACION',
  OTRO: 'OTRO'
};

export type DetalleScrap = (typeof DetalleScrap)[keyof typeof DetalleScrap]


export const TipoLote: {
  ENTRADA: 'ENTRADA',
  SALIDA: 'SALIDA'
};

export type TipoLote = (typeof TipoLote)[keyof typeof TipoLote]

}

export type Rol = $Enums.Rol

export const Rol: typeof $Enums.Rol

export type EstadoRegistro = $Enums.EstadoRegistro

export const EstadoRegistro: typeof $Enums.EstadoRegistro

export type EstadoLote = $Enums.EstadoLote

export const EstadoLote: typeof $Enums.EstadoLote

export type FaseProceso = $Enums.FaseProceso

export const FaseProceso: typeof $Enums.FaseProceso

export type MotivoScrap = $Enums.MotivoScrap

export const MotivoScrap: typeof $Enums.MotivoScrap

export type DetalleScrap = $Enums.DetalleScrap

export const DetalleScrap: typeof $Enums.DetalleScrap

export type TipoLote = $Enums.TipoLote

export const TipoLote: typeof $Enums.TipoLote

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.catalogoSKU`: Exposes CRUD operations for the **CatalogoSKU** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CatalogoSKUS
    * const catalogoSKUS = await prisma.catalogoSKU.findMany()
    * ```
    */
  get catalogoSKU(): Prisma.CatalogoSKUDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vistaPorSKU`: Exposes CRUD operations for the **VistaPorSKU** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VistaPorSKUS
    * const vistaPorSKUS = await prisma.vistaPorSKU.findMany()
    * ```
    */
  get vistaPorSKU(): Prisma.VistaPorSKUDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lote`: Exposes CRUD operations for the **Lote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lotes
    * const lotes = await prisma.lote.findMany()
    * ```
    */
  get lote(): Prisma.LoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.modem`: Exposes CRUD operations for the **Modem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modems
    * const modems = await prisma.modem.findMany()
    * ```
    */
  get modem(): Prisma.ModemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registro`: Exposes CRUD operations for the **Registro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registros
    * const registros = await prisma.registro.findMany()
    * ```
    */
  get registro(): Prisma.RegistroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estado`: Exposes CRUD operations for the **Estado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estados
    * const estados = await prisma.estado.findMany()
    * ```
    */
  get estado(): Prisma.EstadoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transicionEstado`: Exposes CRUD operations for the **TransicionEstado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransicionEstados
    * const transicionEstados = await prisma.transicionEstado.findMany()
    * ```
    */
  get transicionEstado(): Prisma.TransicionEstadoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CatalogoSKU: 'CatalogoSKU',
    VistaPorSKU: 'VistaPorSKU',
    Lote: 'Lote',
    Modem: 'Modem',
    Registro: 'Registro',
    Log: 'Log',
    Estado: 'Estado',
    TransicionEstado: 'TransicionEstado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "catalogoSKU" | "vistaPorSKU" | "lote" | "modem" | "registro" | "log" | "estado" | "transicionEstado"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CatalogoSKU: {
        payload: Prisma.$CatalogoSKUPayload<ExtArgs>
        fields: Prisma.CatalogoSKUFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatalogoSKUFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatalogoSKUFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          findFirst: {
            args: Prisma.CatalogoSKUFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatalogoSKUFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          findMany: {
            args: Prisma.CatalogoSKUFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>[]
          }
          create: {
            args: Prisma.CatalogoSKUCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          createMany: {
            args: Prisma.CatalogoSKUCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CatalogoSKUCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>[]
          }
          delete: {
            args: Prisma.CatalogoSKUDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          update: {
            args: Prisma.CatalogoSKUUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          deleteMany: {
            args: Prisma.CatalogoSKUDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CatalogoSKUUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CatalogoSKUUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>[]
          }
          upsert: {
            args: Prisma.CatalogoSKUUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogoSKUPayload>
          }
          aggregate: {
            args: Prisma.CatalogoSKUAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCatalogoSKU>
          }
          groupBy: {
            args: Prisma.CatalogoSKUGroupByArgs<ExtArgs>
            result: $Utils.Optional<CatalogoSKUGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatalogoSKUCountArgs<ExtArgs>
            result: $Utils.Optional<CatalogoSKUCountAggregateOutputType> | number
          }
        }
      }
      VistaPorSKU: {
        payload: Prisma.$VistaPorSKUPayload<ExtArgs>
        fields: Prisma.VistaPorSKUFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VistaPorSKUFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VistaPorSKUFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          findFirst: {
            args: Prisma.VistaPorSKUFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VistaPorSKUFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          findMany: {
            args: Prisma.VistaPorSKUFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>[]
          }
          create: {
            args: Prisma.VistaPorSKUCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          createMany: {
            args: Prisma.VistaPorSKUCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VistaPorSKUCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>[]
          }
          delete: {
            args: Prisma.VistaPorSKUDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          update: {
            args: Prisma.VistaPorSKUUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          deleteMany: {
            args: Prisma.VistaPorSKUDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VistaPorSKUUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VistaPorSKUUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>[]
          }
          upsert: {
            args: Prisma.VistaPorSKUUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VistaPorSKUPayload>
          }
          aggregate: {
            args: Prisma.VistaPorSKUAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVistaPorSKU>
          }
          groupBy: {
            args: Prisma.VistaPorSKUGroupByArgs<ExtArgs>
            result: $Utils.Optional<VistaPorSKUGroupByOutputType>[]
          }
          count: {
            args: Prisma.VistaPorSKUCountArgs<ExtArgs>
            result: $Utils.Optional<VistaPorSKUCountAggregateOutputType> | number
          }
        }
      }
      Lote: {
        payload: Prisma.$LotePayload<ExtArgs>
        fields: Prisma.LoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          findFirst: {
            args: Prisma.LoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          findMany: {
            args: Prisma.LoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>[]
          }
          create: {
            args: Prisma.LoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          createMany: {
            args: Prisma.LoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>[]
          }
          delete: {
            args: Prisma.LoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          update: {
            args: Prisma.LoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          deleteMany: {
            args: Prisma.LoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>[]
          }
          upsert: {
            args: Prisma.LoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotePayload>
          }
          aggregate: {
            args: Prisma.LoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLote>
          }
          groupBy: {
            args: Prisma.LoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoteCountArgs<ExtArgs>
            result: $Utils.Optional<LoteCountAggregateOutputType> | number
          }
        }
      }
      Modem: {
        payload: Prisma.$ModemPayload<ExtArgs>
        fields: Prisma.ModemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          findFirst: {
            args: Prisma.ModemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          findMany: {
            args: Prisma.ModemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>[]
          }
          create: {
            args: Prisma.ModemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          createMany: {
            args: Prisma.ModemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>[]
          }
          delete: {
            args: Prisma.ModemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          update: {
            args: Prisma.ModemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          deleteMany: {
            args: Prisma.ModemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ModemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>[]
          }
          upsert: {
            args: Prisma.ModemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModemPayload>
          }
          aggregate: {
            args: Prisma.ModemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModem>
          }
          groupBy: {
            args: Prisma.ModemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModemCountArgs<ExtArgs>
            result: $Utils.Optional<ModemCountAggregateOutputType> | number
          }
        }
      }
      Registro: {
        payload: Prisma.$RegistroPayload<ExtArgs>
        fields: Prisma.RegistroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findFirst: {
            args: Prisma.RegistroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          findMany: {
            args: Prisma.RegistroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          create: {
            args: Prisma.RegistroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          createMany: {
            args: Prisma.RegistroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          delete: {
            args: Prisma.RegistroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          update: {
            args: Prisma.RegistroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          deleteMany: {
            args: Prisma.RegistroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegistroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>[]
          }
          upsert: {
            args: Prisma.RegistroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroPayload>
          }
          aggregate: {
            args: Prisma.RegistroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistro>
          }
          groupBy: {
            args: Prisma.RegistroGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistroGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistroCountArgs<ExtArgs>
            result: $Utils.Optional<RegistroCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      Estado: {
        payload: Prisma.$EstadoPayload<ExtArgs>
        fields: Prisma.EstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findFirst: {
            args: Prisma.EstadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findMany: {
            args: Prisma.EstadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          create: {
            args: Prisma.EstadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          createMany: {
            args: Prisma.EstadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          delete: {
            args: Prisma.EstadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          update: {
            args: Prisma.EstadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          deleteMany: {
            args: Prisma.EstadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EstadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          upsert: {
            args: Prisma.EstadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          aggregate: {
            args: Prisma.EstadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstado>
          }
          groupBy: {
            args: Prisma.EstadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCountArgs<ExtArgs>
            result: $Utils.Optional<EstadoCountAggregateOutputType> | number
          }
        }
      }
      TransicionEstado: {
        payload: Prisma.$TransicionEstadoPayload<ExtArgs>
        fields: Prisma.TransicionEstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransicionEstadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransicionEstadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          findFirst: {
            args: Prisma.TransicionEstadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransicionEstadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          findMany: {
            args: Prisma.TransicionEstadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>[]
          }
          create: {
            args: Prisma.TransicionEstadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          createMany: {
            args: Prisma.TransicionEstadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransicionEstadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>[]
          }
          delete: {
            args: Prisma.TransicionEstadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          update: {
            args: Prisma.TransicionEstadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          deleteMany: {
            args: Prisma.TransicionEstadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransicionEstadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransicionEstadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>[]
          }
          upsert: {
            args: Prisma.TransicionEstadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransicionEstadoPayload>
          }
          aggregate: {
            args: Prisma.TransicionEstadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransicionEstado>
          }
          groupBy: {
            args: Prisma.TransicionEstadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransicionEstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransicionEstadoCountArgs<ExtArgs>
            result: $Utils.Optional<TransicionEstadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    catalogoSKU?: CatalogoSKUOmit
    vistaPorSKU?: VistaPorSKUOmit
    lote?: LoteOmit
    modem?: ModemOmit
    registro?: RegistroOmit
    log?: LogOmit
    estado?: EstadoOmit
    transicionEstado?: TransicionEstadoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    registros: number
    lotes: number
    logs: number
    modems: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | UserCountOutputTypeCountRegistrosArgs
    lotes?: boolean | UserCountOutputTypeCountLotesArgs
    logs?: boolean | UserCountOutputTypeCountLogsArgs
    modems?: boolean | UserCountOutputTypeCountModemsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountModemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
  }


  /**
   * Count Type CatalogoSKUCountOutputType
   */

  export type CatalogoSKUCountOutputType = {
    lotes: number
    modems: number
    vistas: number
  }

  export type CatalogoSKUCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lotes?: boolean | CatalogoSKUCountOutputTypeCountLotesArgs
    modems?: boolean | CatalogoSKUCountOutputTypeCountModemsArgs
    vistas?: boolean | CatalogoSKUCountOutputTypeCountVistasArgs
  }

  // Custom InputTypes
  /**
   * CatalogoSKUCountOutputType without action
   */
  export type CatalogoSKUCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKUCountOutputType
     */
    select?: CatalogoSKUCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CatalogoSKUCountOutputType without action
   */
  export type CatalogoSKUCountOutputTypeCountLotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoteWhereInput
  }

  /**
   * CatalogoSKUCountOutputType without action
   */
  export type CatalogoSKUCountOutputTypeCountModemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
  }

  /**
   * CatalogoSKUCountOutputType without action
   */
  export type CatalogoSKUCountOutputTypeCountVistasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VistaPorSKUWhereInput
  }


  /**
   * Count Type LoteCountOutputType
   */

  export type LoteCountOutputType = {
    registros: number
    modems: number
    modemsSalida: number
  }

  export type LoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | LoteCountOutputTypeCountRegistrosArgs
    modems?: boolean | LoteCountOutputTypeCountModemsArgs
    modemsSalida?: boolean | LoteCountOutputTypeCountModemsSalidaArgs
  }

  // Custom InputTypes
  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoteCountOutputType
     */
    select?: LoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }

  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeCountModemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
  }

  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeCountModemsSalidaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
  }


  /**
   * Count Type ModemCountOutputType
   */

  export type ModemCountOutputType = {
    registros: number
  }

  export type ModemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | ModemCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * ModemCountOutputType without action
   */
  export type ModemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModemCountOutputType
     */
    select?: ModemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModemCountOutputType without action
   */
  export type ModemCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
  }


  /**
   * Count Type EstadoCountOutputType
   */

  export type EstadoCountOutputType = {
    modems: number
    transicionesDesde: number
    transicionesHacia: number
  }

  export type EstadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modems?: boolean | EstadoCountOutputTypeCountModemsArgs
    transicionesDesde?: boolean | EstadoCountOutputTypeCountTransicionesDesdeArgs
    transicionesHacia?: boolean | EstadoCountOutputTypeCountTransicionesHaciaArgs
  }

  // Custom InputTypes
  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCountOutputType
     */
    select?: EstadoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountModemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
  }

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountTransicionesDesdeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransicionEstadoWhereInput
  }

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountTransicionesHaciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransicionEstadoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    userName: string | null
    email: string | null
    password: string | null
    rol: $Enums.Rol | null
    activo: boolean | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    userName: string | null
    email: string | null
    password: string | null
    rol: $Enums.Rol | null
    activo: boolean | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nombre: number
    userName: number
    email: number
    password: number
    rol: number
    activo: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nombre?: true
    userName?: true
    email?: true
    password?: true
    rol?: true
    activo?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nombre?: true
    userName?: true
    email?: true
    password?: true
    rol?: true
    activo?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nombre?: true
    userName?: true
    email?: true
    password?: true
    rol?: true
    activo?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    rol?: boolean
    activo?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registros?: boolean | User$registrosArgs<ExtArgs>
    lotes?: boolean | User$lotesArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    modems?: boolean | User$modemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    rol?: boolean
    activo?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    rol?: boolean
    activo?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nombre?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    rol?: boolean
    activo?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "userName" | "email" | "password" | "rol" | "activo" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | User$registrosArgs<ExtArgs>
    lotes?: boolean | User$lotesArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    modems?: boolean | User$modemsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      registros: Prisma.$RegistroPayload<ExtArgs>[]
      lotes: Prisma.$LotePayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      modems: Prisma.$ModemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      userName: string
      email: string
      password: string
      rol: $Enums.Rol
      activo: boolean
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends User$registrosArgs<ExtArgs> = {}>(args?: Subset<T, User$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lotes<T extends User$lotesArgs<ExtArgs> = {}>(args?: Subset<T, User$lotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends User$logsArgs<ExtArgs> = {}>(args?: Subset<T, User$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modems<T extends User$modemsArgs<ExtArgs> = {}>(args?: Subset<T, User$modemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly nombre: FieldRef<"User", 'String'>
    readonly userName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly rol: FieldRef<"User", 'Rol'>
    readonly activo: FieldRef<"User", 'Boolean'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.registros
   */
  export type User$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * User.lotes
   */
  export type User$lotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    where?: LoteWhereInput
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    cursor?: LoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoteScalarFieldEnum | LoteScalarFieldEnum[]
  }

  /**
   * User.logs
   */
  export type User$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * User.modems
   */
  export type User$modemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    cursor?: ModemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CatalogoSKU
   */

  export type AggregateCatalogoSKU = {
    _count: CatalogoSKUCountAggregateOutputType | null
    _avg: CatalogoSKUAvgAggregateOutputType | null
    _sum: CatalogoSKUSumAggregateOutputType | null
    _min: CatalogoSKUMinAggregateOutputType | null
    _max: CatalogoSKUMaxAggregateOutputType | null
  }

  export type CatalogoSKUAvgAggregateOutputType = {
    id: number | null
  }

  export type CatalogoSKUSumAggregateOutputType = {
    id: number | null
  }

  export type CatalogoSKUMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    skuItem: string | null
    descripcion: string | null
  }

  export type CatalogoSKUMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    skuItem: string | null
    descripcion: string | null
  }

  export type CatalogoSKUCountAggregateOutputType = {
    id: number
    nombre: number
    skuItem: number
    descripcion: number
    _all: number
  }


  export type CatalogoSKUAvgAggregateInputType = {
    id?: true
  }

  export type CatalogoSKUSumAggregateInputType = {
    id?: true
  }

  export type CatalogoSKUMinAggregateInputType = {
    id?: true
    nombre?: true
    skuItem?: true
    descripcion?: true
  }

  export type CatalogoSKUMaxAggregateInputType = {
    id?: true
    nombre?: true
    skuItem?: true
    descripcion?: true
  }

  export type CatalogoSKUCountAggregateInputType = {
    id?: true
    nombre?: true
    skuItem?: true
    descripcion?: true
    _all?: true
  }

  export type CatalogoSKUAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatalogoSKU to aggregate.
     */
    where?: CatalogoSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogoSKUS to fetch.
     */
    orderBy?: CatalogoSKUOrderByWithRelationInput | CatalogoSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatalogoSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogoSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogoSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CatalogoSKUS
    **/
    _count?: true | CatalogoSKUCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatalogoSKUAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatalogoSKUSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatalogoSKUMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatalogoSKUMaxAggregateInputType
  }

  export type GetCatalogoSKUAggregateType<T extends CatalogoSKUAggregateArgs> = {
        [P in keyof T & keyof AggregateCatalogoSKU]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatalogoSKU[P]>
      : GetScalarType<T[P], AggregateCatalogoSKU[P]>
  }




  export type CatalogoSKUGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatalogoSKUWhereInput
    orderBy?: CatalogoSKUOrderByWithAggregationInput | CatalogoSKUOrderByWithAggregationInput[]
    by: CatalogoSKUScalarFieldEnum[] | CatalogoSKUScalarFieldEnum
    having?: CatalogoSKUScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatalogoSKUCountAggregateInputType | true
    _avg?: CatalogoSKUAvgAggregateInputType
    _sum?: CatalogoSKUSumAggregateInputType
    _min?: CatalogoSKUMinAggregateInputType
    _max?: CatalogoSKUMaxAggregateInputType
  }

  export type CatalogoSKUGroupByOutputType = {
    id: number
    nombre: string
    skuItem: string | null
    descripcion: string | null
    _count: CatalogoSKUCountAggregateOutputType | null
    _avg: CatalogoSKUAvgAggregateOutputType | null
    _sum: CatalogoSKUSumAggregateOutputType | null
    _min: CatalogoSKUMinAggregateOutputType | null
    _max: CatalogoSKUMaxAggregateOutputType | null
  }

  type GetCatalogoSKUGroupByPayload<T extends CatalogoSKUGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatalogoSKUGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatalogoSKUGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatalogoSKUGroupByOutputType[P]>
            : GetScalarType<T[P], CatalogoSKUGroupByOutputType[P]>
        }
      >
    >


  export type CatalogoSKUSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    skuItem?: boolean
    descripcion?: boolean
    lotes?: boolean | CatalogoSKU$lotesArgs<ExtArgs>
    modems?: boolean | CatalogoSKU$modemsArgs<ExtArgs>
    vistas?: boolean | CatalogoSKU$vistasArgs<ExtArgs>
    _count?: boolean | CatalogoSKUCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catalogoSKU"]>

  export type CatalogoSKUSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    skuItem?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["catalogoSKU"]>

  export type CatalogoSKUSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    skuItem?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["catalogoSKU"]>

  export type CatalogoSKUSelectScalar = {
    id?: boolean
    nombre?: boolean
    skuItem?: boolean
    descripcion?: boolean
  }

  export type CatalogoSKUOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "skuItem" | "descripcion", ExtArgs["result"]["catalogoSKU"]>
  export type CatalogoSKUInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lotes?: boolean | CatalogoSKU$lotesArgs<ExtArgs>
    modems?: boolean | CatalogoSKU$modemsArgs<ExtArgs>
    vistas?: boolean | CatalogoSKU$vistasArgs<ExtArgs>
    _count?: boolean | CatalogoSKUCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CatalogoSKUIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CatalogoSKUIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CatalogoSKUPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CatalogoSKU"
    objects: {
      lotes: Prisma.$LotePayload<ExtArgs>[]
      modems: Prisma.$ModemPayload<ExtArgs>[]
      vistas: Prisma.$VistaPorSKUPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      skuItem: string | null
      descripcion: string | null
    }, ExtArgs["result"]["catalogoSKU"]>
    composites: {}
  }

  type CatalogoSKUGetPayload<S extends boolean | null | undefined | CatalogoSKUDefaultArgs> = $Result.GetResult<Prisma.$CatalogoSKUPayload, S>

  type CatalogoSKUCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CatalogoSKUFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CatalogoSKUCountAggregateInputType | true
    }

  export interface CatalogoSKUDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CatalogoSKU'], meta: { name: 'CatalogoSKU' } }
    /**
     * Find zero or one CatalogoSKU that matches the filter.
     * @param {CatalogoSKUFindUniqueArgs} args - Arguments to find a CatalogoSKU
     * @example
     * // Get one CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CatalogoSKUFindUniqueArgs>(args: SelectSubset<T, CatalogoSKUFindUniqueArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CatalogoSKU that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CatalogoSKUFindUniqueOrThrowArgs} args - Arguments to find a CatalogoSKU
     * @example
     * // Get one CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CatalogoSKUFindUniqueOrThrowArgs>(args: SelectSubset<T, CatalogoSKUFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatalogoSKU that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUFindFirstArgs} args - Arguments to find a CatalogoSKU
     * @example
     * // Get one CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CatalogoSKUFindFirstArgs>(args?: SelectSubset<T, CatalogoSKUFindFirstArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatalogoSKU that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUFindFirstOrThrowArgs} args - Arguments to find a CatalogoSKU
     * @example
     * // Get one CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CatalogoSKUFindFirstOrThrowArgs>(args?: SelectSubset<T, CatalogoSKUFindFirstOrThrowArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CatalogoSKUS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CatalogoSKUS
     * const catalogoSKUS = await prisma.catalogoSKU.findMany()
     * 
     * // Get first 10 CatalogoSKUS
     * const catalogoSKUS = await prisma.catalogoSKU.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catalogoSKUWithIdOnly = await prisma.catalogoSKU.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CatalogoSKUFindManyArgs>(args?: SelectSubset<T, CatalogoSKUFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CatalogoSKU.
     * @param {CatalogoSKUCreateArgs} args - Arguments to create a CatalogoSKU.
     * @example
     * // Create one CatalogoSKU
     * const CatalogoSKU = await prisma.catalogoSKU.create({
     *   data: {
     *     // ... data to create a CatalogoSKU
     *   }
     * })
     * 
     */
    create<T extends CatalogoSKUCreateArgs>(args: SelectSubset<T, CatalogoSKUCreateArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CatalogoSKUS.
     * @param {CatalogoSKUCreateManyArgs} args - Arguments to create many CatalogoSKUS.
     * @example
     * // Create many CatalogoSKUS
     * const catalogoSKU = await prisma.catalogoSKU.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CatalogoSKUCreateManyArgs>(args?: SelectSubset<T, CatalogoSKUCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CatalogoSKUS and returns the data saved in the database.
     * @param {CatalogoSKUCreateManyAndReturnArgs} args - Arguments to create many CatalogoSKUS.
     * @example
     * // Create many CatalogoSKUS
     * const catalogoSKU = await prisma.catalogoSKU.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CatalogoSKUS and only return the `id`
     * const catalogoSKUWithIdOnly = await prisma.catalogoSKU.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CatalogoSKUCreateManyAndReturnArgs>(args?: SelectSubset<T, CatalogoSKUCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CatalogoSKU.
     * @param {CatalogoSKUDeleteArgs} args - Arguments to delete one CatalogoSKU.
     * @example
     * // Delete one CatalogoSKU
     * const CatalogoSKU = await prisma.catalogoSKU.delete({
     *   where: {
     *     // ... filter to delete one CatalogoSKU
     *   }
     * })
     * 
     */
    delete<T extends CatalogoSKUDeleteArgs>(args: SelectSubset<T, CatalogoSKUDeleteArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CatalogoSKU.
     * @param {CatalogoSKUUpdateArgs} args - Arguments to update one CatalogoSKU.
     * @example
     * // Update one CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CatalogoSKUUpdateArgs>(args: SelectSubset<T, CatalogoSKUUpdateArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CatalogoSKUS.
     * @param {CatalogoSKUDeleteManyArgs} args - Arguments to filter CatalogoSKUS to delete.
     * @example
     * // Delete a few CatalogoSKUS
     * const { count } = await prisma.catalogoSKU.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CatalogoSKUDeleteManyArgs>(args?: SelectSubset<T, CatalogoSKUDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatalogoSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CatalogoSKUS
     * const catalogoSKU = await prisma.catalogoSKU.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CatalogoSKUUpdateManyArgs>(args: SelectSubset<T, CatalogoSKUUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatalogoSKUS and returns the data updated in the database.
     * @param {CatalogoSKUUpdateManyAndReturnArgs} args - Arguments to update many CatalogoSKUS.
     * @example
     * // Update many CatalogoSKUS
     * const catalogoSKU = await prisma.catalogoSKU.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CatalogoSKUS and only return the `id`
     * const catalogoSKUWithIdOnly = await prisma.catalogoSKU.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CatalogoSKUUpdateManyAndReturnArgs>(args: SelectSubset<T, CatalogoSKUUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CatalogoSKU.
     * @param {CatalogoSKUUpsertArgs} args - Arguments to update or create a CatalogoSKU.
     * @example
     * // Update or create a CatalogoSKU
     * const catalogoSKU = await prisma.catalogoSKU.upsert({
     *   create: {
     *     // ... data to create a CatalogoSKU
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CatalogoSKU we want to update
     *   }
     * })
     */
    upsert<T extends CatalogoSKUUpsertArgs>(args: SelectSubset<T, CatalogoSKUUpsertArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CatalogoSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUCountArgs} args - Arguments to filter CatalogoSKUS to count.
     * @example
     * // Count the number of CatalogoSKUS
     * const count = await prisma.catalogoSKU.count({
     *   where: {
     *     // ... the filter for the CatalogoSKUS we want to count
     *   }
     * })
    **/
    count<T extends CatalogoSKUCountArgs>(
      args?: Subset<T, CatalogoSKUCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatalogoSKUCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CatalogoSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatalogoSKUAggregateArgs>(args: Subset<T, CatalogoSKUAggregateArgs>): Prisma.PrismaPromise<GetCatalogoSKUAggregateType<T>>

    /**
     * Group by CatalogoSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogoSKUGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatalogoSKUGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatalogoSKUGroupByArgs['orderBy'] }
        : { orderBy?: CatalogoSKUGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatalogoSKUGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatalogoSKUGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CatalogoSKU model
   */
  readonly fields: CatalogoSKUFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CatalogoSKU.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatalogoSKUClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lotes<T extends CatalogoSKU$lotesArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKU$lotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modems<T extends CatalogoSKU$modemsArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKU$modemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vistas<T extends CatalogoSKU$vistasArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKU$vistasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CatalogoSKU model
   */
  interface CatalogoSKUFieldRefs {
    readonly id: FieldRef<"CatalogoSKU", 'Int'>
    readonly nombre: FieldRef<"CatalogoSKU", 'String'>
    readonly skuItem: FieldRef<"CatalogoSKU", 'String'>
    readonly descripcion: FieldRef<"CatalogoSKU", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CatalogoSKU findUnique
   */
  export type CatalogoSKUFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter, which CatalogoSKU to fetch.
     */
    where: CatalogoSKUWhereUniqueInput
  }

  /**
   * CatalogoSKU findUniqueOrThrow
   */
  export type CatalogoSKUFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter, which CatalogoSKU to fetch.
     */
    where: CatalogoSKUWhereUniqueInput
  }

  /**
   * CatalogoSKU findFirst
   */
  export type CatalogoSKUFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter, which CatalogoSKU to fetch.
     */
    where?: CatalogoSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogoSKUS to fetch.
     */
    orderBy?: CatalogoSKUOrderByWithRelationInput | CatalogoSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatalogoSKUS.
     */
    cursor?: CatalogoSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogoSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogoSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatalogoSKUS.
     */
    distinct?: CatalogoSKUScalarFieldEnum | CatalogoSKUScalarFieldEnum[]
  }

  /**
   * CatalogoSKU findFirstOrThrow
   */
  export type CatalogoSKUFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter, which CatalogoSKU to fetch.
     */
    where?: CatalogoSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogoSKUS to fetch.
     */
    orderBy?: CatalogoSKUOrderByWithRelationInput | CatalogoSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatalogoSKUS.
     */
    cursor?: CatalogoSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogoSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogoSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatalogoSKUS.
     */
    distinct?: CatalogoSKUScalarFieldEnum | CatalogoSKUScalarFieldEnum[]
  }

  /**
   * CatalogoSKU findMany
   */
  export type CatalogoSKUFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter, which CatalogoSKUS to fetch.
     */
    where?: CatalogoSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogoSKUS to fetch.
     */
    orderBy?: CatalogoSKUOrderByWithRelationInput | CatalogoSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CatalogoSKUS.
     */
    cursor?: CatalogoSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogoSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogoSKUS.
     */
    skip?: number
    distinct?: CatalogoSKUScalarFieldEnum | CatalogoSKUScalarFieldEnum[]
  }

  /**
   * CatalogoSKU create
   */
  export type CatalogoSKUCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * The data needed to create a CatalogoSKU.
     */
    data: XOR<CatalogoSKUCreateInput, CatalogoSKUUncheckedCreateInput>
  }

  /**
   * CatalogoSKU createMany
   */
  export type CatalogoSKUCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CatalogoSKUS.
     */
    data: CatalogoSKUCreateManyInput | CatalogoSKUCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatalogoSKU createManyAndReturn
   */
  export type CatalogoSKUCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * The data used to create many CatalogoSKUS.
     */
    data: CatalogoSKUCreateManyInput | CatalogoSKUCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatalogoSKU update
   */
  export type CatalogoSKUUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * The data needed to update a CatalogoSKU.
     */
    data: XOR<CatalogoSKUUpdateInput, CatalogoSKUUncheckedUpdateInput>
    /**
     * Choose, which CatalogoSKU to update.
     */
    where: CatalogoSKUWhereUniqueInput
  }

  /**
   * CatalogoSKU updateMany
   */
  export type CatalogoSKUUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CatalogoSKUS.
     */
    data: XOR<CatalogoSKUUpdateManyMutationInput, CatalogoSKUUncheckedUpdateManyInput>
    /**
     * Filter which CatalogoSKUS to update
     */
    where?: CatalogoSKUWhereInput
    /**
     * Limit how many CatalogoSKUS to update.
     */
    limit?: number
  }

  /**
   * CatalogoSKU updateManyAndReturn
   */
  export type CatalogoSKUUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * The data used to update CatalogoSKUS.
     */
    data: XOR<CatalogoSKUUpdateManyMutationInput, CatalogoSKUUncheckedUpdateManyInput>
    /**
     * Filter which CatalogoSKUS to update
     */
    where?: CatalogoSKUWhereInput
    /**
     * Limit how many CatalogoSKUS to update.
     */
    limit?: number
  }

  /**
   * CatalogoSKU upsert
   */
  export type CatalogoSKUUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * The filter to search for the CatalogoSKU to update in case it exists.
     */
    where: CatalogoSKUWhereUniqueInput
    /**
     * In case the CatalogoSKU found by the `where` argument doesn't exist, create a new CatalogoSKU with this data.
     */
    create: XOR<CatalogoSKUCreateInput, CatalogoSKUUncheckedCreateInput>
    /**
     * In case the CatalogoSKU was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatalogoSKUUpdateInput, CatalogoSKUUncheckedUpdateInput>
  }

  /**
   * CatalogoSKU delete
   */
  export type CatalogoSKUDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
    /**
     * Filter which CatalogoSKU to delete.
     */
    where: CatalogoSKUWhereUniqueInput
  }

  /**
   * CatalogoSKU deleteMany
   */
  export type CatalogoSKUDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatalogoSKUS to delete
     */
    where?: CatalogoSKUWhereInput
    /**
     * Limit how many CatalogoSKUS to delete.
     */
    limit?: number
  }

  /**
   * CatalogoSKU.lotes
   */
  export type CatalogoSKU$lotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    where?: LoteWhereInput
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    cursor?: LoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoteScalarFieldEnum | LoteScalarFieldEnum[]
  }

  /**
   * CatalogoSKU.modems
   */
  export type CatalogoSKU$modemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    cursor?: ModemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * CatalogoSKU.vistas
   */
  export type CatalogoSKU$vistasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    where?: VistaPorSKUWhereInput
    orderBy?: VistaPorSKUOrderByWithRelationInput | VistaPorSKUOrderByWithRelationInput[]
    cursor?: VistaPorSKUWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VistaPorSKUScalarFieldEnum | VistaPorSKUScalarFieldEnum[]
  }

  /**
   * CatalogoSKU without action
   */
  export type CatalogoSKUDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogoSKU
     */
    select?: CatalogoSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatalogoSKU
     */
    omit?: CatalogoSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogoSKUInclude<ExtArgs> | null
  }


  /**
   * Model VistaPorSKU
   */

  export type AggregateVistaPorSKU = {
    _count: VistaPorSKUCountAggregateOutputType | null
    _avg: VistaPorSKUAvgAggregateOutputType | null
    _sum: VistaPorSKUSumAggregateOutputType | null
    _min: VistaPorSKUMinAggregateOutputType | null
    _max: VistaPorSKUMaxAggregateOutputType | null
  }

  export type VistaPorSKUAvgAggregateOutputType = {
    id: number | null
    skuId: number | null
  }

  export type VistaPorSKUSumAggregateOutputType = {
    id: number | null
    skuId: number | null
  }

  export type VistaPorSKUMinAggregateOutputType = {
    id: number | null
    skuId: number | null
    rol: $Enums.Rol | null
    vista: string | null
  }

  export type VistaPorSKUMaxAggregateOutputType = {
    id: number | null
    skuId: number | null
    rol: $Enums.Rol | null
    vista: string | null
  }

  export type VistaPorSKUCountAggregateOutputType = {
    id: number
    skuId: number
    rol: number
    vista: number
    _all: number
  }


  export type VistaPorSKUAvgAggregateInputType = {
    id?: true
    skuId?: true
  }

  export type VistaPorSKUSumAggregateInputType = {
    id?: true
    skuId?: true
  }

  export type VistaPorSKUMinAggregateInputType = {
    id?: true
    skuId?: true
    rol?: true
    vista?: true
  }

  export type VistaPorSKUMaxAggregateInputType = {
    id?: true
    skuId?: true
    rol?: true
    vista?: true
  }

  export type VistaPorSKUCountAggregateInputType = {
    id?: true
    skuId?: true
    rol?: true
    vista?: true
    _all?: true
  }

  export type VistaPorSKUAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VistaPorSKU to aggregate.
     */
    where?: VistaPorSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VistaPorSKUS to fetch.
     */
    orderBy?: VistaPorSKUOrderByWithRelationInput | VistaPorSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VistaPorSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VistaPorSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VistaPorSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VistaPorSKUS
    **/
    _count?: true | VistaPorSKUCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VistaPorSKUAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VistaPorSKUSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VistaPorSKUMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VistaPorSKUMaxAggregateInputType
  }

  export type GetVistaPorSKUAggregateType<T extends VistaPorSKUAggregateArgs> = {
        [P in keyof T & keyof AggregateVistaPorSKU]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVistaPorSKU[P]>
      : GetScalarType<T[P], AggregateVistaPorSKU[P]>
  }




  export type VistaPorSKUGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VistaPorSKUWhereInput
    orderBy?: VistaPorSKUOrderByWithAggregationInput | VistaPorSKUOrderByWithAggregationInput[]
    by: VistaPorSKUScalarFieldEnum[] | VistaPorSKUScalarFieldEnum
    having?: VistaPorSKUScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VistaPorSKUCountAggregateInputType | true
    _avg?: VistaPorSKUAvgAggregateInputType
    _sum?: VistaPorSKUSumAggregateInputType
    _min?: VistaPorSKUMinAggregateInputType
    _max?: VistaPorSKUMaxAggregateInputType
  }

  export type VistaPorSKUGroupByOutputType = {
    id: number
    skuId: number
    rol: $Enums.Rol
    vista: string
    _count: VistaPorSKUCountAggregateOutputType | null
    _avg: VistaPorSKUAvgAggregateOutputType | null
    _sum: VistaPorSKUSumAggregateOutputType | null
    _min: VistaPorSKUMinAggregateOutputType | null
    _max: VistaPorSKUMaxAggregateOutputType | null
  }

  type GetVistaPorSKUGroupByPayload<T extends VistaPorSKUGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VistaPorSKUGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VistaPorSKUGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VistaPorSKUGroupByOutputType[P]>
            : GetScalarType<T[P], VistaPorSKUGroupByOutputType[P]>
        }
      >
    >


  export type VistaPorSKUSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    rol?: boolean
    vista?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vistaPorSKU"]>

  export type VistaPorSKUSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    rol?: boolean
    vista?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vistaPorSKU"]>

  export type VistaPorSKUSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    rol?: boolean
    vista?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vistaPorSKU"]>

  export type VistaPorSKUSelectScalar = {
    id?: boolean
    skuId?: boolean
    rol?: boolean
    vista?: boolean
  }

  export type VistaPorSKUOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skuId" | "rol" | "vista", ExtArgs["result"]["vistaPorSKU"]>
  export type VistaPorSKUInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }
  export type VistaPorSKUIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }
  export type VistaPorSKUIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
  }

  export type $VistaPorSKUPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VistaPorSKU"
    objects: {
      sku: Prisma.$CatalogoSKUPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      skuId: number
      rol: $Enums.Rol
      vista: string
    }, ExtArgs["result"]["vistaPorSKU"]>
    composites: {}
  }

  type VistaPorSKUGetPayload<S extends boolean | null | undefined | VistaPorSKUDefaultArgs> = $Result.GetResult<Prisma.$VistaPorSKUPayload, S>

  type VistaPorSKUCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VistaPorSKUFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VistaPorSKUCountAggregateInputType | true
    }

  export interface VistaPorSKUDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VistaPorSKU'], meta: { name: 'VistaPorSKU' } }
    /**
     * Find zero or one VistaPorSKU that matches the filter.
     * @param {VistaPorSKUFindUniqueArgs} args - Arguments to find a VistaPorSKU
     * @example
     * // Get one VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VistaPorSKUFindUniqueArgs>(args: SelectSubset<T, VistaPorSKUFindUniqueArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VistaPorSKU that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VistaPorSKUFindUniqueOrThrowArgs} args - Arguments to find a VistaPorSKU
     * @example
     * // Get one VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VistaPorSKUFindUniqueOrThrowArgs>(args: SelectSubset<T, VistaPorSKUFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VistaPorSKU that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUFindFirstArgs} args - Arguments to find a VistaPorSKU
     * @example
     * // Get one VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VistaPorSKUFindFirstArgs>(args?: SelectSubset<T, VistaPorSKUFindFirstArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VistaPorSKU that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUFindFirstOrThrowArgs} args - Arguments to find a VistaPorSKU
     * @example
     * // Get one VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VistaPorSKUFindFirstOrThrowArgs>(args?: SelectSubset<T, VistaPorSKUFindFirstOrThrowArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VistaPorSKUS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VistaPorSKUS
     * const vistaPorSKUS = await prisma.vistaPorSKU.findMany()
     * 
     * // Get first 10 VistaPorSKUS
     * const vistaPorSKUS = await prisma.vistaPorSKU.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vistaPorSKUWithIdOnly = await prisma.vistaPorSKU.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VistaPorSKUFindManyArgs>(args?: SelectSubset<T, VistaPorSKUFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VistaPorSKU.
     * @param {VistaPorSKUCreateArgs} args - Arguments to create a VistaPorSKU.
     * @example
     * // Create one VistaPorSKU
     * const VistaPorSKU = await prisma.vistaPorSKU.create({
     *   data: {
     *     // ... data to create a VistaPorSKU
     *   }
     * })
     * 
     */
    create<T extends VistaPorSKUCreateArgs>(args: SelectSubset<T, VistaPorSKUCreateArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VistaPorSKUS.
     * @param {VistaPorSKUCreateManyArgs} args - Arguments to create many VistaPorSKUS.
     * @example
     * // Create many VistaPorSKUS
     * const vistaPorSKU = await prisma.vistaPorSKU.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VistaPorSKUCreateManyArgs>(args?: SelectSubset<T, VistaPorSKUCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VistaPorSKUS and returns the data saved in the database.
     * @param {VistaPorSKUCreateManyAndReturnArgs} args - Arguments to create many VistaPorSKUS.
     * @example
     * // Create many VistaPorSKUS
     * const vistaPorSKU = await prisma.vistaPorSKU.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VistaPorSKUS and only return the `id`
     * const vistaPorSKUWithIdOnly = await prisma.vistaPorSKU.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VistaPorSKUCreateManyAndReturnArgs>(args?: SelectSubset<T, VistaPorSKUCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VistaPorSKU.
     * @param {VistaPorSKUDeleteArgs} args - Arguments to delete one VistaPorSKU.
     * @example
     * // Delete one VistaPorSKU
     * const VistaPorSKU = await prisma.vistaPorSKU.delete({
     *   where: {
     *     // ... filter to delete one VistaPorSKU
     *   }
     * })
     * 
     */
    delete<T extends VistaPorSKUDeleteArgs>(args: SelectSubset<T, VistaPorSKUDeleteArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VistaPorSKU.
     * @param {VistaPorSKUUpdateArgs} args - Arguments to update one VistaPorSKU.
     * @example
     * // Update one VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VistaPorSKUUpdateArgs>(args: SelectSubset<T, VistaPorSKUUpdateArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VistaPorSKUS.
     * @param {VistaPorSKUDeleteManyArgs} args - Arguments to filter VistaPorSKUS to delete.
     * @example
     * // Delete a few VistaPorSKUS
     * const { count } = await prisma.vistaPorSKU.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VistaPorSKUDeleteManyArgs>(args?: SelectSubset<T, VistaPorSKUDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VistaPorSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VistaPorSKUS
     * const vistaPorSKU = await prisma.vistaPorSKU.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VistaPorSKUUpdateManyArgs>(args: SelectSubset<T, VistaPorSKUUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VistaPorSKUS and returns the data updated in the database.
     * @param {VistaPorSKUUpdateManyAndReturnArgs} args - Arguments to update many VistaPorSKUS.
     * @example
     * // Update many VistaPorSKUS
     * const vistaPorSKU = await prisma.vistaPorSKU.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VistaPorSKUS and only return the `id`
     * const vistaPorSKUWithIdOnly = await prisma.vistaPorSKU.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VistaPorSKUUpdateManyAndReturnArgs>(args: SelectSubset<T, VistaPorSKUUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VistaPorSKU.
     * @param {VistaPorSKUUpsertArgs} args - Arguments to update or create a VistaPorSKU.
     * @example
     * // Update or create a VistaPorSKU
     * const vistaPorSKU = await prisma.vistaPorSKU.upsert({
     *   create: {
     *     // ... data to create a VistaPorSKU
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VistaPorSKU we want to update
     *   }
     * })
     */
    upsert<T extends VistaPorSKUUpsertArgs>(args: SelectSubset<T, VistaPorSKUUpsertArgs<ExtArgs>>): Prisma__VistaPorSKUClient<$Result.GetResult<Prisma.$VistaPorSKUPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VistaPorSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUCountArgs} args - Arguments to filter VistaPorSKUS to count.
     * @example
     * // Count the number of VistaPorSKUS
     * const count = await prisma.vistaPorSKU.count({
     *   where: {
     *     // ... the filter for the VistaPorSKUS we want to count
     *   }
     * })
    **/
    count<T extends VistaPorSKUCountArgs>(
      args?: Subset<T, VistaPorSKUCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VistaPorSKUCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VistaPorSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VistaPorSKUAggregateArgs>(args: Subset<T, VistaPorSKUAggregateArgs>): Prisma.PrismaPromise<GetVistaPorSKUAggregateType<T>>

    /**
     * Group by VistaPorSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VistaPorSKUGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VistaPorSKUGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VistaPorSKUGroupByArgs['orderBy'] }
        : { orderBy?: VistaPorSKUGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VistaPorSKUGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVistaPorSKUGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VistaPorSKU model
   */
  readonly fields: VistaPorSKUFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VistaPorSKU.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VistaPorSKUClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends CatalogoSKUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKUDefaultArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VistaPorSKU model
   */
  interface VistaPorSKUFieldRefs {
    readonly id: FieldRef<"VistaPorSKU", 'Int'>
    readonly skuId: FieldRef<"VistaPorSKU", 'Int'>
    readonly rol: FieldRef<"VistaPorSKU", 'Rol'>
    readonly vista: FieldRef<"VistaPorSKU", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VistaPorSKU findUnique
   */
  export type VistaPorSKUFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter, which VistaPorSKU to fetch.
     */
    where: VistaPorSKUWhereUniqueInput
  }

  /**
   * VistaPorSKU findUniqueOrThrow
   */
  export type VistaPorSKUFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter, which VistaPorSKU to fetch.
     */
    where: VistaPorSKUWhereUniqueInput
  }

  /**
   * VistaPorSKU findFirst
   */
  export type VistaPorSKUFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter, which VistaPorSKU to fetch.
     */
    where?: VistaPorSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VistaPorSKUS to fetch.
     */
    orderBy?: VistaPorSKUOrderByWithRelationInput | VistaPorSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VistaPorSKUS.
     */
    cursor?: VistaPorSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VistaPorSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VistaPorSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VistaPorSKUS.
     */
    distinct?: VistaPorSKUScalarFieldEnum | VistaPorSKUScalarFieldEnum[]
  }

  /**
   * VistaPorSKU findFirstOrThrow
   */
  export type VistaPorSKUFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter, which VistaPorSKU to fetch.
     */
    where?: VistaPorSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VistaPorSKUS to fetch.
     */
    orderBy?: VistaPorSKUOrderByWithRelationInput | VistaPorSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VistaPorSKUS.
     */
    cursor?: VistaPorSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VistaPorSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VistaPorSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VistaPorSKUS.
     */
    distinct?: VistaPorSKUScalarFieldEnum | VistaPorSKUScalarFieldEnum[]
  }

  /**
   * VistaPorSKU findMany
   */
  export type VistaPorSKUFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter, which VistaPorSKUS to fetch.
     */
    where?: VistaPorSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VistaPorSKUS to fetch.
     */
    orderBy?: VistaPorSKUOrderByWithRelationInput | VistaPorSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VistaPorSKUS.
     */
    cursor?: VistaPorSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VistaPorSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VistaPorSKUS.
     */
    skip?: number
    distinct?: VistaPorSKUScalarFieldEnum | VistaPorSKUScalarFieldEnum[]
  }

  /**
   * VistaPorSKU create
   */
  export type VistaPorSKUCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * The data needed to create a VistaPorSKU.
     */
    data: XOR<VistaPorSKUCreateInput, VistaPorSKUUncheckedCreateInput>
  }

  /**
   * VistaPorSKU createMany
   */
  export type VistaPorSKUCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VistaPorSKUS.
     */
    data: VistaPorSKUCreateManyInput | VistaPorSKUCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VistaPorSKU createManyAndReturn
   */
  export type VistaPorSKUCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * The data used to create many VistaPorSKUS.
     */
    data: VistaPorSKUCreateManyInput | VistaPorSKUCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VistaPorSKU update
   */
  export type VistaPorSKUUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * The data needed to update a VistaPorSKU.
     */
    data: XOR<VistaPorSKUUpdateInput, VistaPorSKUUncheckedUpdateInput>
    /**
     * Choose, which VistaPorSKU to update.
     */
    where: VistaPorSKUWhereUniqueInput
  }

  /**
   * VistaPorSKU updateMany
   */
  export type VistaPorSKUUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VistaPorSKUS.
     */
    data: XOR<VistaPorSKUUpdateManyMutationInput, VistaPorSKUUncheckedUpdateManyInput>
    /**
     * Filter which VistaPorSKUS to update
     */
    where?: VistaPorSKUWhereInput
    /**
     * Limit how many VistaPorSKUS to update.
     */
    limit?: number
  }

  /**
   * VistaPorSKU updateManyAndReturn
   */
  export type VistaPorSKUUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * The data used to update VistaPorSKUS.
     */
    data: XOR<VistaPorSKUUpdateManyMutationInput, VistaPorSKUUncheckedUpdateManyInput>
    /**
     * Filter which VistaPorSKUS to update
     */
    where?: VistaPorSKUWhereInput
    /**
     * Limit how many VistaPorSKUS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VistaPorSKU upsert
   */
  export type VistaPorSKUUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * The filter to search for the VistaPorSKU to update in case it exists.
     */
    where: VistaPorSKUWhereUniqueInput
    /**
     * In case the VistaPorSKU found by the `where` argument doesn't exist, create a new VistaPorSKU with this data.
     */
    create: XOR<VistaPorSKUCreateInput, VistaPorSKUUncheckedCreateInput>
    /**
     * In case the VistaPorSKU was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VistaPorSKUUpdateInput, VistaPorSKUUncheckedUpdateInput>
  }

  /**
   * VistaPorSKU delete
   */
  export type VistaPorSKUDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
    /**
     * Filter which VistaPorSKU to delete.
     */
    where: VistaPorSKUWhereUniqueInput
  }

  /**
   * VistaPorSKU deleteMany
   */
  export type VistaPorSKUDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VistaPorSKUS to delete
     */
    where?: VistaPorSKUWhereInput
    /**
     * Limit how many VistaPorSKUS to delete.
     */
    limit?: number
  }

  /**
   * VistaPorSKU without action
   */
  export type VistaPorSKUDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VistaPorSKU
     */
    select?: VistaPorSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VistaPorSKU
     */
    omit?: VistaPorSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VistaPorSKUInclude<ExtArgs> | null
  }


  /**
   * Model Lote
   */

  export type AggregateLote = {
    _count: LoteCountAggregateOutputType | null
    _avg: LoteAvgAggregateOutputType | null
    _sum: LoteSumAggregateOutputType | null
    _min: LoteMinAggregateOutputType | null
    _max: LoteMaxAggregateOutputType | null
  }

  export type LoteAvgAggregateOutputType = {
    id: number | null
    skuId: number | null
    prioridad: number | null
    responsableId: number | null
  }

  export type LoteSumAggregateOutputType = {
    id: number | null
    skuId: number | null
    prioridad: number | null
    responsableId: number | null
  }

  export type LoteMinAggregateOutputType = {
    id: number | null
    numero: string | null
    skuId: number | null
    tipoLote: $Enums.TipoLote | null
    esScrap: boolean | null
    motivoScrap: $Enums.MotivoScrap | null
    estado: $Enums.EstadoLote | null
    prioridad: number | null
    responsableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoteMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    skuId: number | null
    tipoLote: $Enums.TipoLote | null
    esScrap: boolean | null
    motivoScrap: $Enums.MotivoScrap | null
    estado: $Enums.EstadoLote | null
    prioridad: number | null
    responsableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LoteCountAggregateOutputType = {
    id: number
    numero: number
    skuId: number
    tipoLote: number
    esScrap: number
    motivoScrap: number
    estado: number
    prioridad: number
    responsableId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LoteAvgAggregateInputType = {
    id?: true
    skuId?: true
    prioridad?: true
    responsableId?: true
  }

  export type LoteSumAggregateInputType = {
    id?: true
    skuId?: true
    prioridad?: true
    responsableId?: true
  }

  export type LoteMinAggregateInputType = {
    id?: true
    numero?: true
    skuId?: true
    tipoLote?: true
    esScrap?: true
    motivoScrap?: true
    estado?: true
    prioridad?: true
    responsableId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoteMaxAggregateInputType = {
    id?: true
    numero?: true
    skuId?: true
    tipoLote?: true
    esScrap?: true
    motivoScrap?: true
    estado?: true
    prioridad?: true
    responsableId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LoteCountAggregateInputType = {
    id?: true
    numero?: true
    skuId?: true
    tipoLote?: true
    esScrap?: true
    motivoScrap?: true
    estado?: true
    prioridad?: true
    responsableId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lote to aggregate.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lotes
    **/
    _count?: true | LoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoteMaxAggregateInputType
  }

  export type GetLoteAggregateType<T extends LoteAggregateArgs> = {
        [P in keyof T & keyof AggregateLote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLote[P]>
      : GetScalarType<T[P], AggregateLote[P]>
  }




  export type LoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoteWhereInput
    orderBy?: LoteOrderByWithAggregationInput | LoteOrderByWithAggregationInput[]
    by: LoteScalarFieldEnum[] | LoteScalarFieldEnum
    having?: LoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoteCountAggregateInputType | true
    _avg?: LoteAvgAggregateInputType
    _sum?: LoteSumAggregateInputType
    _min?: LoteMinAggregateInputType
    _max?: LoteMaxAggregateInputType
  }

  export type LoteGroupByOutputType = {
    id: number
    numero: string
    skuId: number
    tipoLote: $Enums.TipoLote
    esScrap: boolean
    motivoScrap: $Enums.MotivoScrap | null
    estado: $Enums.EstadoLote
    prioridad: number
    responsableId: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: LoteCountAggregateOutputType | null
    _avg: LoteAvgAggregateOutputType | null
    _sum: LoteSumAggregateOutputType | null
    _min: LoteMinAggregateOutputType | null
    _max: LoteMaxAggregateOutputType | null
  }

  type GetLoteGroupByPayload<T extends LoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoteGroupByOutputType[P]>
            : GetScalarType<T[P], LoteGroupByOutputType[P]>
        }
      >
    >


  export type LoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    skuId?: boolean
    tipoLote?: boolean
    esScrap?: boolean
    motivoScrap?: boolean
    estado?: boolean
    prioridad?: boolean
    responsableId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
    registros?: boolean | Lote$registrosArgs<ExtArgs>
    modems?: boolean | Lote$modemsArgs<ExtArgs>
    modemsSalida?: boolean | Lote$modemsSalidaArgs<ExtArgs>
    _count?: boolean | LoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lote"]>

  export type LoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    skuId?: boolean
    tipoLote?: boolean
    esScrap?: boolean
    motivoScrap?: boolean
    estado?: boolean
    prioridad?: boolean
    responsableId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lote"]>

  export type LoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    skuId?: boolean
    tipoLote?: boolean
    esScrap?: boolean
    motivoScrap?: boolean
    estado?: boolean
    prioridad?: boolean
    responsableId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lote"]>

  export type LoteSelectScalar = {
    id?: boolean
    numero?: boolean
    skuId?: boolean
    tipoLote?: boolean
    esScrap?: boolean
    motivoScrap?: boolean
    estado?: boolean
    prioridad?: boolean
    responsableId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numero" | "skuId" | "tipoLote" | "esScrap" | "motivoScrap" | "estado" | "prioridad" | "responsableId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["lote"]>
  export type LoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
    registros?: boolean | Lote$registrosArgs<ExtArgs>
    modems?: boolean | Lote$modemsArgs<ExtArgs>
    modemsSalida?: boolean | Lote$modemsSalidaArgs<ExtArgs>
    _count?: boolean | LoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lote"
    objects: {
      sku: Prisma.$CatalogoSKUPayload<ExtArgs>
      responsable: Prisma.$UserPayload<ExtArgs>
      registros: Prisma.$RegistroPayload<ExtArgs>[]
      modems: Prisma.$ModemPayload<ExtArgs>[]
      modemsSalida: Prisma.$ModemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      skuId: number
      tipoLote: $Enums.TipoLote
      esScrap: boolean
      motivoScrap: $Enums.MotivoScrap | null
      estado: $Enums.EstadoLote
      prioridad: number
      responsableId: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["lote"]>
    composites: {}
  }

  type LoteGetPayload<S extends boolean | null | undefined | LoteDefaultArgs> = $Result.GetResult<Prisma.$LotePayload, S>

  type LoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoteCountAggregateInputType | true
    }

  export interface LoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lote'], meta: { name: 'Lote' } }
    /**
     * Find zero or one Lote that matches the filter.
     * @param {LoteFindUniqueArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoteFindUniqueArgs>(args: SelectSubset<T, LoteFindUniqueArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoteFindUniqueOrThrowArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoteFindUniqueOrThrowArgs>(args: SelectSubset<T, LoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindFirstArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoteFindFirstArgs>(args?: SelectSubset<T, LoteFindFirstArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindFirstOrThrowArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoteFindFirstOrThrowArgs>(args?: SelectSubset<T, LoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lotes
     * const lotes = await prisma.lote.findMany()
     * 
     * // Get first 10 Lotes
     * const lotes = await prisma.lote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loteWithIdOnly = await prisma.lote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoteFindManyArgs>(args?: SelectSubset<T, LoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lote.
     * @param {LoteCreateArgs} args - Arguments to create a Lote.
     * @example
     * // Create one Lote
     * const Lote = await prisma.lote.create({
     *   data: {
     *     // ... data to create a Lote
     *   }
     * })
     * 
     */
    create<T extends LoteCreateArgs>(args: SelectSubset<T, LoteCreateArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lotes.
     * @param {LoteCreateManyArgs} args - Arguments to create many Lotes.
     * @example
     * // Create many Lotes
     * const lote = await prisma.lote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoteCreateManyArgs>(args?: SelectSubset<T, LoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lotes and returns the data saved in the database.
     * @param {LoteCreateManyAndReturnArgs} args - Arguments to create many Lotes.
     * @example
     * // Create many Lotes
     * const lote = await prisma.lote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lotes and only return the `id`
     * const loteWithIdOnly = await prisma.lote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoteCreateManyAndReturnArgs>(args?: SelectSubset<T, LoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lote.
     * @param {LoteDeleteArgs} args - Arguments to delete one Lote.
     * @example
     * // Delete one Lote
     * const Lote = await prisma.lote.delete({
     *   where: {
     *     // ... filter to delete one Lote
     *   }
     * })
     * 
     */
    delete<T extends LoteDeleteArgs>(args: SelectSubset<T, LoteDeleteArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lote.
     * @param {LoteUpdateArgs} args - Arguments to update one Lote.
     * @example
     * // Update one Lote
     * const lote = await prisma.lote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoteUpdateArgs>(args: SelectSubset<T, LoteUpdateArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lotes.
     * @param {LoteDeleteManyArgs} args - Arguments to filter Lotes to delete.
     * @example
     * // Delete a few Lotes
     * const { count } = await prisma.lote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoteDeleteManyArgs>(args?: SelectSubset<T, LoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lotes
     * const lote = await prisma.lote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoteUpdateManyArgs>(args: SelectSubset<T, LoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lotes and returns the data updated in the database.
     * @param {LoteUpdateManyAndReturnArgs} args - Arguments to update many Lotes.
     * @example
     * // Update many Lotes
     * const lote = await prisma.lote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lotes and only return the `id`
     * const loteWithIdOnly = await prisma.lote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoteUpdateManyAndReturnArgs>(args: SelectSubset<T, LoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lote.
     * @param {LoteUpsertArgs} args - Arguments to update or create a Lote.
     * @example
     * // Update or create a Lote
     * const lote = await prisma.lote.upsert({
     *   create: {
     *     // ... data to create a Lote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lote we want to update
     *   }
     * })
     */
    upsert<T extends LoteUpsertArgs>(args: SelectSubset<T, LoteUpsertArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteCountArgs} args - Arguments to filter Lotes to count.
     * @example
     * // Count the number of Lotes
     * const count = await prisma.lote.count({
     *   where: {
     *     // ... the filter for the Lotes we want to count
     *   }
     * })
    **/
    count<T extends LoteCountArgs>(
      args?: Subset<T, LoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoteAggregateArgs>(args: Subset<T, LoteAggregateArgs>): Prisma.PrismaPromise<GetLoteAggregateType<T>>

    /**
     * Group by Lote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoteGroupByArgs['orderBy'] }
        : { orderBy?: LoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lote model
   */
  readonly fields: LoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends CatalogoSKUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKUDefaultArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    responsable<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registros<T extends Lote$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Lote$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modems<T extends Lote$modemsArgs<ExtArgs> = {}>(args?: Subset<T, Lote$modemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    modemsSalida<T extends Lote$modemsSalidaArgs<ExtArgs> = {}>(args?: Subset<T, Lote$modemsSalidaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lote model
   */
  interface LoteFieldRefs {
    readonly id: FieldRef<"Lote", 'Int'>
    readonly numero: FieldRef<"Lote", 'String'>
    readonly skuId: FieldRef<"Lote", 'Int'>
    readonly tipoLote: FieldRef<"Lote", 'TipoLote'>
    readonly esScrap: FieldRef<"Lote", 'Boolean'>
    readonly motivoScrap: FieldRef<"Lote", 'MotivoScrap'>
    readonly estado: FieldRef<"Lote", 'EstadoLote'>
    readonly prioridad: FieldRef<"Lote", 'Int'>
    readonly responsableId: FieldRef<"Lote", 'Int'>
    readonly createdAt: FieldRef<"Lote", 'DateTime'>
    readonly updatedAt: FieldRef<"Lote", 'DateTime'>
    readonly deletedAt: FieldRef<"Lote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lote findUnique
   */
  export type LoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where: LoteWhereUniqueInput
  }

  /**
   * Lote findUniqueOrThrow
   */
  export type LoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where: LoteWhereUniqueInput
  }

  /**
   * Lote findFirst
   */
  export type LoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lotes.
     */
    distinct?: LoteScalarFieldEnum | LoteScalarFieldEnum[]
  }

  /**
   * Lote findFirstOrThrow
   */
  export type LoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lotes.
     */
    distinct?: LoteScalarFieldEnum | LoteScalarFieldEnum[]
  }

  /**
   * Lote findMany
   */
  export type LoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lotes to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: LoteOrderByWithRelationInput | LoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    distinct?: LoteScalarFieldEnum | LoteScalarFieldEnum[]
  }

  /**
   * Lote create
   */
  export type LoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Lote.
     */
    data: XOR<LoteCreateInput, LoteUncheckedCreateInput>
  }

  /**
   * Lote createMany
   */
  export type LoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lotes.
     */
    data: LoteCreateManyInput | LoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lote createManyAndReturn
   */
  export type LoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * The data used to create many Lotes.
     */
    data: LoteCreateManyInput | LoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lote update
   */
  export type LoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Lote.
     */
    data: XOR<LoteUpdateInput, LoteUncheckedUpdateInput>
    /**
     * Choose, which Lote to update.
     */
    where: LoteWhereUniqueInput
  }

  /**
   * Lote updateMany
   */
  export type LoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lotes.
     */
    data: XOR<LoteUpdateManyMutationInput, LoteUncheckedUpdateManyInput>
    /**
     * Filter which Lotes to update
     */
    where?: LoteWhereInput
    /**
     * Limit how many Lotes to update.
     */
    limit?: number
  }

  /**
   * Lote updateManyAndReturn
   */
  export type LoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * The data used to update Lotes.
     */
    data: XOR<LoteUpdateManyMutationInput, LoteUncheckedUpdateManyInput>
    /**
     * Filter which Lotes to update
     */
    where?: LoteWhereInput
    /**
     * Limit how many Lotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lote upsert
   */
  export type LoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Lote to update in case it exists.
     */
    where: LoteWhereUniqueInput
    /**
     * In case the Lote found by the `where` argument doesn't exist, create a new Lote with this data.
     */
    create: XOR<LoteCreateInput, LoteUncheckedCreateInput>
    /**
     * In case the Lote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoteUpdateInput, LoteUncheckedUpdateInput>
  }

  /**
   * Lote delete
   */
  export type LoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter which Lote to delete.
     */
    where: LoteWhereUniqueInput
  }

  /**
   * Lote deleteMany
   */
  export type LoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lotes to delete
     */
    where?: LoteWhereInput
    /**
     * Limit how many Lotes to delete.
     */
    limit?: number
  }

  /**
   * Lote.registros
   */
  export type Lote$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Lote.modems
   */
  export type Lote$modemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    cursor?: ModemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Lote.modemsSalida
   */
  export type Lote$modemsSalidaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    cursor?: ModemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Lote without action
   */
  export type LoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
  }


  /**
   * Model Modem
   */

  export type AggregateModem = {
    _count: ModemCountAggregateOutputType | null
    _avg: ModemAvgAggregateOutputType | null
    _sum: ModemSumAggregateOutputType | null
    _min: ModemMinAggregateOutputType | null
    _max: ModemMaxAggregateOutputType | null
  }

  export type ModemAvgAggregateOutputType = {
    id: number | null
    skuId: number | null
    estadoActualId: number | null
    loteId: number | null
    loteSalidaId: number | null
    responsableId: number | null
  }

  export type ModemSumAggregateOutputType = {
    id: number | null
    skuId: number | null
    estadoActualId: number | null
    loteId: number | null
    loteSalidaId: number | null
    responsableId: number | null
  }

  export type ModemMinAggregateOutputType = {
    id: number | null
    sn: string | null
    skuId: number | null
    estadoActualId: number | null
    faseActual: $Enums.FaseProceso | null
    loteId: number | null
    loteSalidaId: number | null
    responsableId: number | null
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ModemMaxAggregateOutputType = {
    id: number | null
    sn: string | null
    skuId: number | null
    estadoActualId: number | null
    faseActual: $Enums.FaseProceso | null
    loteId: number | null
    loteSalidaId: number | null
    responsableId: number | null
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ModemCountAggregateOutputType = {
    id: number
    sn: number
    skuId: number
    estadoActualId: number
    faseActual: number
    loteId: number
    loteSalidaId: number
    responsableId: number
    motivoScrap: number
    detalleScrap: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ModemAvgAggregateInputType = {
    id?: true
    skuId?: true
    estadoActualId?: true
    loteId?: true
    loteSalidaId?: true
    responsableId?: true
  }

  export type ModemSumAggregateInputType = {
    id?: true
    skuId?: true
    estadoActualId?: true
    loteId?: true
    loteSalidaId?: true
    responsableId?: true
  }

  export type ModemMinAggregateInputType = {
    id?: true
    sn?: true
    skuId?: true
    estadoActualId?: true
    faseActual?: true
    loteId?: true
    loteSalidaId?: true
    responsableId?: true
    motivoScrap?: true
    detalleScrap?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ModemMaxAggregateInputType = {
    id?: true
    sn?: true
    skuId?: true
    estadoActualId?: true
    faseActual?: true
    loteId?: true
    loteSalidaId?: true
    responsableId?: true
    motivoScrap?: true
    detalleScrap?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ModemCountAggregateInputType = {
    id?: true
    sn?: true
    skuId?: true
    estadoActualId?: true
    faseActual?: true
    loteId?: true
    loteSalidaId?: true
    responsableId?: true
    motivoScrap?: true
    detalleScrap?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ModemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modem to aggregate.
     */
    where?: ModemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modems to fetch.
     */
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Modems
    **/
    _count?: true | ModemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModemMaxAggregateInputType
  }

  export type GetModemAggregateType<T extends ModemAggregateArgs> = {
        [P in keyof T & keyof AggregateModem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModem[P]>
      : GetScalarType<T[P], AggregateModem[P]>
  }




  export type ModemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithAggregationInput | ModemOrderByWithAggregationInput[]
    by: ModemScalarFieldEnum[] | ModemScalarFieldEnum
    having?: ModemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModemCountAggregateInputType | true
    _avg?: ModemAvgAggregateInputType
    _sum?: ModemSumAggregateInputType
    _min?: ModemMinAggregateInputType
    _max?: ModemMaxAggregateInputType
  }

  export type ModemGroupByOutputType = {
    id: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId: number | null
    responsableId: number
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: ModemCountAggregateOutputType | null
    _avg: ModemAvgAggregateOutputType | null
    _sum: ModemSumAggregateOutputType | null
    _min: ModemMinAggregateOutputType | null
    _max: ModemMaxAggregateOutputType | null
  }

  type GetModemGroupByPayload<T extends ModemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModemGroupByOutputType[P]>
            : GetScalarType<T[P], ModemGroupByOutputType[P]>
        }
      >
    >


  export type ModemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    skuId?: boolean
    estadoActualId?: boolean
    faseActual?: boolean
    loteId?: boolean
    loteSalidaId?: boolean
    responsableId?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
    registros?: boolean | Modem$registrosArgs<ExtArgs>
    _count?: boolean | ModemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modem"]>

  export type ModemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    skuId?: boolean
    estadoActualId?: boolean
    faseActual?: boolean
    loteId?: boolean
    loteSalidaId?: boolean
    responsableId?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modem"]>

  export type ModemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    skuId?: boolean
    estadoActualId?: boolean
    faseActual?: boolean
    loteId?: boolean
    loteSalidaId?: boolean
    responsableId?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modem"]>

  export type ModemSelectScalar = {
    id?: boolean
    sn?: boolean
    skuId?: boolean
    estadoActualId?: boolean
    faseActual?: boolean
    loteId?: boolean
    loteSalidaId?: boolean
    responsableId?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ModemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sn" | "skuId" | "estadoActualId" | "faseActual" | "loteId" | "loteSalidaId" | "responsableId" | "motivoScrap" | "detalleScrap" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["modem"]>
  export type ModemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
    registros?: boolean | Modem$registrosArgs<ExtArgs>
    _count?: boolean | ModemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ModemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | CatalogoSKUDefaultArgs<ExtArgs>
    estadoActual?: boolean | EstadoDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    loteSalida?: boolean | Modem$loteSalidaArgs<ExtArgs>
    responsable?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ModemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Modem"
    objects: {
      sku: Prisma.$CatalogoSKUPayload<ExtArgs>
      estadoActual: Prisma.$EstadoPayload<ExtArgs>
      lote: Prisma.$LotePayload<ExtArgs>
      loteSalida: Prisma.$LotePayload<ExtArgs> | null
      responsable: Prisma.$UserPayload<ExtArgs>
      registros: Prisma.$RegistroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sn: string
      skuId: number
      estadoActualId: number
      faseActual: $Enums.FaseProceso
      loteId: number
      loteSalidaId: number | null
      responsableId: number
      motivoScrap: $Enums.MotivoScrap | null
      detalleScrap: $Enums.DetalleScrap | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["modem"]>
    composites: {}
  }

  type ModemGetPayload<S extends boolean | null | undefined | ModemDefaultArgs> = $Result.GetResult<Prisma.$ModemPayload, S>

  type ModemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ModemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ModemCountAggregateInputType | true
    }

  export interface ModemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Modem'], meta: { name: 'Modem' } }
    /**
     * Find zero or one Modem that matches the filter.
     * @param {ModemFindUniqueArgs} args - Arguments to find a Modem
     * @example
     * // Get one Modem
     * const modem = await prisma.modem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModemFindUniqueArgs>(args: SelectSubset<T, ModemFindUniqueArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Modem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ModemFindUniqueOrThrowArgs} args - Arguments to find a Modem
     * @example
     * // Get one Modem
     * const modem = await prisma.modem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModemFindUniqueOrThrowArgs>(args: SelectSubset<T, ModemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Modem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemFindFirstArgs} args - Arguments to find a Modem
     * @example
     * // Get one Modem
     * const modem = await prisma.modem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModemFindFirstArgs>(args?: SelectSubset<T, ModemFindFirstArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Modem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemFindFirstOrThrowArgs} args - Arguments to find a Modem
     * @example
     * // Get one Modem
     * const modem = await prisma.modem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModemFindFirstOrThrowArgs>(args?: SelectSubset<T, ModemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Modems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modems
     * const modems = await prisma.modem.findMany()
     * 
     * // Get first 10 Modems
     * const modems = await prisma.modem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modemWithIdOnly = await prisma.modem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModemFindManyArgs>(args?: SelectSubset<T, ModemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Modem.
     * @param {ModemCreateArgs} args - Arguments to create a Modem.
     * @example
     * // Create one Modem
     * const Modem = await prisma.modem.create({
     *   data: {
     *     // ... data to create a Modem
     *   }
     * })
     * 
     */
    create<T extends ModemCreateArgs>(args: SelectSubset<T, ModemCreateArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Modems.
     * @param {ModemCreateManyArgs} args - Arguments to create many Modems.
     * @example
     * // Create many Modems
     * const modem = await prisma.modem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModemCreateManyArgs>(args?: SelectSubset<T, ModemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Modems and returns the data saved in the database.
     * @param {ModemCreateManyAndReturnArgs} args - Arguments to create many Modems.
     * @example
     * // Create many Modems
     * const modem = await prisma.modem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Modems and only return the `id`
     * const modemWithIdOnly = await prisma.modem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModemCreateManyAndReturnArgs>(args?: SelectSubset<T, ModemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Modem.
     * @param {ModemDeleteArgs} args - Arguments to delete one Modem.
     * @example
     * // Delete one Modem
     * const Modem = await prisma.modem.delete({
     *   where: {
     *     // ... filter to delete one Modem
     *   }
     * })
     * 
     */
    delete<T extends ModemDeleteArgs>(args: SelectSubset<T, ModemDeleteArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Modem.
     * @param {ModemUpdateArgs} args - Arguments to update one Modem.
     * @example
     * // Update one Modem
     * const modem = await prisma.modem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModemUpdateArgs>(args: SelectSubset<T, ModemUpdateArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Modems.
     * @param {ModemDeleteManyArgs} args - Arguments to filter Modems to delete.
     * @example
     * // Delete a few Modems
     * const { count } = await prisma.modem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModemDeleteManyArgs>(args?: SelectSubset<T, ModemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modems
     * const modem = await prisma.modem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModemUpdateManyArgs>(args: SelectSubset<T, ModemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modems and returns the data updated in the database.
     * @param {ModemUpdateManyAndReturnArgs} args - Arguments to update many Modems.
     * @example
     * // Update many Modems
     * const modem = await prisma.modem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Modems and only return the `id`
     * const modemWithIdOnly = await prisma.modem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ModemUpdateManyAndReturnArgs>(args: SelectSubset<T, ModemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Modem.
     * @param {ModemUpsertArgs} args - Arguments to update or create a Modem.
     * @example
     * // Update or create a Modem
     * const modem = await prisma.modem.upsert({
     *   create: {
     *     // ... data to create a Modem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Modem we want to update
     *   }
     * })
     */
    upsert<T extends ModemUpsertArgs>(args: SelectSubset<T, ModemUpsertArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Modems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemCountArgs} args - Arguments to filter Modems to count.
     * @example
     * // Count the number of Modems
     * const count = await prisma.modem.count({
     *   where: {
     *     // ... the filter for the Modems we want to count
     *   }
     * })
    **/
    count<T extends ModemCountArgs>(
      args?: Subset<T, ModemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Modem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModemAggregateArgs>(args: Subset<T, ModemAggregateArgs>): Prisma.PrismaPromise<GetModemAggregateType<T>>

    /**
     * Group by Modem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModemGroupByArgs['orderBy'] }
        : { orderBy?: ModemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Modem model
   */
  readonly fields: ModemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Modem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends CatalogoSKUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CatalogoSKUDefaultArgs<ExtArgs>>): Prisma__CatalogoSKUClient<$Result.GetResult<Prisma.$CatalogoSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    estadoActual<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lote<T extends LoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoteDefaultArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    loteSalida<T extends Modem$loteSalidaArgs<ExtArgs> = {}>(args?: Subset<T, Modem$loteSalidaArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    responsable<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registros<T extends Modem$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Modem$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Modem model
   */
  interface ModemFieldRefs {
    readonly id: FieldRef<"Modem", 'Int'>
    readonly sn: FieldRef<"Modem", 'String'>
    readonly skuId: FieldRef<"Modem", 'Int'>
    readonly estadoActualId: FieldRef<"Modem", 'Int'>
    readonly faseActual: FieldRef<"Modem", 'FaseProceso'>
    readonly loteId: FieldRef<"Modem", 'Int'>
    readonly loteSalidaId: FieldRef<"Modem", 'Int'>
    readonly responsableId: FieldRef<"Modem", 'Int'>
    readonly motivoScrap: FieldRef<"Modem", 'MotivoScrap'>
    readonly detalleScrap: FieldRef<"Modem", 'DetalleScrap'>
    readonly createdAt: FieldRef<"Modem", 'DateTime'>
    readonly updatedAt: FieldRef<"Modem", 'DateTime'>
    readonly deletedAt: FieldRef<"Modem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Modem findUnique
   */
  export type ModemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter, which Modem to fetch.
     */
    where: ModemWhereUniqueInput
  }

  /**
   * Modem findUniqueOrThrow
   */
  export type ModemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter, which Modem to fetch.
     */
    where: ModemWhereUniqueInput
  }

  /**
   * Modem findFirst
   */
  export type ModemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter, which Modem to fetch.
     */
    where?: ModemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modems to fetch.
     */
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modems.
     */
    cursor?: ModemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modems.
     */
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Modem findFirstOrThrow
   */
  export type ModemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter, which Modem to fetch.
     */
    where?: ModemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modems to fetch.
     */
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modems.
     */
    cursor?: ModemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modems.
     */
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Modem findMany
   */
  export type ModemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter, which Modems to fetch.
     */
    where?: ModemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modems to fetch.
     */
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Modems.
     */
    cursor?: ModemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modems.
     */
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Modem create
   */
  export type ModemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * The data needed to create a Modem.
     */
    data: XOR<ModemCreateInput, ModemUncheckedCreateInput>
  }

  /**
   * Modem createMany
   */
  export type ModemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Modems.
     */
    data: ModemCreateManyInput | ModemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Modem createManyAndReturn
   */
  export type ModemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * The data used to create many Modems.
     */
    data: ModemCreateManyInput | ModemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Modem update
   */
  export type ModemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * The data needed to update a Modem.
     */
    data: XOR<ModemUpdateInput, ModemUncheckedUpdateInput>
    /**
     * Choose, which Modem to update.
     */
    where: ModemWhereUniqueInput
  }

  /**
   * Modem updateMany
   */
  export type ModemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Modems.
     */
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyInput>
    /**
     * Filter which Modems to update
     */
    where?: ModemWhereInput
    /**
     * Limit how many Modems to update.
     */
    limit?: number
  }

  /**
   * Modem updateManyAndReturn
   */
  export type ModemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * The data used to update Modems.
     */
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyInput>
    /**
     * Filter which Modems to update
     */
    where?: ModemWhereInput
    /**
     * Limit how many Modems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Modem upsert
   */
  export type ModemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * The filter to search for the Modem to update in case it exists.
     */
    where: ModemWhereUniqueInput
    /**
     * In case the Modem found by the `where` argument doesn't exist, create a new Modem with this data.
     */
    create: XOR<ModemCreateInput, ModemUncheckedCreateInput>
    /**
     * In case the Modem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModemUpdateInput, ModemUncheckedUpdateInput>
  }

  /**
   * Modem delete
   */
  export type ModemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    /**
     * Filter which Modem to delete.
     */
    where: ModemWhereUniqueInput
  }

  /**
   * Modem deleteMany
   */
  export type ModemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modems to delete
     */
    where?: ModemWhereInput
    /**
     * Limit how many Modems to delete.
     */
    limit?: number
  }

  /**
   * Modem.loteSalida
   */
  export type Modem$loteSalidaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lote
     */
    omit?: LoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoteInclude<ExtArgs> | null
    where?: LoteWhereInput
  }

  /**
   * Modem.registros
   */
  export type Modem$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    cursor?: RegistroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Modem without action
   */
  export type ModemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
  }


  /**
   * Model Registro
   */

  export type AggregateRegistro = {
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  export type RegistroAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    loteId: number | null
    modemId: number | null
  }

  export type RegistroSumAggregateOutputType = {
    id: number | null
    userId: number | null
    loteId: number | null
    modemId: number | null
  }

  export type RegistroMinAggregateOutputType = {
    id: number | null
    sn: string | null
    fase: $Enums.FaseProceso | null
    estado: $Enums.EstadoRegistro | null
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    reparacion: string | null
    userId: number | null
    loteId: number | null
    modemId: number | null
    createdAt: Date | null
  }

  export type RegistroMaxAggregateOutputType = {
    id: number | null
    sn: string | null
    fase: $Enums.FaseProceso | null
    estado: $Enums.EstadoRegistro | null
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    reparacion: string | null
    userId: number | null
    loteId: number | null
    modemId: number | null
    createdAt: Date | null
  }

  export type RegistroCountAggregateOutputType = {
    id: number
    sn: number
    fase: number
    estado: number
    motivoScrap: number
    detalleScrap: number
    reparacion: number
    userId: number
    loteId: number
    modemId: number
    createdAt: number
    _all: number
  }


  export type RegistroAvgAggregateInputType = {
    id?: true
    userId?: true
    loteId?: true
    modemId?: true
  }

  export type RegistroSumAggregateInputType = {
    id?: true
    userId?: true
    loteId?: true
    modemId?: true
  }

  export type RegistroMinAggregateInputType = {
    id?: true
    sn?: true
    fase?: true
    estado?: true
    motivoScrap?: true
    detalleScrap?: true
    reparacion?: true
    userId?: true
    loteId?: true
    modemId?: true
    createdAt?: true
  }

  export type RegistroMaxAggregateInputType = {
    id?: true
    sn?: true
    fase?: true
    estado?: true
    motivoScrap?: true
    detalleScrap?: true
    reparacion?: true
    userId?: true
    loteId?: true
    modemId?: true
    createdAt?: true
  }

  export type RegistroCountAggregateInputType = {
    id?: true
    sn?: true
    fase?: true
    estado?: true
    motivoScrap?: true
    detalleScrap?: true
    reparacion?: true
    userId?: true
    loteId?: true
    modemId?: true
    createdAt?: true
    _all?: true
  }

  export type RegistroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registro to aggregate.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registros
    **/
    _count?: true | RegistroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroMaxAggregateInputType
  }

  export type GetRegistroAggregateType<T extends RegistroAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistro[P]>
      : GetScalarType<T[P], AggregateRegistro[P]>
  }




  export type RegistroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroWhereInput
    orderBy?: RegistroOrderByWithAggregationInput | RegistroOrderByWithAggregationInput[]
    by: RegistroScalarFieldEnum[] | RegistroScalarFieldEnum
    having?: RegistroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroCountAggregateInputType | true
    _avg?: RegistroAvgAggregateInputType
    _sum?: RegistroSumAggregateInputType
    _min?: RegistroMinAggregateInputType
    _max?: RegistroMaxAggregateInputType
  }

  export type RegistroGroupByOutputType = {
    id: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap: $Enums.MotivoScrap | null
    detalleScrap: $Enums.DetalleScrap | null
    reparacion: string | null
    userId: number
    loteId: number
    modemId: number
    createdAt: Date
    _count: RegistroCountAggregateOutputType | null
    _avg: RegistroAvgAggregateOutputType | null
    _sum: RegistroSumAggregateOutputType | null
    _min: RegistroMinAggregateOutputType | null
    _max: RegistroMaxAggregateOutputType | null
  }

  type GetRegistroGroupByPayload<T extends RegistroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroGroupByOutputType[P]>
        }
      >
    >


  export type RegistroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    fase?: boolean
    estado?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    reparacion?: boolean
    userId?: boolean
    loteId?: boolean
    modemId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    fase?: boolean
    estado?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    reparacion?: boolean
    userId?: boolean
    loteId?: boolean
    modemId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sn?: boolean
    fase?: boolean
    estado?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    reparacion?: boolean
    userId?: boolean
    loteId?: boolean
    modemId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registro"]>

  export type RegistroSelectScalar = {
    id?: boolean
    sn?: boolean
    fase?: boolean
    estado?: boolean
    motivoScrap?: boolean
    detalleScrap?: boolean
    reparacion?: boolean
    userId?: boolean
    loteId?: boolean
    modemId?: boolean
    createdAt?: boolean
  }

  export type RegistroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sn" | "fase" | "estado" | "motivoScrap" | "detalleScrap" | "reparacion" | "userId" | "loteId" | "modemId" | "createdAt", ExtArgs["result"]["registro"]>
  export type RegistroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }
  export type RegistroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }
  export type RegistroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    lote?: boolean | LoteDefaultArgs<ExtArgs>
    modem?: boolean | ModemDefaultArgs<ExtArgs>
  }

  export type $RegistroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Registro"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      lote: Prisma.$LotePayload<ExtArgs>
      modem: Prisma.$ModemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sn: string
      fase: $Enums.FaseProceso
      estado: $Enums.EstadoRegistro
      motivoScrap: $Enums.MotivoScrap | null
      detalleScrap: $Enums.DetalleScrap | null
      reparacion: string | null
      userId: number
      loteId: number
      modemId: number
      createdAt: Date
    }, ExtArgs["result"]["registro"]>
    composites: {}
  }

  type RegistroGetPayload<S extends boolean | null | undefined | RegistroDefaultArgs> = $Result.GetResult<Prisma.$RegistroPayload, S>

  type RegistroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegistroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistroCountAggregateInputType | true
    }

  export interface RegistroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registro'], meta: { name: 'Registro' } }
    /**
     * Find zero or one Registro that matches the filter.
     * @param {RegistroFindUniqueArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistroFindUniqueArgs>(args: SelectSubset<T, RegistroFindUniqueArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegistroFindUniqueOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistroFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistroFindFirstArgs>(args?: SelectSubset<T, RegistroFindFirstArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindFirstOrThrowArgs} args - Arguments to find a Registro
     * @example
     * // Get one Registro
     * const registro = await prisma.registro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistroFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistroFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registros
     * const registros = await prisma.registro.findMany()
     * 
     * // Get first 10 Registros
     * const registros = await prisma.registro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroWithIdOnly = await prisma.registro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistroFindManyArgs>(args?: SelectSubset<T, RegistroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registro.
     * @param {RegistroCreateArgs} args - Arguments to create a Registro.
     * @example
     * // Create one Registro
     * const Registro = await prisma.registro.create({
     *   data: {
     *     // ... data to create a Registro
     *   }
     * })
     * 
     */
    create<T extends RegistroCreateArgs>(args: SelectSubset<T, RegistroCreateArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registros.
     * @param {RegistroCreateManyArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistroCreateManyArgs>(args?: SelectSubset<T, RegistroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registros and returns the data saved in the database.
     * @param {RegistroCreateManyAndReturnArgs} args - Arguments to create many Registros.
     * @example
     * // Create many Registros
     * const registro = await prisma.registro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistroCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Registro.
     * @param {RegistroDeleteArgs} args - Arguments to delete one Registro.
     * @example
     * // Delete one Registro
     * const Registro = await prisma.registro.delete({
     *   where: {
     *     // ... filter to delete one Registro
     *   }
     * })
     * 
     */
    delete<T extends RegistroDeleteArgs>(args: SelectSubset<T, RegistroDeleteArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registro.
     * @param {RegistroUpdateArgs} args - Arguments to update one Registro.
     * @example
     * // Update one Registro
     * const registro = await prisma.registro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistroUpdateArgs>(args: SelectSubset<T, RegistroUpdateArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registros.
     * @param {RegistroDeleteManyArgs} args - Arguments to filter Registros to delete.
     * @example
     * // Delete a few Registros
     * const { count } = await prisma.registro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistroDeleteManyArgs>(args?: SelectSubset<T, RegistroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistroUpdateManyArgs>(args: SelectSubset<T, RegistroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registros and returns the data updated in the database.
     * @param {RegistroUpdateManyAndReturnArgs} args - Arguments to update many Registros.
     * @example
     * // Update many Registros
     * const registro = await prisma.registro.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Registros and only return the `id`
     * const registroWithIdOnly = await prisma.registro.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegistroUpdateManyAndReturnArgs>(args: SelectSubset<T, RegistroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Registro.
     * @param {RegistroUpsertArgs} args - Arguments to update or create a Registro.
     * @example
     * // Update or create a Registro
     * const registro = await prisma.registro.upsert({
     *   create: {
     *     // ... data to create a Registro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registro we want to update
     *   }
     * })
     */
    upsert<T extends RegistroUpsertArgs>(args: SelectSubset<T, RegistroUpsertArgs<ExtArgs>>): Prisma__RegistroClient<$Result.GetResult<Prisma.$RegistroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCountArgs} args - Arguments to filter Registros to count.
     * @example
     * // Count the number of Registros
     * const count = await prisma.registro.count({
     *   where: {
     *     // ... the filter for the Registros we want to count
     *   }
     * })
    **/
    count<T extends RegistroCountArgs>(
      args?: Subset<T, RegistroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroAggregateArgs>(args: Subset<T, RegistroAggregateArgs>): Prisma.PrismaPromise<GetRegistroAggregateType<T>>

    /**
     * Group by Registro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistroGroupByArgs['orderBy'] }
        : { orderBy?: RegistroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registro model
   */
  readonly fields: RegistroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lote<T extends LoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoteDefaultArgs<ExtArgs>>): Prisma__LoteClient<$Result.GetResult<Prisma.$LotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modem<T extends ModemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModemDefaultArgs<ExtArgs>>): Prisma__ModemClient<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Registro model
   */
  interface RegistroFieldRefs {
    readonly id: FieldRef<"Registro", 'Int'>
    readonly sn: FieldRef<"Registro", 'String'>
    readonly fase: FieldRef<"Registro", 'FaseProceso'>
    readonly estado: FieldRef<"Registro", 'EstadoRegistro'>
    readonly motivoScrap: FieldRef<"Registro", 'MotivoScrap'>
    readonly detalleScrap: FieldRef<"Registro", 'DetalleScrap'>
    readonly reparacion: FieldRef<"Registro", 'String'>
    readonly userId: FieldRef<"Registro", 'Int'>
    readonly loteId: FieldRef<"Registro", 'Int'>
    readonly modemId: FieldRef<"Registro", 'Int'>
    readonly createdAt: FieldRef<"Registro", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Registro findUnique
   */
  export type RegistroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findUniqueOrThrow
   */
  export type RegistroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro findFirst
   */
  export type RegistroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findFirstOrThrow
   */
  export type RegistroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registro to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registros.
     */
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro findMany
   */
  export type RegistroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter, which Registros to fetch.
     */
    where?: RegistroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registros to fetch.
     */
    orderBy?: RegistroOrderByWithRelationInput | RegistroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registros.
     */
    cursor?: RegistroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registros.
     */
    skip?: number
    distinct?: RegistroScalarFieldEnum | RegistroScalarFieldEnum[]
  }

  /**
   * Registro create
   */
  export type RegistroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to create a Registro.
     */
    data: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
  }

  /**
   * Registro createMany
   */
  export type RegistroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Registro createManyAndReturn
   */
  export type RegistroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * The data used to create many Registros.
     */
    data: RegistroCreateManyInput | RegistroCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registro update
   */
  export type RegistroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The data needed to update a Registro.
     */
    data: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
    /**
     * Choose, which Registro to update.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro updateMany
   */
  export type RegistroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registros.
     */
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyInput>
    /**
     * Filter which Registros to update
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to update.
     */
    limit?: number
  }

  /**
   * Registro updateManyAndReturn
   */
  export type RegistroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * The data used to update Registros.
     */
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyInput>
    /**
     * Filter which Registros to update
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registro upsert
   */
  export type RegistroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * The filter to search for the Registro to update in case it exists.
     */
    where: RegistroWhereUniqueInput
    /**
     * In case the Registro found by the `where` argument doesn't exist, create a new Registro with this data.
     */
    create: XOR<RegistroCreateInput, RegistroUncheckedCreateInput>
    /**
     * In case the Registro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistroUpdateInput, RegistroUncheckedUpdateInput>
  }

  /**
   * Registro delete
   */
  export type RegistroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
    /**
     * Filter which Registro to delete.
     */
    where: RegistroWhereUniqueInput
  }

  /**
   * Registro deleteMany
   */
  export type RegistroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registros to delete
     */
    where?: RegistroWhereInput
    /**
     * Limit how many Registros to delete.
     */
    limit?: number
  }

  /**
   * Registro without action
   */
  export type RegistroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registro
     */
    select?: RegistroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registro
     */
    omit?: RegistroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    accion: string | null
    entidad: string | null
    detalle: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    accion: string | null
    entidad: string | null
    detalle: string | null
    userId: number | null
    createdAt: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    accion: number
    entidad: number
    detalle: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    accion?: true
    entidad?: true
    detalle?: true
    userId?: true
    createdAt?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    accion?: true
    entidad?: true
    detalle?: true
    userId?: true
    createdAt?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    accion?: true
    entidad?: true
    detalle?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    accion: string
    entidad: string
    detalle: string | null
    userId: number
    createdAt: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accion?: boolean
    entidad?: boolean
    detalle?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accion?: boolean
    entidad?: boolean
    detalle?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accion?: boolean
    entidad?: boolean
    detalle?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    accion?: boolean
    entidad?: boolean
    detalle?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accion" | "entidad" | "detalle" | "userId" | "createdAt", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accion: string
      entidad: string
      detalle: string | null
      userId: number
      createdAt: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs and returns the data updated in the database.
     * @param {LogUpdateManyAndReturnArgs} args - Arguments to update many Logs.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogUpdateManyAndReturnArgs>(args: SelectSubset<T, LogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly accion: FieldRef<"Log", 'String'>
    readonly entidad: FieldRef<"Log", 'String'>
    readonly detalle: FieldRef<"Log", 'String'>
    readonly userId: FieldRef<"Log", 'Int'>
    readonly createdAt: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log updateManyAndReturn
   */
  export type LogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Model Estado
   */

  export type AggregateEstado = {
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  export type EstadoAvgAggregateOutputType = {
    id: number | null
    ordenDisplay: number | null
  }

  export type EstadoSumAggregateOutputType = {
    id: number | null
    ordenDisplay: number | null
  }

  export type EstadoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    codigoInterno: string | null
    esFinal: boolean | null
    requiereObservacion: boolean | null
    ordenDisplay: number | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EstadoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    codigoInterno: string | null
    esFinal: boolean | null
    requiereObservacion: boolean | null
    ordenDisplay: number | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EstadoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    codigoInterno: number
    esFinal: number
    requiereObservacion: number
    ordenDisplay: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EstadoAvgAggregateInputType = {
    id?: true
    ordenDisplay?: true
  }

  export type EstadoSumAggregateInputType = {
    id?: true
    ordenDisplay?: true
  }

  export type EstadoMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigoInterno?: true
    esFinal?: true
    requiereObservacion?: true
    ordenDisplay?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EstadoMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigoInterno?: true
    esFinal?: true
    requiereObservacion?: true
    ordenDisplay?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EstadoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    codigoInterno?: true
    esFinal?: true
    requiereObservacion?: true
    ordenDisplay?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estado to aggregate.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estados
    **/
    _count?: true | EstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoMaxAggregateInputType
  }

  export type GetEstadoAggregateType<T extends EstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstado[P]>
      : GetScalarType<T[P], AggregateEstado[P]>
  }




  export type EstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoWhereInput
    orderBy?: EstadoOrderByWithAggregationInput | EstadoOrderByWithAggregationInput[]
    by: EstadoScalarFieldEnum[] | EstadoScalarFieldEnum
    having?: EstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCountAggregateInputType | true
    _avg?: EstadoAvgAggregateInputType
    _sum?: EstadoSumAggregateInputType
    _min?: EstadoMinAggregateInputType
    _max?: EstadoMaxAggregateInputType
  }

  export type EstadoGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    codigoInterno: string
    esFinal: boolean
    requiereObservacion: boolean
    ordenDisplay: number
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  type GetEstadoGroupByPayload<T extends EstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigoInterno?: boolean
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    modems?: boolean | Estado$modemsArgs<ExtArgs>
    transicionesDesde?: boolean | Estado$transicionesDesdeArgs<ExtArgs>
    transicionesHacia?: boolean | Estado$transicionesHaciaArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigoInterno?: boolean
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigoInterno?: boolean
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    codigoInterno?: boolean
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EstadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "descripcion" | "codigoInterno" | "esFinal" | "requiereObservacion" | "ordenDisplay" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["estado"]>
  export type EstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modems?: boolean | Estado$modemsArgs<ExtArgs>
    transicionesDesde?: boolean | Estado$transicionesDesdeArgs<ExtArgs>
    transicionesHacia?: boolean | Estado$transicionesHaciaArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EstadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EstadoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estado"
    objects: {
      modems: Prisma.$ModemPayload<ExtArgs>[]
      transicionesDesde: Prisma.$TransicionEstadoPayload<ExtArgs>[]
      transicionesHacia: Prisma.$TransicionEstadoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      codigoInterno: string
      esFinal: boolean
      requiereObservacion: boolean
      ordenDisplay: number
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["estado"]>
    composites: {}
  }

  type EstadoGetPayload<S extends boolean | null | undefined | EstadoDefaultArgs> = $Result.GetResult<Prisma.$EstadoPayload, S>

  type EstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstadoCountAggregateInputType | true
    }

  export interface EstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estado'], meta: { name: 'Estado' } }
    /**
     * Find zero or one Estado that matches the filter.
     * @param {EstadoFindUniqueArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstadoFindUniqueArgs>(args: SelectSubset<T, EstadoFindUniqueArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Estado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstadoFindUniqueOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstadoFindUniqueOrThrowArgs>(args: SelectSubset<T, EstadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstadoFindFirstArgs>(args?: SelectSubset<T, EstadoFindFirstArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstadoFindFirstOrThrowArgs>(args?: SelectSubset<T, EstadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Estados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estados
     * const estados = await prisma.estado.findMany()
     * 
     * // Get first 10 Estados
     * const estados = await prisma.estado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoWithIdOnly = await prisma.estado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstadoFindManyArgs>(args?: SelectSubset<T, EstadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Estado.
     * @param {EstadoCreateArgs} args - Arguments to create a Estado.
     * @example
     * // Create one Estado
     * const Estado = await prisma.estado.create({
     *   data: {
     *     // ... data to create a Estado
     *   }
     * })
     * 
     */
    create<T extends EstadoCreateArgs>(args: SelectSubset<T, EstadoCreateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Estados.
     * @param {EstadoCreateManyArgs} args - Arguments to create many Estados.
     * @example
     * // Create many Estados
     * const estado = await prisma.estado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstadoCreateManyArgs>(args?: SelectSubset<T, EstadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Estados and returns the data saved in the database.
     * @param {EstadoCreateManyAndReturnArgs} args - Arguments to create many Estados.
     * @example
     * // Create many Estados
     * const estado = await prisma.estado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Estados and only return the `id`
     * const estadoWithIdOnly = await prisma.estado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstadoCreateManyAndReturnArgs>(args?: SelectSubset<T, EstadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Estado.
     * @param {EstadoDeleteArgs} args - Arguments to delete one Estado.
     * @example
     * // Delete one Estado
     * const Estado = await prisma.estado.delete({
     *   where: {
     *     // ... filter to delete one Estado
     *   }
     * })
     * 
     */
    delete<T extends EstadoDeleteArgs>(args: SelectSubset<T, EstadoDeleteArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Estado.
     * @param {EstadoUpdateArgs} args - Arguments to update one Estado.
     * @example
     * // Update one Estado
     * const estado = await prisma.estado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstadoUpdateArgs>(args: SelectSubset<T, EstadoUpdateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Estados.
     * @param {EstadoDeleteManyArgs} args - Arguments to filter Estados to delete.
     * @example
     * // Delete a few Estados
     * const { count } = await prisma.estado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstadoDeleteManyArgs>(args?: SelectSubset<T, EstadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstadoUpdateManyArgs>(args: SelectSubset<T, EstadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados and returns the data updated in the database.
     * @param {EstadoUpdateManyAndReturnArgs} args - Arguments to update many Estados.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Estados and only return the `id`
     * const estadoWithIdOnly = await prisma.estado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EstadoUpdateManyAndReturnArgs>(args: SelectSubset<T, EstadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Estado.
     * @param {EstadoUpsertArgs} args - Arguments to update or create a Estado.
     * @example
     * // Update or create a Estado
     * const estado = await prisma.estado.upsert({
     *   create: {
     *     // ... data to create a Estado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estado we want to update
     *   }
     * })
     */
    upsert<T extends EstadoUpsertArgs>(args: SelectSubset<T, EstadoUpsertArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCountArgs} args - Arguments to filter Estados to count.
     * @example
     * // Count the number of Estados
     * const count = await prisma.estado.count({
     *   where: {
     *     // ... the filter for the Estados we want to count
     *   }
     * })
    **/
    count<T extends EstadoCountArgs>(
      args?: Subset<T, EstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoAggregateArgs>(args: Subset<T, EstadoAggregateArgs>): Prisma.PrismaPromise<GetEstadoAggregateType<T>>

    /**
     * Group by Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estado model
   */
  readonly fields: EstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    modems<T extends Estado$modemsArgs<ExtArgs> = {}>(args?: Subset<T, Estado$modemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transicionesDesde<T extends Estado$transicionesDesdeArgs<ExtArgs> = {}>(args?: Subset<T, Estado$transicionesDesdeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transicionesHacia<T extends Estado$transicionesHaciaArgs<ExtArgs> = {}>(args?: Subset<T, Estado$transicionesHaciaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Estado model
   */
  interface EstadoFieldRefs {
    readonly id: FieldRef<"Estado", 'Int'>
    readonly nombre: FieldRef<"Estado", 'String'>
    readonly descripcion: FieldRef<"Estado", 'String'>
    readonly codigoInterno: FieldRef<"Estado", 'String'>
    readonly esFinal: FieldRef<"Estado", 'Boolean'>
    readonly requiereObservacion: FieldRef<"Estado", 'Boolean'>
    readonly ordenDisplay: FieldRef<"Estado", 'Int'>
    readonly color: FieldRef<"Estado", 'String'>
    readonly createdAt: FieldRef<"Estado", 'DateTime'>
    readonly updatedAt: FieldRef<"Estado", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Estado findUnique
   */
  export type EstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findUniqueOrThrow
   */
  export type EstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findFirst
   */
  export type EstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findFirstOrThrow
   */
  export type EstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findMany
   */
  export type EstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estados to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado create
   */
  export type EstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Estado.
     */
    data: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
  }

  /**
   * Estado createMany
   */
  export type EstadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estado createManyAndReturn
   */
  export type EstadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estado update
   */
  export type EstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Estado.
     */
    data: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
    /**
     * Choose, which Estado to update.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado updateMany
   */
  export type EstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to update.
     */
    limit?: number
  }

  /**
   * Estado updateManyAndReturn
   */
  export type EstadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to update.
     */
    limit?: number
  }

  /**
   * Estado upsert
   */
  export type EstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Estado to update in case it exists.
     */
    where: EstadoWhereUniqueInput
    /**
     * In case the Estado found by the `where` argument doesn't exist, create a new Estado with this data.
     */
    create: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
    /**
     * In case the Estado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
  }

  /**
   * Estado delete
   */
  export type EstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter which Estado to delete.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado deleteMany
   */
  export type EstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estados to delete
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to delete.
     */
    limit?: number
  }

  /**
   * Estado.modems
   */
  export type Estado$modemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modem
     */
    select?: ModemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Modem
     */
    omit?: ModemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModemInclude<ExtArgs> | null
    where?: ModemWhereInput
    orderBy?: ModemOrderByWithRelationInput | ModemOrderByWithRelationInput[]
    cursor?: ModemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModemScalarFieldEnum | ModemScalarFieldEnum[]
  }

  /**
   * Estado.transicionesDesde
   */
  export type Estado$transicionesDesdeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    where?: TransicionEstadoWhereInput
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    cursor?: TransicionEstadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransicionEstadoScalarFieldEnum | TransicionEstadoScalarFieldEnum[]
  }

  /**
   * Estado.transicionesHacia
   */
  export type Estado$transicionesHaciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    where?: TransicionEstadoWhereInput
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    cursor?: TransicionEstadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransicionEstadoScalarFieldEnum | TransicionEstadoScalarFieldEnum[]
  }

  /**
   * Estado without action
   */
  export type EstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
  }


  /**
   * Model TransicionEstado
   */

  export type AggregateTransicionEstado = {
    _count: TransicionEstadoCountAggregateOutputType | null
    _avg: TransicionEstadoAvgAggregateOutputType | null
    _sum: TransicionEstadoSumAggregateOutputType | null
    _min: TransicionEstadoMinAggregateOutputType | null
    _max: TransicionEstadoMaxAggregateOutputType | null
  }

  export type TransicionEstadoAvgAggregateOutputType = {
    id: number | null
    estadoDesdeId: number | null
    estadoHaciaId: number | null
  }

  export type TransicionEstadoSumAggregateOutputType = {
    id: number | null
    estadoDesdeId: number | null
    estadoHaciaId: number | null
  }

  export type TransicionEstadoMinAggregateOutputType = {
    id: number | null
    estadoDesdeId: number | null
    estadoHaciaId: number | null
    nombreEvento: string | null
    descripcion: string | null
    requiereCantidad: boolean | null
    requiereObservacion: boolean | null
    rolesPermitidos: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransicionEstadoMaxAggregateOutputType = {
    id: number | null
    estadoDesdeId: number | null
    estadoHaciaId: number | null
    nombreEvento: string | null
    descripcion: string | null
    requiereCantidad: boolean | null
    requiereObservacion: boolean | null
    rolesPermitidos: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransicionEstadoCountAggregateOutputType = {
    id: number
    estadoDesdeId: number
    estadoHaciaId: number
    nombreEvento: number
    descripcion: number
    requiereCantidad: number
    requiereObservacion: number
    rolesPermitidos: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransicionEstadoAvgAggregateInputType = {
    id?: true
    estadoDesdeId?: true
    estadoHaciaId?: true
  }

  export type TransicionEstadoSumAggregateInputType = {
    id?: true
    estadoDesdeId?: true
    estadoHaciaId?: true
  }

  export type TransicionEstadoMinAggregateInputType = {
    id?: true
    estadoDesdeId?: true
    estadoHaciaId?: true
    nombreEvento?: true
    descripcion?: true
    requiereCantidad?: true
    requiereObservacion?: true
    rolesPermitidos?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransicionEstadoMaxAggregateInputType = {
    id?: true
    estadoDesdeId?: true
    estadoHaciaId?: true
    nombreEvento?: true
    descripcion?: true
    requiereCantidad?: true
    requiereObservacion?: true
    rolesPermitidos?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransicionEstadoCountAggregateInputType = {
    id?: true
    estadoDesdeId?: true
    estadoHaciaId?: true
    nombreEvento?: true
    descripcion?: true
    requiereCantidad?: true
    requiereObservacion?: true
    rolesPermitidos?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransicionEstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransicionEstado to aggregate.
     */
    where?: TransicionEstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransicionEstados to fetch.
     */
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransicionEstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransicionEstados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransicionEstados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransicionEstados
    **/
    _count?: true | TransicionEstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransicionEstadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransicionEstadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransicionEstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransicionEstadoMaxAggregateInputType
  }

  export type GetTransicionEstadoAggregateType<T extends TransicionEstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateTransicionEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransicionEstado[P]>
      : GetScalarType<T[P], AggregateTransicionEstado[P]>
  }




  export type TransicionEstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransicionEstadoWhereInput
    orderBy?: TransicionEstadoOrderByWithAggregationInput | TransicionEstadoOrderByWithAggregationInput[]
    by: TransicionEstadoScalarFieldEnum[] | TransicionEstadoScalarFieldEnum
    having?: TransicionEstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransicionEstadoCountAggregateInputType | true
    _avg?: TransicionEstadoAvgAggregateInputType
    _sum?: TransicionEstadoSumAggregateInputType
    _min?: TransicionEstadoMinAggregateInputType
    _max?: TransicionEstadoMaxAggregateInputType
  }

  export type TransicionEstadoGroupByOutputType = {
    id: number
    estadoDesdeId: number
    estadoHaciaId: number
    nombreEvento: string
    descripcion: string | null
    requiereCantidad: boolean
    requiereObservacion: boolean
    rolesPermitidos: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransicionEstadoCountAggregateOutputType | null
    _avg: TransicionEstadoAvgAggregateOutputType | null
    _sum: TransicionEstadoSumAggregateOutputType | null
    _min: TransicionEstadoMinAggregateOutputType | null
    _max: TransicionEstadoMaxAggregateOutputType | null
  }

  type GetTransicionEstadoGroupByPayload<T extends TransicionEstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransicionEstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransicionEstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransicionEstadoGroupByOutputType[P]>
            : GetScalarType<T[P], TransicionEstadoGroupByOutputType[P]>
        }
      >
    >


  export type TransicionEstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estadoDesdeId?: boolean
    estadoHaciaId?: boolean
    nombreEvento?: boolean
    descripcion?: boolean
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transicionEstado"]>

  export type TransicionEstadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estadoDesdeId?: boolean
    estadoHaciaId?: boolean
    nombreEvento?: boolean
    descripcion?: boolean
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transicionEstado"]>

  export type TransicionEstadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estadoDesdeId?: boolean
    estadoHaciaId?: boolean
    nombreEvento?: boolean
    descripcion?: boolean
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transicionEstado"]>

  export type TransicionEstadoSelectScalar = {
    id?: boolean
    estadoDesdeId?: boolean
    estadoHaciaId?: boolean
    nombreEvento?: boolean
    descripcion?: boolean
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransicionEstadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "estadoDesdeId" | "estadoHaciaId" | "nombreEvento" | "descripcion" | "requiereCantidad" | "requiereObservacion" | "rolesPermitidos" | "createdAt" | "updatedAt", ExtArgs["result"]["transicionEstado"]>
  export type TransicionEstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }
  export type TransicionEstadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }
  export type TransicionEstadoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estadoDesde?: boolean | EstadoDefaultArgs<ExtArgs>
    estadoHacia?: boolean | EstadoDefaultArgs<ExtArgs>
  }

  export type $TransicionEstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransicionEstado"
    objects: {
      estadoDesde: Prisma.$EstadoPayload<ExtArgs>
      estadoHacia: Prisma.$EstadoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      estadoDesdeId: number
      estadoHaciaId: number
      nombreEvento: string
      descripcion: string | null
      requiereCantidad: boolean
      requiereObservacion: boolean
      rolesPermitidos: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transicionEstado"]>
    composites: {}
  }

  type TransicionEstadoGetPayload<S extends boolean | null | undefined | TransicionEstadoDefaultArgs> = $Result.GetResult<Prisma.$TransicionEstadoPayload, S>

  type TransicionEstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransicionEstadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransicionEstadoCountAggregateInputType | true
    }

  export interface TransicionEstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransicionEstado'], meta: { name: 'TransicionEstado' } }
    /**
     * Find zero or one TransicionEstado that matches the filter.
     * @param {TransicionEstadoFindUniqueArgs} args - Arguments to find a TransicionEstado
     * @example
     * // Get one TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransicionEstadoFindUniqueArgs>(args: SelectSubset<T, TransicionEstadoFindUniqueArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TransicionEstado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransicionEstadoFindUniqueOrThrowArgs} args - Arguments to find a TransicionEstado
     * @example
     * // Get one TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransicionEstadoFindUniqueOrThrowArgs>(args: SelectSubset<T, TransicionEstadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransicionEstado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoFindFirstArgs} args - Arguments to find a TransicionEstado
     * @example
     * // Get one TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransicionEstadoFindFirstArgs>(args?: SelectSubset<T, TransicionEstadoFindFirstArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransicionEstado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoFindFirstOrThrowArgs} args - Arguments to find a TransicionEstado
     * @example
     * // Get one TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransicionEstadoFindFirstOrThrowArgs>(args?: SelectSubset<T, TransicionEstadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TransicionEstados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransicionEstados
     * const transicionEstados = await prisma.transicionEstado.findMany()
     * 
     * // Get first 10 TransicionEstados
     * const transicionEstados = await prisma.transicionEstado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transicionEstadoWithIdOnly = await prisma.transicionEstado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransicionEstadoFindManyArgs>(args?: SelectSubset<T, TransicionEstadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TransicionEstado.
     * @param {TransicionEstadoCreateArgs} args - Arguments to create a TransicionEstado.
     * @example
     * // Create one TransicionEstado
     * const TransicionEstado = await prisma.transicionEstado.create({
     *   data: {
     *     // ... data to create a TransicionEstado
     *   }
     * })
     * 
     */
    create<T extends TransicionEstadoCreateArgs>(args: SelectSubset<T, TransicionEstadoCreateArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TransicionEstados.
     * @param {TransicionEstadoCreateManyArgs} args - Arguments to create many TransicionEstados.
     * @example
     * // Create many TransicionEstados
     * const transicionEstado = await prisma.transicionEstado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransicionEstadoCreateManyArgs>(args?: SelectSubset<T, TransicionEstadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransicionEstados and returns the data saved in the database.
     * @param {TransicionEstadoCreateManyAndReturnArgs} args - Arguments to create many TransicionEstados.
     * @example
     * // Create many TransicionEstados
     * const transicionEstado = await prisma.transicionEstado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransicionEstados and only return the `id`
     * const transicionEstadoWithIdOnly = await prisma.transicionEstado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransicionEstadoCreateManyAndReturnArgs>(args?: SelectSubset<T, TransicionEstadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TransicionEstado.
     * @param {TransicionEstadoDeleteArgs} args - Arguments to delete one TransicionEstado.
     * @example
     * // Delete one TransicionEstado
     * const TransicionEstado = await prisma.transicionEstado.delete({
     *   where: {
     *     // ... filter to delete one TransicionEstado
     *   }
     * })
     * 
     */
    delete<T extends TransicionEstadoDeleteArgs>(args: SelectSubset<T, TransicionEstadoDeleteArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TransicionEstado.
     * @param {TransicionEstadoUpdateArgs} args - Arguments to update one TransicionEstado.
     * @example
     * // Update one TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransicionEstadoUpdateArgs>(args: SelectSubset<T, TransicionEstadoUpdateArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TransicionEstados.
     * @param {TransicionEstadoDeleteManyArgs} args - Arguments to filter TransicionEstados to delete.
     * @example
     * // Delete a few TransicionEstados
     * const { count } = await prisma.transicionEstado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransicionEstadoDeleteManyArgs>(args?: SelectSubset<T, TransicionEstadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransicionEstados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransicionEstados
     * const transicionEstado = await prisma.transicionEstado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransicionEstadoUpdateManyArgs>(args: SelectSubset<T, TransicionEstadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransicionEstados and returns the data updated in the database.
     * @param {TransicionEstadoUpdateManyAndReturnArgs} args - Arguments to update many TransicionEstados.
     * @example
     * // Update many TransicionEstados
     * const transicionEstado = await prisma.transicionEstado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TransicionEstados and only return the `id`
     * const transicionEstadoWithIdOnly = await prisma.transicionEstado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransicionEstadoUpdateManyAndReturnArgs>(args: SelectSubset<T, TransicionEstadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TransicionEstado.
     * @param {TransicionEstadoUpsertArgs} args - Arguments to update or create a TransicionEstado.
     * @example
     * // Update or create a TransicionEstado
     * const transicionEstado = await prisma.transicionEstado.upsert({
     *   create: {
     *     // ... data to create a TransicionEstado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransicionEstado we want to update
     *   }
     * })
     */
    upsert<T extends TransicionEstadoUpsertArgs>(args: SelectSubset<T, TransicionEstadoUpsertArgs<ExtArgs>>): Prisma__TransicionEstadoClient<$Result.GetResult<Prisma.$TransicionEstadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TransicionEstados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoCountArgs} args - Arguments to filter TransicionEstados to count.
     * @example
     * // Count the number of TransicionEstados
     * const count = await prisma.transicionEstado.count({
     *   where: {
     *     // ... the filter for the TransicionEstados we want to count
     *   }
     * })
    **/
    count<T extends TransicionEstadoCountArgs>(
      args?: Subset<T, TransicionEstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransicionEstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransicionEstado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransicionEstadoAggregateArgs>(args: Subset<T, TransicionEstadoAggregateArgs>): Prisma.PrismaPromise<GetTransicionEstadoAggregateType<T>>

    /**
     * Group by TransicionEstado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransicionEstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransicionEstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransicionEstadoGroupByArgs['orderBy'] }
        : { orderBy?: TransicionEstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransicionEstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransicionEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransicionEstado model
   */
  readonly fields: TransicionEstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransicionEstado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransicionEstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    estadoDesde<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    estadoHacia<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransicionEstado model
   */
  interface TransicionEstadoFieldRefs {
    readonly id: FieldRef<"TransicionEstado", 'Int'>
    readonly estadoDesdeId: FieldRef<"TransicionEstado", 'Int'>
    readonly estadoHaciaId: FieldRef<"TransicionEstado", 'Int'>
    readonly nombreEvento: FieldRef<"TransicionEstado", 'String'>
    readonly descripcion: FieldRef<"TransicionEstado", 'String'>
    readonly requiereCantidad: FieldRef<"TransicionEstado", 'Boolean'>
    readonly requiereObservacion: FieldRef<"TransicionEstado", 'Boolean'>
    readonly rolesPermitidos: FieldRef<"TransicionEstado", 'String'>
    readonly createdAt: FieldRef<"TransicionEstado", 'DateTime'>
    readonly updatedAt: FieldRef<"TransicionEstado", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransicionEstado findUnique
   */
  export type TransicionEstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter, which TransicionEstado to fetch.
     */
    where: TransicionEstadoWhereUniqueInput
  }

  /**
   * TransicionEstado findUniqueOrThrow
   */
  export type TransicionEstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter, which TransicionEstado to fetch.
     */
    where: TransicionEstadoWhereUniqueInput
  }

  /**
   * TransicionEstado findFirst
   */
  export type TransicionEstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter, which TransicionEstado to fetch.
     */
    where?: TransicionEstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransicionEstados to fetch.
     */
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransicionEstados.
     */
    cursor?: TransicionEstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransicionEstados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransicionEstados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransicionEstados.
     */
    distinct?: TransicionEstadoScalarFieldEnum | TransicionEstadoScalarFieldEnum[]
  }

  /**
   * TransicionEstado findFirstOrThrow
   */
  export type TransicionEstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter, which TransicionEstado to fetch.
     */
    where?: TransicionEstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransicionEstados to fetch.
     */
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransicionEstados.
     */
    cursor?: TransicionEstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransicionEstados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransicionEstados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransicionEstados.
     */
    distinct?: TransicionEstadoScalarFieldEnum | TransicionEstadoScalarFieldEnum[]
  }

  /**
   * TransicionEstado findMany
   */
  export type TransicionEstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter, which TransicionEstados to fetch.
     */
    where?: TransicionEstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransicionEstados to fetch.
     */
    orderBy?: TransicionEstadoOrderByWithRelationInput | TransicionEstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransicionEstados.
     */
    cursor?: TransicionEstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransicionEstados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransicionEstados.
     */
    skip?: number
    distinct?: TransicionEstadoScalarFieldEnum | TransicionEstadoScalarFieldEnum[]
  }

  /**
   * TransicionEstado create
   */
  export type TransicionEstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a TransicionEstado.
     */
    data: XOR<TransicionEstadoCreateInput, TransicionEstadoUncheckedCreateInput>
  }

  /**
   * TransicionEstado createMany
   */
  export type TransicionEstadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransicionEstados.
     */
    data: TransicionEstadoCreateManyInput | TransicionEstadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransicionEstado createManyAndReturn
   */
  export type TransicionEstadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * The data used to create many TransicionEstados.
     */
    data: TransicionEstadoCreateManyInput | TransicionEstadoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransicionEstado update
   */
  export type TransicionEstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a TransicionEstado.
     */
    data: XOR<TransicionEstadoUpdateInput, TransicionEstadoUncheckedUpdateInput>
    /**
     * Choose, which TransicionEstado to update.
     */
    where: TransicionEstadoWhereUniqueInput
  }

  /**
   * TransicionEstado updateMany
   */
  export type TransicionEstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransicionEstados.
     */
    data: XOR<TransicionEstadoUpdateManyMutationInput, TransicionEstadoUncheckedUpdateManyInput>
    /**
     * Filter which TransicionEstados to update
     */
    where?: TransicionEstadoWhereInput
    /**
     * Limit how many TransicionEstados to update.
     */
    limit?: number
  }

  /**
   * TransicionEstado updateManyAndReturn
   */
  export type TransicionEstadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * The data used to update TransicionEstados.
     */
    data: XOR<TransicionEstadoUpdateManyMutationInput, TransicionEstadoUncheckedUpdateManyInput>
    /**
     * Filter which TransicionEstados to update
     */
    where?: TransicionEstadoWhereInput
    /**
     * Limit how many TransicionEstados to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransicionEstado upsert
   */
  export type TransicionEstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the TransicionEstado to update in case it exists.
     */
    where: TransicionEstadoWhereUniqueInput
    /**
     * In case the TransicionEstado found by the `where` argument doesn't exist, create a new TransicionEstado with this data.
     */
    create: XOR<TransicionEstadoCreateInput, TransicionEstadoUncheckedCreateInput>
    /**
     * In case the TransicionEstado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransicionEstadoUpdateInput, TransicionEstadoUncheckedUpdateInput>
  }

  /**
   * TransicionEstado delete
   */
  export type TransicionEstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
    /**
     * Filter which TransicionEstado to delete.
     */
    where: TransicionEstadoWhereUniqueInput
  }

  /**
   * TransicionEstado deleteMany
   */
  export type TransicionEstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransicionEstados to delete
     */
    where?: TransicionEstadoWhereInput
    /**
     * Limit how many TransicionEstados to delete.
     */
    limit?: number
  }

  /**
   * TransicionEstado without action
   */
  export type TransicionEstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransicionEstado
     */
    select?: TransicionEstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransicionEstado
     */
    omit?: TransicionEstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransicionEstadoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    userName: 'userName',
    email: 'email',
    password: 'password',
    rol: 'rol',
    activo: 'activo',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CatalogoSKUScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    skuItem: 'skuItem',
    descripcion: 'descripcion'
  };

  export type CatalogoSKUScalarFieldEnum = (typeof CatalogoSKUScalarFieldEnum)[keyof typeof CatalogoSKUScalarFieldEnum]


  export const VistaPorSKUScalarFieldEnum: {
    id: 'id',
    skuId: 'skuId',
    rol: 'rol',
    vista: 'vista'
  };

  export type VistaPorSKUScalarFieldEnum = (typeof VistaPorSKUScalarFieldEnum)[keyof typeof VistaPorSKUScalarFieldEnum]


  export const LoteScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    skuId: 'skuId',
    tipoLote: 'tipoLote',
    esScrap: 'esScrap',
    motivoScrap: 'motivoScrap',
    estado: 'estado',
    prioridad: 'prioridad',
    responsableId: 'responsableId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LoteScalarFieldEnum = (typeof LoteScalarFieldEnum)[keyof typeof LoteScalarFieldEnum]


  export const ModemScalarFieldEnum: {
    id: 'id',
    sn: 'sn',
    skuId: 'skuId',
    estadoActualId: 'estadoActualId',
    faseActual: 'faseActual',
    loteId: 'loteId',
    loteSalidaId: 'loteSalidaId',
    responsableId: 'responsableId',
    motivoScrap: 'motivoScrap',
    detalleScrap: 'detalleScrap',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ModemScalarFieldEnum = (typeof ModemScalarFieldEnum)[keyof typeof ModemScalarFieldEnum]


  export const RegistroScalarFieldEnum: {
    id: 'id',
    sn: 'sn',
    fase: 'fase',
    estado: 'estado',
    motivoScrap: 'motivoScrap',
    detalleScrap: 'detalleScrap',
    reparacion: 'reparacion',
    userId: 'userId',
    loteId: 'loteId',
    modemId: 'modemId',
    createdAt: 'createdAt'
  };

  export type RegistroScalarFieldEnum = (typeof RegistroScalarFieldEnum)[keyof typeof RegistroScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    accion: 'accion',
    entidad: 'entidad',
    detalle: 'detalle',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const EstadoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    codigoInterno: 'codigoInterno',
    esFinal: 'esFinal',
    requiereObservacion: 'requiereObservacion',
    ordenDisplay: 'ordenDisplay',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EstadoScalarFieldEnum = (typeof EstadoScalarFieldEnum)[keyof typeof EstadoScalarFieldEnum]


  export const TransicionEstadoScalarFieldEnum: {
    id: 'id',
    estadoDesdeId: 'estadoDesdeId',
    estadoHaciaId: 'estadoHaciaId',
    nombreEvento: 'nombreEvento',
    descripcion: 'descripcion',
    requiereCantidad: 'requiereCantidad',
    requiereObservacion: 'requiereObservacion',
    rolesPermitidos: 'rolesPermitidos',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransicionEstadoScalarFieldEnum = (typeof TransicionEstadoScalarFieldEnum)[keyof typeof TransicionEstadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Rol'
   */
  export type EnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol'>
    


  /**
   * Reference to a field of type 'Rol[]'
   */
  export type ListEnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TipoLote'
   */
  export type EnumTipoLoteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoLote'>
    


  /**
   * Reference to a field of type 'TipoLote[]'
   */
  export type ListEnumTipoLoteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoLote[]'>
    


  /**
   * Reference to a field of type 'MotivoScrap'
   */
  export type EnumMotivoScrapFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MotivoScrap'>
    


  /**
   * Reference to a field of type 'MotivoScrap[]'
   */
  export type ListEnumMotivoScrapFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MotivoScrap[]'>
    


  /**
   * Reference to a field of type 'EstadoLote'
   */
  export type EnumEstadoLoteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoLote'>
    


  /**
   * Reference to a field of type 'EstadoLote[]'
   */
  export type ListEnumEstadoLoteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoLote[]'>
    


  /**
   * Reference to a field of type 'FaseProceso'
   */
  export type EnumFaseProcesoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FaseProceso'>
    


  /**
   * Reference to a field of type 'FaseProceso[]'
   */
  export type ListEnumFaseProcesoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FaseProceso[]'>
    


  /**
   * Reference to a field of type 'DetalleScrap'
   */
  export type EnumDetalleScrapFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DetalleScrap'>
    


  /**
   * Reference to a field of type 'DetalleScrap[]'
   */
  export type ListEnumDetalleScrapFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DetalleScrap[]'>
    


  /**
   * Reference to a field of type 'EstadoRegistro'
   */
  export type EnumEstadoRegistroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoRegistro'>
    


  /**
   * Reference to a field of type 'EstadoRegistro[]'
   */
  export type ListEnumEstadoRegistroFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoRegistro[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    nombre?: StringFilter<"User"> | string
    userName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    rol?: EnumRolFilter<"User"> | $Enums.Rol
    activo?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    registros?: RegistroListRelationFilter
    lotes?: LoteListRelationFilter
    logs?: LogListRelationFilter
    modems?: ModemListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registros?: RegistroOrderByRelationAggregateInput
    lotes?: LoteOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    modems?: ModemOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userName?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nombre?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    rol?: EnumRolFilter<"User"> | $Enums.Rol
    activo?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    registros?: RegistroListRelationFilter
    lotes?: LoteListRelationFilter
    logs?: LogListRelationFilter
    modems?: ModemListRelationFilter
  }, "id" | "userName" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    nombre?: StringWithAggregatesFilter<"User"> | string
    userName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    rol?: EnumRolWithAggregatesFilter<"User"> | $Enums.Rol
    activo?: BoolWithAggregatesFilter<"User"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CatalogoSKUWhereInput = {
    AND?: CatalogoSKUWhereInput | CatalogoSKUWhereInput[]
    OR?: CatalogoSKUWhereInput[]
    NOT?: CatalogoSKUWhereInput | CatalogoSKUWhereInput[]
    id?: IntFilter<"CatalogoSKU"> | number
    nombre?: StringFilter<"CatalogoSKU"> | string
    skuItem?: StringNullableFilter<"CatalogoSKU"> | string | null
    descripcion?: StringNullableFilter<"CatalogoSKU"> | string | null
    lotes?: LoteListRelationFilter
    modems?: ModemListRelationFilter
    vistas?: VistaPorSKUListRelationFilter
  }

  export type CatalogoSKUOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    skuItem?: SortOrderInput | SortOrder
    descripcion?: SortOrderInput | SortOrder
    lotes?: LoteOrderByRelationAggregateInput
    modems?: ModemOrderByRelationAggregateInput
    vistas?: VistaPorSKUOrderByRelationAggregateInput
  }

  export type CatalogoSKUWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    skuItem?: string
    AND?: CatalogoSKUWhereInput | CatalogoSKUWhereInput[]
    OR?: CatalogoSKUWhereInput[]
    NOT?: CatalogoSKUWhereInput | CatalogoSKUWhereInput[]
    descripcion?: StringNullableFilter<"CatalogoSKU"> | string | null
    lotes?: LoteListRelationFilter
    modems?: ModemListRelationFilter
    vistas?: VistaPorSKUListRelationFilter
  }, "id" | "nombre" | "skuItem">

  export type CatalogoSKUOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    skuItem?: SortOrderInput | SortOrder
    descripcion?: SortOrderInput | SortOrder
    _count?: CatalogoSKUCountOrderByAggregateInput
    _avg?: CatalogoSKUAvgOrderByAggregateInput
    _max?: CatalogoSKUMaxOrderByAggregateInput
    _min?: CatalogoSKUMinOrderByAggregateInput
    _sum?: CatalogoSKUSumOrderByAggregateInput
  }

  export type CatalogoSKUScalarWhereWithAggregatesInput = {
    AND?: CatalogoSKUScalarWhereWithAggregatesInput | CatalogoSKUScalarWhereWithAggregatesInput[]
    OR?: CatalogoSKUScalarWhereWithAggregatesInput[]
    NOT?: CatalogoSKUScalarWhereWithAggregatesInput | CatalogoSKUScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CatalogoSKU"> | number
    nombre?: StringWithAggregatesFilter<"CatalogoSKU"> | string
    skuItem?: StringNullableWithAggregatesFilter<"CatalogoSKU"> | string | null
    descripcion?: StringNullableWithAggregatesFilter<"CatalogoSKU"> | string | null
  }

  export type VistaPorSKUWhereInput = {
    AND?: VistaPorSKUWhereInput | VistaPorSKUWhereInput[]
    OR?: VistaPorSKUWhereInput[]
    NOT?: VistaPorSKUWhereInput | VistaPorSKUWhereInput[]
    id?: IntFilter<"VistaPorSKU"> | number
    skuId?: IntFilter<"VistaPorSKU"> | number
    rol?: EnumRolFilter<"VistaPorSKU"> | $Enums.Rol
    vista?: StringFilter<"VistaPorSKU"> | string
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
  }

  export type VistaPorSKUOrderByWithRelationInput = {
    id?: SortOrder
    skuId?: SortOrder
    rol?: SortOrder
    vista?: SortOrder
    sku?: CatalogoSKUOrderByWithRelationInput
  }

  export type VistaPorSKUWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    skuId_rol?: VistaPorSKUSkuIdRolCompoundUniqueInput
    AND?: VistaPorSKUWhereInput | VistaPorSKUWhereInput[]
    OR?: VistaPorSKUWhereInput[]
    NOT?: VistaPorSKUWhereInput | VistaPorSKUWhereInput[]
    skuId?: IntFilter<"VistaPorSKU"> | number
    rol?: EnumRolFilter<"VistaPorSKU"> | $Enums.Rol
    vista?: StringFilter<"VistaPorSKU"> | string
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
  }, "id" | "skuId_rol">

  export type VistaPorSKUOrderByWithAggregationInput = {
    id?: SortOrder
    skuId?: SortOrder
    rol?: SortOrder
    vista?: SortOrder
    _count?: VistaPorSKUCountOrderByAggregateInput
    _avg?: VistaPorSKUAvgOrderByAggregateInput
    _max?: VistaPorSKUMaxOrderByAggregateInput
    _min?: VistaPorSKUMinOrderByAggregateInput
    _sum?: VistaPorSKUSumOrderByAggregateInput
  }

  export type VistaPorSKUScalarWhereWithAggregatesInput = {
    AND?: VistaPorSKUScalarWhereWithAggregatesInput | VistaPorSKUScalarWhereWithAggregatesInput[]
    OR?: VistaPorSKUScalarWhereWithAggregatesInput[]
    NOT?: VistaPorSKUScalarWhereWithAggregatesInput | VistaPorSKUScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VistaPorSKU"> | number
    skuId?: IntWithAggregatesFilter<"VistaPorSKU"> | number
    rol?: EnumRolWithAggregatesFilter<"VistaPorSKU"> | $Enums.Rol
    vista?: StringWithAggregatesFilter<"VistaPorSKU"> | string
  }

  export type LoteWhereInput = {
    AND?: LoteWhereInput | LoteWhereInput[]
    OR?: LoteWhereInput[]
    NOT?: LoteWhereInput | LoteWhereInput[]
    id?: IntFilter<"Lote"> | number
    numero?: StringFilter<"Lote"> | string
    skuId?: IntFilter<"Lote"> | number
    tipoLote?: EnumTipoLoteFilter<"Lote"> | $Enums.TipoLote
    esScrap?: BoolFilter<"Lote"> | boolean
    motivoScrap?: EnumMotivoScrapNullableFilter<"Lote"> | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFilter<"Lote"> | $Enums.EstadoLote
    prioridad?: IntFilter<"Lote"> | number
    responsableId?: IntFilter<"Lote"> | number
    createdAt?: DateTimeFilter<"Lote"> | Date | string
    updatedAt?: DateTimeFilter<"Lote"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Lote"> | Date | string | null
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
    responsable?: XOR<UserScalarRelationFilter, UserWhereInput>
    registros?: RegistroListRelationFilter
    modems?: ModemListRelationFilter
    modemsSalida?: ModemListRelationFilter
  }

  export type LoteOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    skuId?: SortOrder
    tipoLote?: SortOrder
    esScrap?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    sku?: CatalogoSKUOrderByWithRelationInput
    responsable?: UserOrderByWithRelationInput
    registros?: RegistroOrderByRelationAggregateInput
    modems?: ModemOrderByRelationAggregateInput
    modemsSalida?: ModemOrderByRelationAggregateInput
  }

  export type LoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numero?: string
    AND?: LoteWhereInput | LoteWhereInput[]
    OR?: LoteWhereInput[]
    NOT?: LoteWhereInput | LoteWhereInput[]
    skuId?: IntFilter<"Lote"> | number
    tipoLote?: EnumTipoLoteFilter<"Lote"> | $Enums.TipoLote
    esScrap?: BoolFilter<"Lote"> | boolean
    motivoScrap?: EnumMotivoScrapNullableFilter<"Lote"> | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFilter<"Lote"> | $Enums.EstadoLote
    prioridad?: IntFilter<"Lote"> | number
    responsableId?: IntFilter<"Lote"> | number
    createdAt?: DateTimeFilter<"Lote"> | Date | string
    updatedAt?: DateTimeFilter<"Lote"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Lote"> | Date | string | null
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
    responsable?: XOR<UserScalarRelationFilter, UserWhereInput>
    registros?: RegistroListRelationFilter
    modems?: ModemListRelationFilter
    modemsSalida?: ModemListRelationFilter
  }, "id" | "numero">

  export type LoteOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    skuId?: SortOrder
    tipoLote?: SortOrder
    esScrap?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LoteCountOrderByAggregateInput
    _avg?: LoteAvgOrderByAggregateInput
    _max?: LoteMaxOrderByAggregateInput
    _min?: LoteMinOrderByAggregateInput
    _sum?: LoteSumOrderByAggregateInput
  }

  export type LoteScalarWhereWithAggregatesInput = {
    AND?: LoteScalarWhereWithAggregatesInput | LoteScalarWhereWithAggregatesInput[]
    OR?: LoteScalarWhereWithAggregatesInput[]
    NOT?: LoteScalarWhereWithAggregatesInput | LoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lote"> | number
    numero?: StringWithAggregatesFilter<"Lote"> | string
    skuId?: IntWithAggregatesFilter<"Lote"> | number
    tipoLote?: EnumTipoLoteWithAggregatesFilter<"Lote"> | $Enums.TipoLote
    esScrap?: BoolWithAggregatesFilter<"Lote"> | boolean
    motivoScrap?: EnumMotivoScrapNullableWithAggregatesFilter<"Lote"> | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteWithAggregatesFilter<"Lote"> | $Enums.EstadoLote
    prioridad?: IntWithAggregatesFilter<"Lote"> | number
    responsableId?: IntWithAggregatesFilter<"Lote"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Lote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Lote"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Lote"> | Date | string | null
  }

  export type ModemWhereInput = {
    AND?: ModemWhereInput | ModemWhereInput[]
    OR?: ModemWhereInput[]
    NOT?: ModemWhereInput | ModemWhereInput[]
    id?: IntFilter<"Modem"> | number
    sn?: StringFilter<"Modem"> | string
    skuId?: IntFilter<"Modem"> | number
    estadoActualId?: IntFilter<"Modem"> | number
    faseActual?: EnumFaseProcesoFilter<"Modem"> | $Enums.FaseProceso
    loteId?: IntFilter<"Modem"> | number
    loteSalidaId?: IntNullableFilter<"Modem"> | number | null
    responsableId?: IntFilter<"Modem"> | number
    motivoScrap?: EnumMotivoScrapNullableFilter<"Modem"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Modem"> | $Enums.DetalleScrap | null
    createdAt?: DateTimeFilter<"Modem"> | Date | string
    updatedAt?: DateTimeFilter<"Modem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Modem"> | Date | string | null
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
    estadoActual?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    lote?: XOR<LoteScalarRelationFilter, LoteWhereInput>
    loteSalida?: XOR<LoteNullableScalarRelationFilter, LoteWhereInput> | null
    responsable?: XOR<UserScalarRelationFilter, UserWhereInput>
    registros?: RegistroListRelationFilter
  }

  export type ModemOrderByWithRelationInput = {
    id?: SortOrder
    sn?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    faseActual?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrderInput | SortOrder
    responsableId?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    detalleScrap?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    sku?: CatalogoSKUOrderByWithRelationInput
    estadoActual?: EstadoOrderByWithRelationInput
    lote?: LoteOrderByWithRelationInput
    loteSalida?: LoteOrderByWithRelationInput
    responsable?: UserOrderByWithRelationInput
    registros?: RegistroOrderByRelationAggregateInput
  }

  export type ModemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sn?: string
    AND?: ModemWhereInput | ModemWhereInput[]
    OR?: ModemWhereInput[]
    NOT?: ModemWhereInput | ModemWhereInput[]
    skuId?: IntFilter<"Modem"> | number
    estadoActualId?: IntFilter<"Modem"> | number
    faseActual?: EnumFaseProcesoFilter<"Modem"> | $Enums.FaseProceso
    loteId?: IntFilter<"Modem"> | number
    loteSalidaId?: IntNullableFilter<"Modem"> | number | null
    responsableId?: IntFilter<"Modem"> | number
    motivoScrap?: EnumMotivoScrapNullableFilter<"Modem"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Modem"> | $Enums.DetalleScrap | null
    createdAt?: DateTimeFilter<"Modem"> | Date | string
    updatedAt?: DateTimeFilter<"Modem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Modem"> | Date | string | null
    sku?: XOR<CatalogoSKUScalarRelationFilter, CatalogoSKUWhereInput>
    estadoActual?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    lote?: XOR<LoteScalarRelationFilter, LoteWhereInput>
    loteSalida?: XOR<LoteNullableScalarRelationFilter, LoteWhereInput> | null
    responsable?: XOR<UserScalarRelationFilter, UserWhereInput>
    registros?: RegistroListRelationFilter
  }, "id" | "sn">

  export type ModemOrderByWithAggregationInput = {
    id?: SortOrder
    sn?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    faseActual?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrderInput | SortOrder
    responsableId?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    detalleScrap?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ModemCountOrderByAggregateInput
    _avg?: ModemAvgOrderByAggregateInput
    _max?: ModemMaxOrderByAggregateInput
    _min?: ModemMinOrderByAggregateInput
    _sum?: ModemSumOrderByAggregateInput
  }

  export type ModemScalarWhereWithAggregatesInput = {
    AND?: ModemScalarWhereWithAggregatesInput | ModemScalarWhereWithAggregatesInput[]
    OR?: ModemScalarWhereWithAggregatesInput[]
    NOT?: ModemScalarWhereWithAggregatesInput | ModemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Modem"> | number
    sn?: StringWithAggregatesFilter<"Modem"> | string
    skuId?: IntWithAggregatesFilter<"Modem"> | number
    estadoActualId?: IntWithAggregatesFilter<"Modem"> | number
    faseActual?: EnumFaseProcesoWithAggregatesFilter<"Modem"> | $Enums.FaseProceso
    loteId?: IntWithAggregatesFilter<"Modem"> | number
    loteSalidaId?: IntNullableWithAggregatesFilter<"Modem"> | number | null
    responsableId?: IntWithAggregatesFilter<"Modem"> | number
    motivoScrap?: EnumMotivoScrapNullableWithAggregatesFilter<"Modem"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableWithAggregatesFilter<"Modem"> | $Enums.DetalleScrap | null
    createdAt?: DateTimeWithAggregatesFilter<"Modem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Modem"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Modem"> | Date | string | null
  }

  export type RegistroWhereInput = {
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    id?: IntFilter<"Registro"> | number
    sn?: StringFilter<"Registro"> | string
    fase?: EnumFaseProcesoFilter<"Registro"> | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFilter<"Registro"> | $Enums.EstadoRegistro
    motivoScrap?: EnumMotivoScrapNullableFilter<"Registro"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Registro"> | $Enums.DetalleScrap | null
    reparacion?: StringNullableFilter<"Registro"> | string | null
    userId?: IntFilter<"Registro"> | number
    loteId?: IntFilter<"Registro"> | number
    modemId?: IntFilter<"Registro"> | number
    createdAt?: DateTimeFilter<"Registro"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    lote?: XOR<LoteScalarRelationFilter, LoteWhereInput>
    modem?: XOR<ModemScalarRelationFilter, ModemWhereInput>
  }

  export type RegistroOrderByWithRelationInput = {
    id?: SortOrder
    sn?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    detalleScrap?: SortOrderInput | SortOrder
    reparacion?: SortOrderInput | SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    lote?: LoteOrderByWithRelationInput
    modem?: ModemOrderByWithRelationInput
  }

  export type RegistroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegistroWhereInput | RegistroWhereInput[]
    OR?: RegistroWhereInput[]
    NOT?: RegistroWhereInput | RegistroWhereInput[]
    sn?: StringFilter<"Registro"> | string
    fase?: EnumFaseProcesoFilter<"Registro"> | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFilter<"Registro"> | $Enums.EstadoRegistro
    motivoScrap?: EnumMotivoScrapNullableFilter<"Registro"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Registro"> | $Enums.DetalleScrap | null
    reparacion?: StringNullableFilter<"Registro"> | string | null
    userId?: IntFilter<"Registro"> | number
    loteId?: IntFilter<"Registro"> | number
    modemId?: IntFilter<"Registro"> | number
    createdAt?: DateTimeFilter<"Registro"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    lote?: XOR<LoteScalarRelationFilter, LoteWhereInput>
    modem?: XOR<ModemScalarRelationFilter, ModemWhereInput>
  }, "id">

  export type RegistroOrderByWithAggregationInput = {
    id?: SortOrder
    sn?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    motivoScrap?: SortOrderInput | SortOrder
    detalleScrap?: SortOrderInput | SortOrder
    reparacion?: SortOrderInput | SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
    createdAt?: SortOrder
    _count?: RegistroCountOrderByAggregateInput
    _avg?: RegistroAvgOrderByAggregateInput
    _max?: RegistroMaxOrderByAggregateInput
    _min?: RegistroMinOrderByAggregateInput
    _sum?: RegistroSumOrderByAggregateInput
  }

  export type RegistroScalarWhereWithAggregatesInput = {
    AND?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    OR?: RegistroScalarWhereWithAggregatesInput[]
    NOT?: RegistroScalarWhereWithAggregatesInput | RegistroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Registro"> | number
    sn?: StringWithAggregatesFilter<"Registro"> | string
    fase?: EnumFaseProcesoWithAggregatesFilter<"Registro"> | $Enums.FaseProceso
    estado?: EnumEstadoRegistroWithAggregatesFilter<"Registro"> | $Enums.EstadoRegistro
    motivoScrap?: EnumMotivoScrapNullableWithAggregatesFilter<"Registro"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableWithAggregatesFilter<"Registro"> | $Enums.DetalleScrap | null
    reparacion?: StringNullableWithAggregatesFilter<"Registro"> | string | null
    userId?: IntWithAggregatesFilter<"Registro"> | number
    loteId?: IntWithAggregatesFilter<"Registro"> | number
    modemId?: IntWithAggregatesFilter<"Registro"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Registro"> | Date | string
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    accion?: StringFilter<"Log"> | string
    entidad?: StringFilter<"Log"> | string
    detalle?: StringNullableFilter<"Log"> | string | null
    userId?: IntFilter<"Log"> | number
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    accion?: SortOrder
    entidad?: SortOrder
    detalle?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    accion?: StringFilter<"Log"> | string
    entidad?: StringFilter<"Log"> | string
    detalle?: StringNullableFilter<"Log"> | string | null
    userId?: IntFilter<"Log"> | number
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    accion?: SortOrder
    entidad?: SortOrder
    detalle?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    accion?: StringWithAggregatesFilter<"Log"> | string
    entidad?: StringWithAggregatesFilter<"Log"> | string
    detalle?: StringNullableWithAggregatesFilter<"Log"> | string | null
    userId?: IntWithAggregatesFilter<"Log"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type EstadoWhereInput = {
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    id?: IntFilter<"Estado"> | number
    nombre?: StringFilter<"Estado"> | string
    descripcion?: StringNullableFilter<"Estado"> | string | null
    codigoInterno?: StringFilter<"Estado"> | string
    esFinal?: BoolFilter<"Estado"> | boolean
    requiereObservacion?: BoolFilter<"Estado"> | boolean
    ordenDisplay?: IntFilter<"Estado"> | number
    color?: StringNullableFilter<"Estado"> | string | null
    createdAt?: DateTimeFilter<"Estado"> | Date | string
    updatedAt?: DateTimeFilter<"Estado"> | Date | string
    modems?: ModemListRelationFilter
    transicionesDesde?: TransicionEstadoListRelationFilter
    transicionesHacia?: TransicionEstadoListRelationFilter
  }

  export type EstadoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    codigoInterno?: SortOrder
    esFinal?: SortOrder
    requiereObservacion?: SortOrder
    ordenDisplay?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    modems?: ModemOrderByRelationAggregateInput
    transicionesDesde?: TransicionEstadoOrderByRelationAggregateInput
    transicionesHacia?: TransicionEstadoOrderByRelationAggregateInput
  }

  export type EstadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    codigoInterno?: string
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    descripcion?: StringNullableFilter<"Estado"> | string | null
    esFinal?: BoolFilter<"Estado"> | boolean
    requiereObservacion?: BoolFilter<"Estado"> | boolean
    ordenDisplay?: IntFilter<"Estado"> | number
    color?: StringNullableFilter<"Estado"> | string | null
    createdAt?: DateTimeFilter<"Estado"> | Date | string
    updatedAt?: DateTimeFilter<"Estado"> | Date | string
    modems?: ModemListRelationFilter
    transicionesDesde?: TransicionEstadoListRelationFilter
    transicionesHacia?: TransicionEstadoListRelationFilter
  }, "id" | "nombre" | "codigoInterno">

  export type EstadoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    codigoInterno?: SortOrder
    esFinal?: SortOrder
    requiereObservacion?: SortOrder
    ordenDisplay?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EstadoCountOrderByAggregateInput
    _avg?: EstadoAvgOrderByAggregateInput
    _max?: EstadoMaxOrderByAggregateInput
    _min?: EstadoMinOrderByAggregateInput
    _sum?: EstadoSumOrderByAggregateInput
  }

  export type EstadoScalarWhereWithAggregatesInput = {
    AND?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    OR?: EstadoScalarWhereWithAggregatesInput[]
    NOT?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Estado"> | number
    nombre?: StringWithAggregatesFilter<"Estado"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Estado"> | string | null
    codigoInterno?: StringWithAggregatesFilter<"Estado"> | string
    esFinal?: BoolWithAggregatesFilter<"Estado"> | boolean
    requiereObservacion?: BoolWithAggregatesFilter<"Estado"> | boolean
    ordenDisplay?: IntWithAggregatesFilter<"Estado"> | number
    color?: StringNullableWithAggregatesFilter<"Estado"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Estado"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Estado"> | Date | string
  }

  export type TransicionEstadoWhereInput = {
    AND?: TransicionEstadoWhereInput | TransicionEstadoWhereInput[]
    OR?: TransicionEstadoWhereInput[]
    NOT?: TransicionEstadoWhereInput | TransicionEstadoWhereInput[]
    id?: IntFilter<"TransicionEstado"> | number
    estadoDesdeId?: IntFilter<"TransicionEstado"> | number
    estadoHaciaId?: IntFilter<"TransicionEstado"> | number
    nombreEvento?: StringFilter<"TransicionEstado"> | string
    descripcion?: StringNullableFilter<"TransicionEstado"> | string | null
    requiereCantidad?: BoolFilter<"TransicionEstado"> | boolean
    requiereObservacion?: BoolFilter<"TransicionEstado"> | boolean
    rolesPermitidos?: StringNullableFilter<"TransicionEstado"> | string | null
    createdAt?: DateTimeFilter<"TransicionEstado"> | Date | string
    updatedAt?: DateTimeFilter<"TransicionEstado"> | Date | string
    estadoDesde?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    estadoHacia?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
  }

  export type TransicionEstadoOrderByWithRelationInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
    nombreEvento?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    requiereCantidad?: SortOrder
    requiereObservacion?: SortOrder
    rolesPermitidos?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    estadoDesde?: EstadoOrderByWithRelationInput
    estadoHacia?: EstadoOrderByWithRelationInput
  }

  export type TransicionEstadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    estadoDesdeId_nombreEvento?: TransicionEstadoEstadoDesdeIdNombreEventoCompoundUniqueInput
    AND?: TransicionEstadoWhereInput | TransicionEstadoWhereInput[]
    OR?: TransicionEstadoWhereInput[]
    NOT?: TransicionEstadoWhereInput | TransicionEstadoWhereInput[]
    estadoDesdeId?: IntFilter<"TransicionEstado"> | number
    estadoHaciaId?: IntFilter<"TransicionEstado"> | number
    nombreEvento?: StringFilter<"TransicionEstado"> | string
    descripcion?: StringNullableFilter<"TransicionEstado"> | string | null
    requiereCantidad?: BoolFilter<"TransicionEstado"> | boolean
    requiereObservacion?: BoolFilter<"TransicionEstado"> | boolean
    rolesPermitidos?: StringNullableFilter<"TransicionEstado"> | string | null
    createdAt?: DateTimeFilter<"TransicionEstado"> | Date | string
    updatedAt?: DateTimeFilter<"TransicionEstado"> | Date | string
    estadoDesde?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    estadoHacia?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
  }, "id" | "estadoDesdeId_nombreEvento">

  export type TransicionEstadoOrderByWithAggregationInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
    nombreEvento?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    requiereCantidad?: SortOrder
    requiereObservacion?: SortOrder
    rolesPermitidos?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransicionEstadoCountOrderByAggregateInput
    _avg?: TransicionEstadoAvgOrderByAggregateInput
    _max?: TransicionEstadoMaxOrderByAggregateInput
    _min?: TransicionEstadoMinOrderByAggregateInput
    _sum?: TransicionEstadoSumOrderByAggregateInput
  }

  export type TransicionEstadoScalarWhereWithAggregatesInput = {
    AND?: TransicionEstadoScalarWhereWithAggregatesInput | TransicionEstadoScalarWhereWithAggregatesInput[]
    OR?: TransicionEstadoScalarWhereWithAggregatesInput[]
    NOT?: TransicionEstadoScalarWhereWithAggregatesInput | TransicionEstadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransicionEstado"> | number
    estadoDesdeId?: IntWithAggregatesFilter<"TransicionEstado"> | number
    estadoHaciaId?: IntWithAggregatesFilter<"TransicionEstado"> | number
    nombreEvento?: StringWithAggregatesFilter<"TransicionEstado"> | string
    descripcion?: StringNullableWithAggregatesFilter<"TransicionEstado"> | string | null
    requiereCantidad?: BoolWithAggregatesFilter<"TransicionEstado"> | boolean
    requiereObservacion?: BoolWithAggregatesFilter<"TransicionEstado"> | boolean
    rolesPermitidos?: StringNullableWithAggregatesFilter<"TransicionEstado"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TransicionEstado"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TransicionEstado"> | Date | string
  }

  export type UserCreateInput = {
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroCreateNestedManyWithoutUserInput
    lotes?: LoteCreateNestedManyWithoutResponsableInput
    logs?: LogCreateNestedManyWithoutUserInput
    modems?: ModemCreateNestedManyWithoutResponsableInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroUncheckedCreateNestedManyWithoutUserInput
    lotes?: LoteUncheckedCreateNestedManyWithoutResponsableInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    modems?: ModemUncheckedCreateNestedManyWithoutResponsableInput
  }

  export type UserUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUpdateManyWithoutUserNestedInput
    lotes?: LoteUpdateManyWithoutResponsableNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    modems?: ModemUpdateManyWithoutResponsableNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUncheckedUpdateManyWithoutUserNestedInput
    lotes?: LoteUncheckedUpdateManyWithoutResponsableNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    modems?: ModemUncheckedUpdateManyWithoutResponsableNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CatalogoSKUCreateInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteCreateNestedManyWithoutSkuInput
    modems?: ModemCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUUncheckedCreateInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteUncheckedCreateNestedManyWithoutSkuInput
    modems?: ModemUncheckedCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUUncheckedCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUpdateManyWithoutSkuNestedInput
    modems?: ModemUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUncheckedUpdateManyWithoutSkuNestedInput
    modems?: ModemUncheckedUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUCreateManyInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
  }

  export type CatalogoSKUUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CatalogoSKUUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VistaPorSKUCreateInput = {
    rol: $Enums.Rol
    vista: string
    sku: CatalogoSKUCreateNestedOneWithoutVistasInput
  }

  export type VistaPorSKUUncheckedCreateInput = {
    id?: number
    skuId: number
    rol: $Enums.Rol
    vista: string
  }

  export type VistaPorSKUUpdateInput = {
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
    sku?: CatalogoSKUUpdateOneRequiredWithoutVistasNestedInput
  }

  export type VistaPorSKUUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    skuId?: IntFieldUpdateOperationsInput | number
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type VistaPorSKUCreateManyInput = {
    id?: number
    skuId: number
    rol: $Enums.Rol
    vista: string
  }

  export type VistaPorSKUUpdateManyMutationInput = {
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type VistaPorSKUUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    skuId?: IntFieldUpdateOperationsInput | number
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type LoteCreateInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutLotesInput
    responsable: UserCreateNestedOneWithoutLotesInput
    registros?: RegistroCreateNestedManyWithoutLoteInput
    modems?: ModemCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUncheckedCreateInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutLoteInput
    modems?: ModemUncheckedCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemUncheckedCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput
    responsable?: UserUpdateOneRequiredWithoutLotesNestedInput
    registros?: RegistroUpdateManyWithoutLoteNestedInput
    modems?: ModemUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutLoteNestedInput
    modems?: ModemUncheckedUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteCreateManyInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LoteUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ModemCreateInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    responsable: UserCreateNestedOneWithoutModemsInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemUpdateInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemCreateManyInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ModemUpdateManyMutationInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ModemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RegistroCreateInput = {
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRegistrosInput
    lote: LoteCreateNestedOneWithoutRegistrosInput
    modem: ModemCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    loteId: number
    modemId: number
    createdAt?: Date | string
  }

  export type RegistroUpdateInput = {
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRegistrosNestedInput
    lote?: LoteUpdateOneRequiredWithoutRegistrosNestedInput
    modem?: ModemUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCreateManyInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    loteId: number
    modemId: number
    createdAt?: Date | string
  }

  export type RegistroUpdateManyMutationInput = {
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateInput = {
    accion: string
    entidad: string
    detalle?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    accion: string
    entidad: string
    detalle?: string | null
    userId: number
    createdAt?: Date | string
  }

  export type LogUpdateInput = {
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    accion: string
    entidad: string
    detalle?: string | null
    userId: number
    createdAt?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstadoCreateInput = {
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemCreateNestedManyWithoutEstadoActualInput
    transicionesDesde?: TransicionEstadoCreateNestedManyWithoutEstadoDesdeInput
    transicionesHacia?: TransicionEstadoCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemUncheckedCreateNestedManyWithoutEstadoActualInput
    transicionesDesde?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoDesdeInput
    transicionesHacia?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUpdateManyWithoutEstadoActualNestedInput
    transicionesDesde?: TransicionEstadoUpdateManyWithoutEstadoDesdeNestedInput
    transicionesHacia?: TransicionEstadoUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type EstadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUncheckedUpdateManyWithoutEstadoActualNestedInput
    transicionesDesde?: TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeNestedInput
    transicionesHacia?: TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type EstadoCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EstadoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoCreateInput = {
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    estadoDesde: EstadoCreateNestedOneWithoutTransicionesDesdeInput
    estadoHacia: EstadoCreateNestedOneWithoutTransicionesHaciaInput
  }

  export type TransicionEstadoUncheckedCreateInput = {
    id?: number
    estadoDesdeId: number
    estadoHaciaId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransicionEstadoUpdateInput = {
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    estadoDesde?: EstadoUpdateOneRequiredWithoutTransicionesDesdeNestedInput
    estadoHacia?: EstadoUpdateOneRequiredWithoutTransicionesHaciaNestedInput
  }

  export type TransicionEstadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoDesdeId?: IntFieldUpdateOperationsInput | number
    estadoHaciaId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoCreateManyInput = {
    id?: number
    estadoDesdeId: number
    estadoHaciaId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransicionEstadoUpdateManyMutationInput = {
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoDesdeId?: IntFieldUpdateOperationsInput | number
    estadoHaciaId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RegistroListRelationFilter = {
    every?: RegistroWhereInput
    some?: RegistroWhereInput
    none?: RegistroWhereInput
  }

  export type LoteListRelationFilter = {
    every?: LoteWhereInput
    some?: LoteWhereInput
    none?: LoteWhereInput
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type ModemListRelationFilter = {
    every?: ModemWhereInput
    some?: ModemWhereInput
    none?: ModemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RegistroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type VistaPorSKUListRelationFilter = {
    every?: VistaPorSKUWhereInput
    some?: VistaPorSKUWhereInput
    none?: VistaPorSKUWhereInput
  }

  export type VistaPorSKUOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CatalogoSKUCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    skuItem?: SortOrder
    descripcion?: SortOrder
  }

  export type CatalogoSKUAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CatalogoSKUMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    skuItem?: SortOrder
    descripcion?: SortOrder
  }

  export type CatalogoSKUMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    skuItem?: SortOrder
    descripcion?: SortOrder
  }

  export type CatalogoSKUSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CatalogoSKUScalarRelationFilter = {
    is?: CatalogoSKUWhereInput
    isNot?: CatalogoSKUWhereInput
  }

  export type VistaPorSKUSkuIdRolCompoundUniqueInput = {
    skuId: number
    rol: $Enums.Rol
  }

  export type VistaPorSKUCountOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    rol?: SortOrder
    vista?: SortOrder
  }

  export type VistaPorSKUAvgOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
  }

  export type VistaPorSKUMaxOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    rol?: SortOrder
    vista?: SortOrder
  }

  export type VistaPorSKUMinOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    rol?: SortOrder
    vista?: SortOrder
  }

  export type VistaPorSKUSumOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
  }

  export type EnumTipoLoteFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoLote | EnumTipoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoLoteFilter<$PrismaModel> | $Enums.TipoLote
  }

  export type EnumMotivoScrapNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MotivoScrap | EnumMotivoScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMotivoScrapNullableFilter<$PrismaModel> | $Enums.MotivoScrap | null
  }

  export type EnumEstadoLoteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoLote | EnumEstadoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoLoteFilter<$PrismaModel> | $Enums.EstadoLote
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LoteCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    skuId?: SortOrder
    tipoLote?: SortOrder
    esScrap?: SortOrder
    motivoScrap?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoteAvgOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
  }

  export type LoteMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    skuId?: SortOrder
    tipoLote?: SortOrder
    esScrap?: SortOrder
    motivoScrap?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoteMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    skuId?: SortOrder
    tipoLote?: SortOrder
    esScrap?: SortOrder
    motivoScrap?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LoteSumOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    prioridad?: SortOrder
    responsableId?: SortOrder
  }

  export type EnumTipoLoteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoLote | EnumTipoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoLoteWithAggregatesFilter<$PrismaModel> | $Enums.TipoLote
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoLoteFilter<$PrismaModel>
    _max?: NestedEnumTipoLoteFilter<$PrismaModel>
  }

  export type EnumMotivoScrapNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MotivoScrap | EnumMotivoScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMotivoScrapNullableWithAggregatesFilter<$PrismaModel> | $Enums.MotivoScrap | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMotivoScrapNullableFilter<$PrismaModel>
    _max?: NestedEnumMotivoScrapNullableFilter<$PrismaModel>
  }

  export type EnumEstadoLoteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoLote | EnumEstadoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoLoteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoLote
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoLoteFilter<$PrismaModel>
    _max?: NestedEnumEstadoLoteFilter<$PrismaModel>
  }

  export type EnumFaseProcesoFilter<$PrismaModel = never> = {
    equals?: $Enums.FaseProceso | EnumFaseProcesoFieldRefInput<$PrismaModel>
    in?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    not?: NestedEnumFaseProcesoFilter<$PrismaModel> | $Enums.FaseProceso
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumDetalleScrapNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DetalleScrap | EnumDetalleScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDetalleScrapNullableFilter<$PrismaModel> | $Enums.DetalleScrap | null
  }

  export type EstadoScalarRelationFilter = {
    is?: EstadoWhereInput
    isNot?: EstadoWhereInput
  }

  export type LoteScalarRelationFilter = {
    is?: LoteWhereInput
    isNot?: LoteWhereInput
  }

  export type LoteNullableScalarRelationFilter = {
    is?: LoteWhereInput | null
    isNot?: LoteWhereInput | null
  }

  export type ModemCountOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    faseActual?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrder
    responsableId?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ModemAvgOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrder
    responsableId?: SortOrder
  }

  export type ModemMaxOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    faseActual?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrder
    responsableId?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ModemMinOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    faseActual?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrder
    responsableId?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ModemSumOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    estadoActualId?: SortOrder
    loteId?: SortOrder
    loteSalidaId?: SortOrder
    responsableId?: SortOrder
  }

  export type EnumFaseProcesoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FaseProceso | EnumFaseProcesoFieldRefInput<$PrismaModel>
    in?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    not?: NestedEnumFaseProcesoWithAggregatesFilter<$PrismaModel> | $Enums.FaseProceso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFaseProcesoFilter<$PrismaModel>
    _max?: NestedEnumFaseProcesoFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumDetalleScrapNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DetalleScrap | EnumDetalleScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDetalleScrapNullableWithAggregatesFilter<$PrismaModel> | $Enums.DetalleScrap | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDetalleScrapNullableFilter<$PrismaModel>
    _max?: NestedEnumDetalleScrapNullableFilter<$PrismaModel>
  }

  export type EnumEstadoRegistroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRegistro | EnumEstadoRegistroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRegistroFilter<$PrismaModel> | $Enums.EstadoRegistro
  }

  export type ModemScalarRelationFilter = {
    is?: ModemWhereInput
    isNot?: ModemWhereInput
  }

  export type RegistroCountOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    reparacion?: SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
  }

  export type RegistroMaxOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    reparacion?: SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroMinOrderByAggregateInput = {
    id?: SortOrder
    sn?: SortOrder
    fase?: SortOrder
    estado?: SortOrder
    motivoScrap?: SortOrder
    detalleScrap?: SortOrder
    reparacion?: SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loteId?: SortOrder
    modemId?: SortOrder
  }

  export type EnumEstadoRegistroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRegistro | EnumEstadoRegistroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRegistroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoRegistro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoRegistroFilter<$PrismaModel>
    _max?: NestedEnumEstadoRegistroFilter<$PrismaModel>
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    entidad?: SortOrder
    detalle?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    entidad?: SortOrder
    detalle?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    entidad?: SortOrder
    detalle?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TransicionEstadoListRelationFilter = {
    every?: TransicionEstadoWhereInput
    some?: TransicionEstadoWhereInput
    none?: TransicionEstadoWhereInput
  }

  export type TransicionEstadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstadoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigoInterno?: SortOrder
    esFinal?: SortOrder
    requiereObservacion?: SortOrder
    ordenDisplay?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstadoAvgOrderByAggregateInput = {
    id?: SortOrder
    ordenDisplay?: SortOrder
  }

  export type EstadoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigoInterno?: SortOrder
    esFinal?: SortOrder
    requiereObservacion?: SortOrder
    ordenDisplay?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstadoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    codigoInterno?: SortOrder
    esFinal?: SortOrder
    requiereObservacion?: SortOrder
    ordenDisplay?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstadoSumOrderByAggregateInput = {
    id?: SortOrder
    ordenDisplay?: SortOrder
  }

  export type TransicionEstadoEstadoDesdeIdNombreEventoCompoundUniqueInput = {
    estadoDesdeId: number
    nombreEvento: string
  }

  export type TransicionEstadoCountOrderByAggregateInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
    nombreEvento?: SortOrder
    descripcion?: SortOrder
    requiereCantidad?: SortOrder
    requiereObservacion?: SortOrder
    rolesPermitidos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransicionEstadoAvgOrderByAggregateInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
  }

  export type TransicionEstadoMaxOrderByAggregateInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
    nombreEvento?: SortOrder
    descripcion?: SortOrder
    requiereCantidad?: SortOrder
    requiereObservacion?: SortOrder
    rolesPermitidos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransicionEstadoMinOrderByAggregateInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
    nombreEvento?: SortOrder
    descripcion?: SortOrder
    requiereCantidad?: SortOrder
    requiereObservacion?: SortOrder
    rolesPermitidos?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransicionEstadoSumOrderByAggregateInput = {
    id?: SortOrder
    estadoDesdeId?: SortOrder
    estadoHaciaId?: SortOrder
  }

  export type RegistroCreateNestedManyWithoutUserInput = {
    create?: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput> | RegistroCreateWithoutUserInput[] | RegistroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutUserInput | RegistroCreateOrConnectWithoutUserInput[]
    createMany?: RegistroCreateManyUserInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type LoteCreateNestedManyWithoutResponsableInput = {
    create?: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput> | LoteCreateWithoutResponsableInput[] | LoteUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutResponsableInput | LoteCreateOrConnectWithoutResponsableInput[]
    createMany?: LoteCreateManyResponsableInputEnvelope
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type ModemCreateNestedManyWithoutResponsableInput = {
    create?: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput> | ModemCreateWithoutResponsableInput[] | ModemUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutResponsableInput | ModemCreateOrConnectWithoutResponsableInput[]
    createMany?: ModemCreateManyResponsableInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput> | RegistroCreateWithoutUserInput[] | RegistroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutUserInput | RegistroCreateOrConnectWithoutUserInput[]
    createMany?: RegistroCreateManyUserInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type LoteUncheckedCreateNestedManyWithoutResponsableInput = {
    create?: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput> | LoteCreateWithoutResponsableInput[] | LoteUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutResponsableInput | LoteCreateOrConnectWithoutResponsableInput[]
    createMany?: LoteCreateManyResponsableInputEnvelope
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type ModemUncheckedCreateNestedManyWithoutResponsableInput = {
    create?: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput> | ModemCreateWithoutResponsableInput[] | ModemUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutResponsableInput | ModemCreateOrConnectWithoutResponsableInput[]
    createMany?: ModemCreateManyResponsableInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRolFieldUpdateOperationsInput = {
    set?: $Enums.Rol
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RegistroUpdateManyWithoutUserNestedInput = {
    create?: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput> | RegistroCreateWithoutUserInput[] | RegistroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutUserInput | RegistroCreateOrConnectWithoutUserInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutUserInput | RegistroUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RegistroCreateManyUserInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutUserInput | RegistroUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutUserInput | RegistroUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type LoteUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput> | LoteCreateWithoutResponsableInput[] | LoteUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutResponsableInput | LoteCreateOrConnectWithoutResponsableInput[]
    upsert?: LoteUpsertWithWhereUniqueWithoutResponsableInput | LoteUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: LoteCreateManyResponsableInputEnvelope
    set?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    disconnect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    delete?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    update?: LoteUpdateWithWhereUniqueWithoutResponsableInput | LoteUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: LoteUpdateManyWithWhereWithoutResponsableInput | LoteUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: LoteScalarWhereInput | LoteScalarWhereInput[]
  }

  export type LogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type ModemUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput> | ModemCreateWithoutResponsableInput[] | ModemUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutResponsableInput | ModemCreateOrConnectWithoutResponsableInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutResponsableInput | ModemUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: ModemCreateManyResponsableInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutResponsableInput | ModemUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutResponsableInput | ModemUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistroUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput> | RegistroCreateWithoutUserInput[] | RegistroUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutUserInput | RegistroCreateOrConnectWithoutUserInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutUserInput | RegistroUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RegistroCreateManyUserInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutUserInput | RegistroUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutUserInput | RegistroUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type LoteUncheckedUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput> | LoteCreateWithoutResponsableInput[] | LoteUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutResponsableInput | LoteCreateOrConnectWithoutResponsableInput[]
    upsert?: LoteUpsertWithWhereUniqueWithoutResponsableInput | LoteUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: LoteCreateManyResponsableInputEnvelope
    set?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    disconnect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    delete?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    update?: LoteUpdateWithWhereUniqueWithoutResponsableInput | LoteUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: LoteUpdateManyWithWhereWithoutResponsableInput | LoteUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: LoteScalarWhereInput | LoteScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type ModemUncheckedUpdateManyWithoutResponsableNestedInput = {
    create?: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput> | ModemCreateWithoutResponsableInput[] | ModemUncheckedCreateWithoutResponsableInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutResponsableInput | ModemCreateOrConnectWithoutResponsableInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutResponsableInput | ModemUpsertWithWhereUniqueWithoutResponsableInput[]
    createMany?: ModemCreateManyResponsableInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutResponsableInput | ModemUpdateWithWhereUniqueWithoutResponsableInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutResponsableInput | ModemUpdateManyWithWhereWithoutResponsableInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type LoteCreateNestedManyWithoutSkuInput = {
    create?: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput> | LoteCreateWithoutSkuInput[] | LoteUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutSkuInput | LoteCreateOrConnectWithoutSkuInput[]
    createMany?: LoteCreateManySkuInputEnvelope
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
  }

  export type ModemCreateNestedManyWithoutSkuInput = {
    create?: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput> | ModemCreateWithoutSkuInput[] | ModemUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutSkuInput | ModemCreateOrConnectWithoutSkuInput[]
    createMany?: ModemCreateManySkuInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type VistaPorSKUCreateNestedManyWithoutSkuInput = {
    create?: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput> | VistaPorSKUCreateWithoutSkuInput[] | VistaPorSKUUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: VistaPorSKUCreateOrConnectWithoutSkuInput | VistaPorSKUCreateOrConnectWithoutSkuInput[]
    createMany?: VistaPorSKUCreateManySkuInputEnvelope
    connect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
  }

  export type LoteUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput> | LoteCreateWithoutSkuInput[] | LoteUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutSkuInput | LoteCreateOrConnectWithoutSkuInput[]
    createMany?: LoteCreateManySkuInputEnvelope
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
  }

  export type ModemUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput> | ModemCreateWithoutSkuInput[] | ModemUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutSkuInput | ModemCreateOrConnectWithoutSkuInput[]
    createMany?: ModemCreateManySkuInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type VistaPorSKUUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput> | VistaPorSKUCreateWithoutSkuInput[] | VistaPorSKUUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: VistaPorSKUCreateOrConnectWithoutSkuInput | VistaPorSKUCreateOrConnectWithoutSkuInput[]
    createMany?: VistaPorSKUCreateManySkuInputEnvelope
    connect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type LoteUpdateManyWithoutSkuNestedInput = {
    create?: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput> | LoteCreateWithoutSkuInput[] | LoteUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutSkuInput | LoteCreateOrConnectWithoutSkuInput[]
    upsert?: LoteUpsertWithWhereUniqueWithoutSkuInput | LoteUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: LoteCreateManySkuInputEnvelope
    set?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    disconnect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    delete?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    update?: LoteUpdateWithWhereUniqueWithoutSkuInput | LoteUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: LoteUpdateManyWithWhereWithoutSkuInput | LoteUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: LoteScalarWhereInput | LoteScalarWhereInput[]
  }

  export type ModemUpdateManyWithoutSkuNestedInput = {
    create?: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput> | ModemCreateWithoutSkuInput[] | ModemUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutSkuInput | ModemCreateOrConnectWithoutSkuInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutSkuInput | ModemUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: ModemCreateManySkuInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutSkuInput | ModemUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutSkuInput | ModemUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type VistaPorSKUUpdateManyWithoutSkuNestedInput = {
    create?: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput> | VistaPorSKUCreateWithoutSkuInput[] | VistaPorSKUUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: VistaPorSKUCreateOrConnectWithoutSkuInput | VistaPorSKUCreateOrConnectWithoutSkuInput[]
    upsert?: VistaPorSKUUpsertWithWhereUniqueWithoutSkuInput | VistaPorSKUUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: VistaPorSKUCreateManySkuInputEnvelope
    set?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    disconnect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    delete?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    connect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    update?: VistaPorSKUUpdateWithWhereUniqueWithoutSkuInput | VistaPorSKUUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: VistaPorSKUUpdateManyWithWhereWithoutSkuInput | VistaPorSKUUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: VistaPorSKUScalarWhereInput | VistaPorSKUScalarWhereInput[]
  }

  export type LoteUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput> | LoteCreateWithoutSkuInput[] | LoteUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: LoteCreateOrConnectWithoutSkuInput | LoteCreateOrConnectWithoutSkuInput[]
    upsert?: LoteUpsertWithWhereUniqueWithoutSkuInput | LoteUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: LoteCreateManySkuInputEnvelope
    set?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    disconnect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    delete?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    connect?: LoteWhereUniqueInput | LoteWhereUniqueInput[]
    update?: LoteUpdateWithWhereUniqueWithoutSkuInput | LoteUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: LoteUpdateManyWithWhereWithoutSkuInput | LoteUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: LoteScalarWhereInput | LoteScalarWhereInput[]
  }

  export type ModemUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput> | ModemCreateWithoutSkuInput[] | ModemUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutSkuInput | ModemCreateOrConnectWithoutSkuInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutSkuInput | ModemUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: ModemCreateManySkuInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutSkuInput | ModemUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutSkuInput | ModemUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type VistaPorSKUUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput> | VistaPorSKUCreateWithoutSkuInput[] | VistaPorSKUUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: VistaPorSKUCreateOrConnectWithoutSkuInput | VistaPorSKUCreateOrConnectWithoutSkuInput[]
    upsert?: VistaPorSKUUpsertWithWhereUniqueWithoutSkuInput | VistaPorSKUUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: VistaPorSKUCreateManySkuInputEnvelope
    set?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    disconnect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    delete?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    connect?: VistaPorSKUWhereUniqueInput | VistaPorSKUWhereUniqueInput[]
    update?: VistaPorSKUUpdateWithWhereUniqueWithoutSkuInput | VistaPorSKUUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: VistaPorSKUUpdateManyWithWhereWithoutSkuInput | VistaPorSKUUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: VistaPorSKUScalarWhereInput | VistaPorSKUScalarWhereInput[]
  }

  export type CatalogoSKUCreateNestedOneWithoutVistasInput = {
    create?: XOR<CatalogoSKUCreateWithoutVistasInput, CatalogoSKUUncheckedCreateWithoutVistasInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutVistasInput
    connect?: CatalogoSKUWhereUniqueInput
  }

  export type CatalogoSKUUpdateOneRequiredWithoutVistasNestedInput = {
    create?: XOR<CatalogoSKUCreateWithoutVistasInput, CatalogoSKUUncheckedCreateWithoutVistasInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutVistasInput
    upsert?: CatalogoSKUUpsertWithoutVistasInput
    connect?: CatalogoSKUWhereUniqueInput
    update?: XOR<XOR<CatalogoSKUUpdateToOneWithWhereWithoutVistasInput, CatalogoSKUUpdateWithoutVistasInput>, CatalogoSKUUncheckedUpdateWithoutVistasInput>
  }

  export type CatalogoSKUCreateNestedOneWithoutLotesInput = {
    create?: XOR<CatalogoSKUCreateWithoutLotesInput, CatalogoSKUUncheckedCreateWithoutLotesInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutLotesInput
    connect?: CatalogoSKUWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLotesInput = {
    create?: XOR<UserCreateWithoutLotesInput, UserUncheckedCreateWithoutLotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLotesInput
    connect?: UserWhereUniqueInput
  }

  export type RegistroCreateNestedManyWithoutLoteInput = {
    create?: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput> | RegistroCreateWithoutLoteInput[] | RegistroUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutLoteInput | RegistroCreateOrConnectWithoutLoteInput[]
    createMany?: RegistroCreateManyLoteInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type ModemCreateNestedManyWithoutLoteInput = {
    create?: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput> | ModemCreateWithoutLoteInput[] | ModemUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteInput | ModemCreateOrConnectWithoutLoteInput[]
    createMany?: ModemCreateManyLoteInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type ModemCreateNestedManyWithoutLoteSalidaInput = {
    create?: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput> | ModemCreateWithoutLoteSalidaInput[] | ModemUncheckedCreateWithoutLoteSalidaInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteSalidaInput | ModemCreateOrConnectWithoutLoteSalidaInput[]
    createMany?: ModemCreateManyLoteSalidaInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutLoteInput = {
    create?: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput> | RegistroCreateWithoutLoteInput[] | RegistroUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutLoteInput | RegistroCreateOrConnectWithoutLoteInput[]
    createMany?: RegistroCreateManyLoteInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type ModemUncheckedCreateNestedManyWithoutLoteInput = {
    create?: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput> | ModemCreateWithoutLoteInput[] | ModemUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteInput | ModemCreateOrConnectWithoutLoteInput[]
    createMany?: ModemCreateManyLoteInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type ModemUncheckedCreateNestedManyWithoutLoteSalidaInput = {
    create?: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput> | ModemCreateWithoutLoteSalidaInput[] | ModemUncheckedCreateWithoutLoteSalidaInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteSalidaInput | ModemCreateOrConnectWithoutLoteSalidaInput[]
    createMany?: ModemCreateManyLoteSalidaInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type EnumTipoLoteFieldUpdateOperationsInput = {
    set?: $Enums.TipoLote
  }

  export type NullableEnumMotivoScrapFieldUpdateOperationsInput = {
    set?: $Enums.MotivoScrap | null
  }

  export type EnumEstadoLoteFieldUpdateOperationsInput = {
    set?: $Enums.EstadoLote
  }

  export type CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput = {
    create?: XOR<CatalogoSKUCreateWithoutLotesInput, CatalogoSKUUncheckedCreateWithoutLotesInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutLotesInput
    upsert?: CatalogoSKUUpsertWithoutLotesInput
    connect?: CatalogoSKUWhereUniqueInput
    update?: XOR<XOR<CatalogoSKUUpdateToOneWithWhereWithoutLotesInput, CatalogoSKUUpdateWithoutLotesInput>, CatalogoSKUUncheckedUpdateWithoutLotesInput>
  }

  export type UserUpdateOneRequiredWithoutLotesNestedInput = {
    create?: XOR<UserCreateWithoutLotesInput, UserUncheckedCreateWithoutLotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLotesInput
    upsert?: UserUpsertWithoutLotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLotesInput, UserUpdateWithoutLotesInput>, UserUncheckedUpdateWithoutLotesInput>
  }

  export type RegistroUpdateManyWithoutLoteNestedInput = {
    create?: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput> | RegistroCreateWithoutLoteInput[] | RegistroUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutLoteInput | RegistroCreateOrConnectWithoutLoteInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutLoteInput | RegistroUpsertWithWhereUniqueWithoutLoteInput[]
    createMany?: RegistroCreateManyLoteInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutLoteInput | RegistroUpdateWithWhereUniqueWithoutLoteInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutLoteInput | RegistroUpdateManyWithWhereWithoutLoteInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type ModemUpdateManyWithoutLoteNestedInput = {
    create?: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput> | ModemCreateWithoutLoteInput[] | ModemUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteInput | ModemCreateOrConnectWithoutLoteInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutLoteInput | ModemUpsertWithWhereUniqueWithoutLoteInput[]
    createMany?: ModemCreateManyLoteInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutLoteInput | ModemUpdateWithWhereUniqueWithoutLoteInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutLoteInput | ModemUpdateManyWithWhereWithoutLoteInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type ModemUpdateManyWithoutLoteSalidaNestedInput = {
    create?: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput> | ModemCreateWithoutLoteSalidaInput[] | ModemUncheckedCreateWithoutLoteSalidaInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteSalidaInput | ModemCreateOrConnectWithoutLoteSalidaInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutLoteSalidaInput | ModemUpsertWithWhereUniqueWithoutLoteSalidaInput[]
    createMany?: ModemCreateManyLoteSalidaInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutLoteSalidaInput | ModemUpdateWithWhereUniqueWithoutLoteSalidaInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutLoteSalidaInput | ModemUpdateManyWithWhereWithoutLoteSalidaInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type RegistroUncheckedUpdateManyWithoutLoteNestedInput = {
    create?: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput> | RegistroCreateWithoutLoteInput[] | RegistroUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutLoteInput | RegistroCreateOrConnectWithoutLoteInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutLoteInput | RegistroUpsertWithWhereUniqueWithoutLoteInput[]
    createMany?: RegistroCreateManyLoteInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutLoteInput | RegistroUpdateWithWhereUniqueWithoutLoteInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutLoteInput | RegistroUpdateManyWithWhereWithoutLoteInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type ModemUncheckedUpdateManyWithoutLoteNestedInput = {
    create?: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput> | ModemCreateWithoutLoteInput[] | ModemUncheckedCreateWithoutLoteInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteInput | ModemCreateOrConnectWithoutLoteInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutLoteInput | ModemUpsertWithWhereUniqueWithoutLoteInput[]
    createMany?: ModemCreateManyLoteInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutLoteInput | ModemUpdateWithWhereUniqueWithoutLoteInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutLoteInput | ModemUpdateManyWithWhereWithoutLoteInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput = {
    create?: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput> | ModemCreateWithoutLoteSalidaInput[] | ModemUncheckedCreateWithoutLoteSalidaInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutLoteSalidaInput | ModemCreateOrConnectWithoutLoteSalidaInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutLoteSalidaInput | ModemUpsertWithWhereUniqueWithoutLoteSalidaInput[]
    createMany?: ModemCreateManyLoteSalidaInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutLoteSalidaInput | ModemUpdateWithWhereUniqueWithoutLoteSalidaInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutLoteSalidaInput | ModemUpdateManyWithWhereWithoutLoteSalidaInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type CatalogoSKUCreateNestedOneWithoutModemsInput = {
    create?: XOR<CatalogoSKUCreateWithoutModemsInput, CatalogoSKUUncheckedCreateWithoutModemsInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutModemsInput
    connect?: CatalogoSKUWhereUniqueInput
  }

  export type EstadoCreateNestedOneWithoutModemsInput = {
    create?: XOR<EstadoCreateWithoutModemsInput, EstadoUncheckedCreateWithoutModemsInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutModemsInput
    connect?: EstadoWhereUniqueInput
  }

  export type LoteCreateNestedOneWithoutModemsInput = {
    create?: XOR<LoteCreateWithoutModemsInput, LoteUncheckedCreateWithoutModemsInput>
    connectOrCreate?: LoteCreateOrConnectWithoutModemsInput
    connect?: LoteWhereUniqueInput
  }

  export type LoteCreateNestedOneWithoutModemsSalidaInput = {
    create?: XOR<LoteCreateWithoutModemsSalidaInput, LoteUncheckedCreateWithoutModemsSalidaInput>
    connectOrCreate?: LoteCreateOrConnectWithoutModemsSalidaInput
    connect?: LoteWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutModemsInput = {
    create?: XOR<UserCreateWithoutModemsInput, UserUncheckedCreateWithoutModemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModemsInput
    connect?: UserWhereUniqueInput
  }

  export type RegistroCreateNestedManyWithoutModemInput = {
    create?: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput> | RegistroCreateWithoutModemInput[] | RegistroUncheckedCreateWithoutModemInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutModemInput | RegistroCreateOrConnectWithoutModemInput[]
    createMany?: RegistroCreateManyModemInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type RegistroUncheckedCreateNestedManyWithoutModemInput = {
    create?: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput> | RegistroCreateWithoutModemInput[] | RegistroUncheckedCreateWithoutModemInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutModemInput | RegistroCreateOrConnectWithoutModemInput[]
    createMany?: RegistroCreateManyModemInputEnvelope
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
  }

  export type EnumFaseProcesoFieldUpdateOperationsInput = {
    set?: $Enums.FaseProceso
  }

  export type NullableEnumDetalleScrapFieldUpdateOperationsInput = {
    set?: $Enums.DetalleScrap | null
  }

  export type CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput = {
    create?: XOR<CatalogoSKUCreateWithoutModemsInput, CatalogoSKUUncheckedCreateWithoutModemsInput>
    connectOrCreate?: CatalogoSKUCreateOrConnectWithoutModemsInput
    upsert?: CatalogoSKUUpsertWithoutModemsInput
    connect?: CatalogoSKUWhereUniqueInput
    update?: XOR<XOR<CatalogoSKUUpdateToOneWithWhereWithoutModemsInput, CatalogoSKUUpdateWithoutModemsInput>, CatalogoSKUUncheckedUpdateWithoutModemsInput>
  }

  export type EstadoUpdateOneRequiredWithoutModemsNestedInput = {
    create?: XOR<EstadoCreateWithoutModemsInput, EstadoUncheckedCreateWithoutModemsInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutModemsInput
    upsert?: EstadoUpsertWithoutModemsInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutModemsInput, EstadoUpdateWithoutModemsInput>, EstadoUncheckedUpdateWithoutModemsInput>
  }

  export type LoteUpdateOneRequiredWithoutModemsNestedInput = {
    create?: XOR<LoteCreateWithoutModemsInput, LoteUncheckedCreateWithoutModemsInput>
    connectOrCreate?: LoteCreateOrConnectWithoutModemsInput
    upsert?: LoteUpsertWithoutModemsInput
    connect?: LoteWhereUniqueInput
    update?: XOR<XOR<LoteUpdateToOneWithWhereWithoutModemsInput, LoteUpdateWithoutModemsInput>, LoteUncheckedUpdateWithoutModemsInput>
  }

  export type LoteUpdateOneWithoutModemsSalidaNestedInput = {
    create?: XOR<LoteCreateWithoutModemsSalidaInput, LoteUncheckedCreateWithoutModemsSalidaInput>
    connectOrCreate?: LoteCreateOrConnectWithoutModemsSalidaInput
    upsert?: LoteUpsertWithoutModemsSalidaInput
    disconnect?: LoteWhereInput | boolean
    delete?: LoteWhereInput | boolean
    connect?: LoteWhereUniqueInput
    update?: XOR<XOR<LoteUpdateToOneWithWhereWithoutModemsSalidaInput, LoteUpdateWithoutModemsSalidaInput>, LoteUncheckedUpdateWithoutModemsSalidaInput>
  }

  export type UserUpdateOneRequiredWithoutModemsNestedInput = {
    create?: XOR<UserCreateWithoutModemsInput, UserUncheckedCreateWithoutModemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutModemsInput
    upsert?: UserUpsertWithoutModemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutModemsInput, UserUpdateWithoutModemsInput>, UserUncheckedUpdateWithoutModemsInput>
  }

  export type RegistroUpdateManyWithoutModemNestedInput = {
    create?: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput> | RegistroCreateWithoutModemInput[] | RegistroUncheckedCreateWithoutModemInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutModemInput | RegistroCreateOrConnectWithoutModemInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutModemInput | RegistroUpsertWithWhereUniqueWithoutModemInput[]
    createMany?: RegistroCreateManyModemInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutModemInput | RegistroUpdateWithWhereUniqueWithoutModemInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutModemInput | RegistroUpdateManyWithWhereWithoutModemInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistroUncheckedUpdateManyWithoutModemNestedInput = {
    create?: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput> | RegistroCreateWithoutModemInput[] | RegistroUncheckedCreateWithoutModemInput[]
    connectOrCreate?: RegistroCreateOrConnectWithoutModemInput | RegistroCreateOrConnectWithoutModemInput[]
    upsert?: RegistroUpsertWithWhereUniqueWithoutModemInput | RegistroUpsertWithWhereUniqueWithoutModemInput[]
    createMany?: RegistroCreateManyModemInputEnvelope
    set?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    disconnect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    delete?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    connect?: RegistroWhereUniqueInput | RegistroWhereUniqueInput[]
    update?: RegistroUpdateWithWhereUniqueWithoutModemInput | RegistroUpdateWithWhereUniqueWithoutModemInput[]
    updateMany?: RegistroUpdateManyWithWhereWithoutModemInput | RegistroUpdateManyWithWhereWithoutModemInput[]
    deleteMany?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<UserCreateWithoutRegistrosInput, UserUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegistrosInput
    connect?: UserWhereUniqueInput
  }

  export type LoteCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<LoteCreateWithoutRegistrosInput, LoteUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: LoteCreateOrConnectWithoutRegistrosInput
    connect?: LoteWhereUniqueInput
  }

  export type ModemCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<ModemCreateWithoutRegistrosInput, ModemUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: ModemCreateOrConnectWithoutRegistrosInput
    connect?: ModemWhereUniqueInput
  }

  export type EnumEstadoRegistroFieldUpdateOperationsInput = {
    set?: $Enums.EstadoRegistro
  }

  export type UserUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<UserCreateWithoutRegistrosInput, UserUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegistrosInput
    upsert?: UserUpsertWithoutRegistrosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegistrosInput, UserUpdateWithoutRegistrosInput>, UserUncheckedUpdateWithoutRegistrosInput>
  }

  export type LoteUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<LoteCreateWithoutRegistrosInput, LoteUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: LoteCreateOrConnectWithoutRegistrosInput
    upsert?: LoteUpsertWithoutRegistrosInput
    connect?: LoteWhereUniqueInput
    update?: XOR<XOR<LoteUpdateToOneWithWhereWithoutRegistrosInput, LoteUpdateWithoutRegistrosInput>, LoteUncheckedUpdateWithoutRegistrosInput>
  }

  export type ModemUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<ModemCreateWithoutRegistrosInput, ModemUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: ModemCreateOrConnectWithoutRegistrosInput
    upsert?: ModemUpsertWithoutRegistrosInput
    connect?: ModemWhereUniqueInput
    update?: XOR<XOR<ModemUpdateToOneWithWhereWithoutRegistrosInput, ModemUpdateWithoutRegistrosInput>, ModemUncheckedUpdateWithoutRegistrosInput>
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogsInput, UserUpdateWithoutLogsInput>, UserUncheckedUpdateWithoutLogsInput>
  }

  export type ModemCreateNestedManyWithoutEstadoActualInput = {
    create?: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput> | ModemCreateWithoutEstadoActualInput[] | ModemUncheckedCreateWithoutEstadoActualInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutEstadoActualInput | ModemCreateOrConnectWithoutEstadoActualInput[]
    createMany?: ModemCreateManyEstadoActualInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type TransicionEstadoCreateNestedManyWithoutEstadoDesdeInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput> | TransicionEstadoCreateWithoutEstadoDesdeInput[] | TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput | TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput[]
    createMany?: TransicionEstadoCreateManyEstadoDesdeInputEnvelope
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
  }

  export type TransicionEstadoCreateNestedManyWithoutEstadoHaciaInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput> | TransicionEstadoCreateWithoutEstadoHaciaInput[] | TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput | TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput[]
    createMany?: TransicionEstadoCreateManyEstadoHaciaInputEnvelope
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
  }

  export type ModemUncheckedCreateNestedManyWithoutEstadoActualInput = {
    create?: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput> | ModemCreateWithoutEstadoActualInput[] | ModemUncheckedCreateWithoutEstadoActualInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutEstadoActualInput | ModemCreateOrConnectWithoutEstadoActualInput[]
    createMany?: ModemCreateManyEstadoActualInputEnvelope
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
  }

  export type TransicionEstadoUncheckedCreateNestedManyWithoutEstadoDesdeInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput> | TransicionEstadoCreateWithoutEstadoDesdeInput[] | TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput | TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput[]
    createMany?: TransicionEstadoCreateManyEstadoDesdeInputEnvelope
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
  }

  export type TransicionEstadoUncheckedCreateNestedManyWithoutEstadoHaciaInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput> | TransicionEstadoCreateWithoutEstadoHaciaInput[] | TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput | TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput[]
    createMany?: TransicionEstadoCreateManyEstadoHaciaInputEnvelope
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
  }

  export type ModemUpdateManyWithoutEstadoActualNestedInput = {
    create?: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput> | ModemCreateWithoutEstadoActualInput[] | ModemUncheckedCreateWithoutEstadoActualInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutEstadoActualInput | ModemCreateOrConnectWithoutEstadoActualInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutEstadoActualInput | ModemUpsertWithWhereUniqueWithoutEstadoActualInput[]
    createMany?: ModemCreateManyEstadoActualInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutEstadoActualInput | ModemUpdateWithWhereUniqueWithoutEstadoActualInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutEstadoActualInput | ModemUpdateManyWithWhereWithoutEstadoActualInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type TransicionEstadoUpdateManyWithoutEstadoDesdeNestedInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput> | TransicionEstadoCreateWithoutEstadoDesdeInput[] | TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput | TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput[]
    upsert?: TransicionEstadoUpsertWithWhereUniqueWithoutEstadoDesdeInput | TransicionEstadoUpsertWithWhereUniqueWithoutEstadoDesdeInput[]
    createMany?: TransicionEstadoCreateManyEstadoDesdeInputEnvelope
    set?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    disconnect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    delete?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    update?: TransicionEstadoUpdateWithWhereUniqueWithoutEstadoDesdeInput | TransicionEstadoUpdateWithWhereUniqueWithoutEstadoDesdeInput[]
    updateMany?: TransicionEstadoUpdateManyWithWhereWithoutEstadoDesdeInput | TransicionEstadoUpdateManyWithWhereWithoutEstadoDesdeInput[]
    deleteMany?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
  }

  export type TransicionEstadoUpdateManyWithoutEstadoHaciaNestedInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput> | TransicionEstadoCreateWithoutEstadoHaciaInput[] | TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput | TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput[]
    upsert?: TransicionEstadoUpsertWithWhereUniqueWithoutEstadoHaciaInput | TransicionEstadoUpsertWithWhereUniqueWithoutEstadoHaciaInput[]
    createMany?: TransicionEstadoCreateManyEstadoHaciaInputEnvelope
    set?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    disconnect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    delete?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    update?: TransicionEstadoUpdateWithWhereUniqueWithoutEstadoHaciaInput | TransicionEstadoUpdateWithWhereUniqueWithoutEstadoHaciaInput[]
    updateMany?: TransicionEstadoUpdateManyWithWhereWithoutEstadoHaciaInput | TransicionEstadoUpdateManyWithWhereWithoutEstadoHaciaInput[]
    deleteMany?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
  }

  export type ModemUncheckedUpdateManyWithoutEstadoActualNestedInput = {
    create?: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput> | ModemCreateWithoutEstadoActualInput[] | ModemUncheckedCreateWithoutEstadoActualInput[]
    connectOrCreate?: ModemCreateOrConnectWithoutEstadoActualInput | ModemCreateOrConnectWithoutEstadoActualInput[]
    upsert?: ModemUpsertWithWhereUniqueWithoutEstadoActualInput | ModemUpsertWithWhereUniqueWithoutEstadoActualInput[]
    createMany?: ModemCreateManyEstadoActualInputEnvelope
    set?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    disconnect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    delete?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    connect?: ModemWhereUniqueInput | ModemWhereUniqueInput[]
    update?: ModemUpdateWithWhereUniqueWithoutEstadoActualInput | ModemUpdateWithWhereUniqueWithoutEstadoActualInput[]
    updateMany?: ModemUpdateManyWithWhereWithoutEstadoActualInput | ModemUpdateManyWithWhereWithoutEstadoActualInput[]
    deleteMany?: ModemScalarWhereInput | ModemScalarWhereInput[]
  }

  export type TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeNestedInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput> | TransicionEstadoCreateWithoutEstadoDesdeInput[] | TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput | TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput[]
    upsert?: TransicionEstadoUpsertWithWhereUniqueWithoutEstadoDesdeInput | TransicionEstadoUpsertWithWhereUniqueWithoutEstadoDesdeInput[]
    createMany?: TransicionEstadoCreateManyEstadoDesdeInputEnvelope
    set?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    disconnect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    delete?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    update?: TransicionEstadoUpdateWithWhereUniqueWithoutEstadoDesdeInput | TransicionEstadoUpdateWithWhereUniqueWithoutEstadoDesdeInput[]
    updateMany?: TransicionEstadoUpdateManyWithWhereWithoutEstadoDesdeInput | TransicionEstadoUpdateManyWithWhereWithoutEstadoDesdeInput[]
    deleteMany?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
  }

  export type TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaNestedInput = {
    create?: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput> | TransicionEstadoCreateWithoutEstadoHaciaInput[] | TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput[]
    connectOrCreate?: TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput | TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput[]
    upsert?: TransicionEstadoUpsertWithWhereUniqueWithoutEstadoHaciaInput | TransicionEstadoUpsertWithWhereUniqueWithoutEstadoHaciaInput[]
    createMany?: TransicionEstadoCreateManyEstadoHaciaInputEnvelope
    set?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    disconnect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    delete?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    connect?: TransicionEstadoWhereUniqueInput | TransicionEstadoWhereUniqueInput[]
    update?: TransicionEstadoUpdateWithWhereUniqueWithoutEstadoHaciaInput | TransicionEstadoUpdateWithWhereUniqueWithoutEstadoHaciaInput[]
    updateMany?: TransicionEstadoUpdateManyWithWhereWithoutEstadoHaciaInput | TransicionEstadoUpdateManyWithWhereWithoutEstadoHaciaInput[]
    deleteMany?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
  }

  export type EstadoCreateNestedOneWithoutTransicionesDesdeInput = {
    create?: XOR<EstadoCreateWithoutTransicionesDesdeInput, EstadoUncheckedCreateWithoutTransicionesDesdeInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutTransicionesDesdeInput
    connect?: EstadoWhereUniqueInput
  }

  export type EstadoCreateNestedOneWithoutTransicionesHaciaInput = {
    create?: XOR<EstadoCreateWithoutTransicionesHaciaInput, EstadoUncheckedCreateWithoutTransicionesHaciaInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutTransicionesHaciaInput
    connect?: EstadoWhereUniqueInput
  }

  export type EstadoUpdateOneRequiredWithoutTransicionesDesdeNestedInput = {
    create?: XOR<EstadoCreateWithoutTransicionesDesdeInput, EstadoUncheckedCreateWithoutTransicionesDesdeInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutTransicionesDesdeInput
    upsert?: EstadoUpsertWithoutTransicionesDesdeInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutTransicionesDesdeInput, EstadoUpdateWithoutTransicionesDesdeInput>, EstadoUncheckedUpdateWithoutTransicionesDesdeInput>
  }

  export type EstadoUpdateOneRequiredWithoutTransicionesHaciaNestedInput = {
    create?: XOR<EstadoCreateWithoutTransicionesHaciaInput, EstadoUncheckedCreateWithoutTransicionesHaciaInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutTransicionesHaciaInput
    upsert?: EstadoUpsertWithoutTransicionesHaciaInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutTransicionesHaciaInput, EstadoUpdateWithoutTransicionesHaciaInput>, EstadoUncheckedUpdateWithoutTransicionesHaciaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumTipoLoteFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoLote | EnumTipoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoLoteFilter<$PrismaModel> | $Enums.TipoLote
  }

  export type NestedEnumMotivoScrapNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MotivoScrap | EnumMotivoScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMotivoScrapNullableFilter<$PrismaModel> | $Enums.MotivoScrap | null
  }

  export type NestedEnumEstadoLoteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoLote | EnumEstadoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoLoteFilter<$PrismaModel> | $Enums.EstadoLote
  }

  export type NestedEnumTipoLoteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoLote | EnumTipoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoLote[] | ListEnumTipoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoLoteWithAggregatesFilter<$PrismaModel> | $Enums.TipoLote
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoLoteFilter<$PrismaModel>
    _max?: NestedEnumTipoLoteFilter<$PrismaModel>
  }

  export type NestedEnumMotivoScrapNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MotivoScrap | EnumMotivoScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MotivoScrap[] | ListEnumMotivoScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMotivoScrapNullableWithAggregatesFilter<$PrismaModel> | $Enums.MotivoScrap | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMotivoScrapNullableFilter<$PrismaModel>
    _max?: NestedEnumMotivoScrapNullableFilter<$PrismaModel>
  }

  export type NestedEnumEstadoLoteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoLote | EnumEstadoLoteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoLote[] | ListEnumEstadoLoteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoLoteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoLote
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoLoteFilter<$PrismaModel>
    _max?: NestedEnumEstadoLoteFilter<$PrismaModel>
  }

  export type NestedEnumFaseProcesoFilter<$PrismaModel = never> = {
    equals?: $Enums.FaseProceso | EnumFaseProcesoFieldRefInput<$PrismaModel>
    in?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    not?: NestedEnumFaseProcesoFilter<$PrismaModel> | $Enums.FaseProceso
  }

  export type NestedEnumDetalleScrapNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DetalleScrap | EnumDetalleScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDetalleScrapNullableFilter<$PrismaModel> | $Enums.DetalleScrap | null
  }

  export type NestedEnumFaseProcesoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FaseProceso | EnumFaseProcesoFieldRefInput<$PrismaModel>
    in?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.FaseProceso[] | ListEnumFaseProcesoFieldRefInput<$PrismaModel>
    not?: NestedEnumFaseProcesoWithAggregatesFilter<$PrismaModel> | $Enums.FaseProceso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFaseProcesoFilter<$PrismaModel>
    _max?: NestedEnumFaseProcesoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDetalleScrapNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DetalleScrap | EnumDetalleScrapFieldRefInput<$PrismaModel> | null
    in?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DetalleScrap[] | ListEnumDetalleScrapFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDetalleScrapNullableWithAggregatesFilter<$PrismaModel> | $Enums.DetalleScrap | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDetalleScrapNullableFilter<$PrismaModel>
    _max?: NestedEnumDetalleScrapNullableFilter<$PrismaModel>
  }

  export type NestedEnumEstadoRegistroFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRegistro | EnumEstadoRegistroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRegistroFilter<$PrismaModel> | $Enums.EstadoRegistro
  }

  export type NestedEnumEstadoRegistroWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRegistro | EnumEstadoRegistroFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRegistro[] | ListEnumEstadoRegistroFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRegistroWithAggregatesFilter<$PrismaModel> | $Enums.EstadoRegistro
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoRegistroFilter<$PrismaModel>
    _max?: NestedEnumEstadoRegistroFilter<$PrismaModel>
  }

  export type RegistroCreateWithoutUserInput = {
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    createdAt?: Date | string
    lote: LoteCreateNestedOneWithoutRegistrosInput
    modem: ModemCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutUserInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    loteId: number
    modemId: number
    createdAt?: Date | string
  }

  export type RegistroCreateOrConnectWithoutUserInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput>
  }

  export type RegistroCreateManyUserInputEnvelope = {
    data: RegistroCreateManyUserInput | RegistroCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LoteCreateWithoutResponsableInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutLotesInput
    registros?: RegistroCreateNestedManyWithoutLoteInput
    modems?: ModemCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUncheckedCreateWithoutResponsableInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutLoteInput
    modems?: ModemUncheckedCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemUncheckedCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteCreateOrConnectWithoutResponsableInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput>
  }

  export type LoteCreateManyResponsableInputEnvelope = {
    data: LoteCreateManyResponsableInput | LoteCreateManyResponsableInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutUserInput = {
    accion: string
    entidad: string
    detalle?: string | null
    createdAt?: Date | string
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: number
    accion: string
    entidad: string
    detalle?: string | null
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: LogCreateManyUserInput | LogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ModemCreateWithoutResponsableInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateWithoutResponsableInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemCreateOrConnectWithoutResponsableInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput>
  }

  export type ModemCreateManyResponsableInputEnvelope = {
    data: ModemCreateManyResponsableInput | ModemCreateManyResponsableInput[]
    skipDuplicates?: boolean
  }

  export type RegistroUpsertWithWhereUniqueWithoutUserInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutUserInput, RegistroUncheckedUpdateWithoutUserInput>
    create: XOR<RegistroCreateWithoutUserInput, RegistroUncheckedCreateWithoutUserInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutUserInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutUserInput, RegistroUncheckedUpdateWithoutUserInput>
  }

  export type RegistroUpdateManyWithWhereWithoutUserInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutUserInput>
  }

  export type RegistroScalarWhereInput = {
    AND?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    OR?: RegistroScalarWhereInput[]
    NOT?: RegistroScalarWhereInput | RegistroScalarWhereInput[]
    id?: IntFilter<"Registro"> | number
    sn?: StringFilter<"Registro"> | string
    fase?: EnumFaseProcesoFilter<"Registro"> | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFilter<"Registro"> | $Enums.EstadoRegistro
    motivoScrap?: EnumMotivoScrapNullableFilter<"Registro"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Registro"> | $Enums.DetalleScrap | null
    reparacion?: StringNullableFilter<"Registro"> | string | null
    userId?: IntFilter<"Registro"> | number
    loteId?: IntFilter<"Registro"> | number
    modemId?: IntFilter<"Registro"> | number
    createdAt?: DateTimeFilter<"Registro"> | Date | string
  }

  export type LoteUpsertWithWhereUniqueWithoutResponsableInput = {
    where: LoteWhereUniqueInput
    update: XOR<LoteUpdateWithoutResponsableInput, LoteUncheckedUpdateWithoutResponsableInput>
    create: XOR<LoteCreateWithoutResponsableInput, LoteUncheckedCreateWithoutResponsableInput>
  }

  export type LoteUpdateWithWhereUniqueWithoutResponsableInput = {
    where: LoteWhereUniqueInput
    data: XOR<LoteUpdateWithoutResponsableInput, LoteUncheckedUpdateWithoutResponsableInput>
  }

  export type LoteUpdateManyWithWhereWithoutResponsableInput = {
    where: LoteScalarWhereInput
    data: XOR<LoteUpdateManyMutationInput, LoteUncheckedUpdateManyWithoutResponsableInput>
  }

  export type LoteScalarWhereInput = {
    AND?: LoteScalarWhereInput | LoteScalarWhereInput[]
    OR?: LoteScalarWhereInput[]
    NOT?: LoteScalarWhereInput | LoteScalarWhereInput[]
    id?: IntFilter<"Lote"> | number
    numero?: StringFilter<"Lote"> | string
    skuId?: IntFilter<"Lote"> | number
    tipoLote?: EnumTipoLoteFilter<"Lote"> | $Enums.TipoLote
    esScrap?: BoolFilter<"Lote"> | boolean
    motivoScrap?: EnumMotivoScrapNullableFilter<"Lote"> | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFilter<"Lote"> | $Enums.EstadoLote
    prioridad?: IntFilter<"Lote"> | number
    responsableId?: IntFilter<"Lote"> | number
    createdAt?: DateTimeFilter<"Lote"> | Date | string
    updatedAt?: DateTimeFilter<"Lote"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Lote"> | Date | string | null
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutUserInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    accion?: StringFilter<"Log"> | string
    entidad?: StringFilter<"Log"> | string
    detalle?: StringNullableFilter<"Log"> | string | null
    userId?: IntFilter<"Log"> | number
    createdAt?: DateTimeFilter<"Log"> | Date | string
  }

  export type ModemUpsertWithWhereUniqueWithoutResponsableInput = {
    where: ModemWhereUniqueInput
    update: XOR<ModemUpdateWithoutResponsableInput, ModemUncheckedUpdateWithoutResponsableInput>
    create: XOR<ModemCreateWithoutResponsableInput, ModemUncheckedCreateWithoutResponsableInput>
  }

  export type ModemUpdateWithWhereUniqueWithoutResponsableInput = {
    where: ModemWhereUniqueInput
    data: XOR<ModemUpdateWithoutResponsableInput, ModemUncheckedUpdateWithoutResponsableInput>
  }

  export type ModemUpdateManyWithWhereWithoutResponsableInput = {
    where: ModemScalarWhereInput
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyWithoutResponsableInput>
  }

  export type ModemScalarWhereInput = {
    AND?: ModemScalarWhereInput | ModemScalarWhereInput[]
    OR?: ModemScalarWhereInput[]
    NOT?: ModemScalarWhereInput | ModemScalarWhereInput[]
    id?: IntFilter<"Modem"> | number
    sn?: StringFilter<"Modem"> | string
    skuId?: IntFilter<"Modem"> | number
    estadoActualId?: IntFilter<"Modem"> | number
    faseActual?: EnumFaseProcesoFilter<"Modem"> | $Enums.FaseProceso
    loteId?: IntFilter<"Modem"> | number
    loteSalidaId?: IntNullableFilter<"Modem"> | number | null
    responsableId?: IntFilter<"Modem"> | number
    motivoScrap?: EnumMotivoScrapNullableFilter<"Modem"> | $Enums.MotivoScrap | null
    detalleScrap?: EnumDetalleScrapNullableFilter<"Modem"> | $Enums.DetalleScrap | null
    createdAt?: DateTimeFilter<"Modem"> | Date | string
    updatedAt?: DateTimeFilter<"Modem"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Modem"> | Date | string | null
  }

  export type LoteCreateWithoutSkuInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    responsable: UserCreateNestedOneWithoutLotesInput
    registros?: RegistroCreateNestedManyWithoutLoteInput
    modems?: ModemCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUncheckedCreateWithoutSkuInput = {
    id?: number
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutLoteInput
    modems?: ModemUncheckedCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemUncheckedCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteCreateOrConnectWithoutSkuInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput>
  }

  export type LoteCreateManySkuInputEnvelope = {
    data: LoteCreateManySkuInput | LoteCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type ModemCreateWithoutSkuInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    responsable: UserCreateNestedOneWithoutModemsInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateWithoutSkuInput = {
    id?: number
    sn: string
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemCreateOrConnectWithoutSkuInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput>
  }

  export type ModemCreateManySkuInputEnvelope = {
    data: ModemCreateManySkuInput | ModemCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type VistaPorSKUCreateWithoutSkuInput = {
    rol: $Enums.Rol
    vista: string
  }

  export type VistaPorSKUUncheckedCreateWithoutSkuInput = {
    id?: number
    rol: $Enums.Rol
    vista: string
  }

  export type VistaPorSKUCreateOrConnectWithoutSkuInput = {
    where: VistaPorSKUWhereUniqueInput
    create: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput>
  }

  export type VistaPorSKUCreateManySkuInputEnvelope = {
    data: VistaPorSKUCreateManySkuInput | VistaPorSKUCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type LoteUpsertWithWhereUniqueWithoutSkuInput = {
    where: LoteWhereUniqueInput
    update: XOR<LoteUpdateWithoutSkuInput, LoteUncheckedUpdateWithoutSkuInput>
    create: XOR<LoteCreateWithoutSkuInput, LoteUncheckedCreateWithoutSkuInput>
  }

  export type LoteUpdateWithWhereUniqueWithoutSkuInput = {
    where: LoteWhereUniqueInput
    data: XOR<LoteUpdateWithoutSkuInput, LoteUncheckedUpdateWithoutSkuInput>
  }

  export type LoteUpdateManyWithWhereWithoutSkuInput = {
    where: LoteScalarWhereInput
    data: XOR<LoteUpdateManyMutationInput, LoteUncheckedUpdateManyWithoutSkuInput>
  }

  export type ModemUpsertWithWhereUniqueWithoutSkuInput = {
    where: ModemWhereUniqueInput
    update: XOR<ModemUpdateWithoutSkuInput, ModemUncheckedUpdateWithoutSkuInput>
    create: XOR<ModemCreateWithoutSkuInput, ModemUncheckedCreateWithoutSkuInput>
  }

  export type ModemUpdateWithWhereUniqueWithoutSkuInput = {
    where: ModemWhereUniqueInput
    data: XOR<ModemUpdateWithoutSkuInput, ModemUncheckedUpdateWithoutSkuInput>
  }

  export type ModemUpdateManyWithWhereWithoutSkuInput = {
    where: ModemScalarWhereInput
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyWithoutSkuInput>
  }

  export type VistaPorSKUUpsertWithWhereUniqueWithoutSkuInput = {
    where: VistaPorSKUWhereUniqueInput
    update: XOR<VistaPorSKUUpdateWithoutSkuInput, VistaPorSKUUncheckedUpdateWithoutSkuInput>
    create: XOR<VistaPorSKUCreateWithoutSkuInput, VistaPorSKUUncheckedCreateWithoutSkuInput>
  }

  export type VistaPorSKUUpdateWithWhereUniqueWithoutSkuInput = {
    where: VistaPorSKUWhereUniqueInput
    data: XOR<VistaPorSKUUpdateWithoutSkuInput, VistaPorSKUUncheckedUpdateWithoutSkuInput>
  }

  export type VistaPorSKUUpdateManyWithWhereWithoutSkuInput = {
    where: VistaPorSKUScalarWhereInput
    data: XOR<VistaPorSKUUpdateManyMutationInput, VistaPorSKUUncheckedUpdateManyWithoutSkuInput>
  }

  export type VistaPorSKUScalarWhereInput = {
    AND?: VistaPorSKUScalarWhereInput | VistaPorSKUScalarWhereInput[]
    OR?: VistaPorSKUScalarWhereInput[]
    NOT?: VistaPorSKUScalarWhereInput | VistaPorSKUScalarWhereInput[]
    id?: IntFilter<"VistaPorSKU"> | number
    skuId?: IntFilter<"VistaPorSKU"> | number
    rol?: EnumRolFilter<"VistaPorSKU"> | $Enums.Rol
    vista?: StringFilter<"VistaPorSKU"> | string
  }

  export type CatalogoSKUCreateWithoutVistasInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteCreateNestedManyWithoutSkuInput
    modems?: ModemCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUUncheckedCreateWithoutVistasInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteUncheckedCreateNestedManyWithoutSkuInput
    modems?: ModemUncheckedCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUCreateOrConnectWithoutVistasInput = {
    where: CatalogoSKUWhereUniqueInput
    create: XOR<CatalogoSKUCreateWithoutVistasInput, CatalogoSKUUncheckedCreateWithoutVistasInput>
  }

  export type CatalogoSKUUpsertWithoutVistasInput = {
    update: XOR<CatalogoSKUUpdateWithoutVistasInput, CatalogoSKUUncheckedUpdateWithoutVistasInput>
    create: XOR<CatalogoSKUCreateWithoutVistasInput, CatalogoSKUUncheckedCreateWithoutVistasInput>
    where?: CatalogoSKUWhereInput
  }

  export type CatalogoSKUUpdateToOneWithWhereWithoutVistasInput = {
    where?: CatalogoSKUWhereInput
    data: XOR<CatalogoSKUUpdateWithoutVistasInput, CatalogoSKUUncheckedUpdateWithoutVistasInput>
  }

  export type CatalogoSKUUpdateWithoutVistasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUpdateManyWithoutSkuNestedInput
    modems?: ModemUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUUncheckedUpdateWithoutVistasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUncheckedUpdateManyWithoutSkuNestedInput
    modems?: ModemUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUCreateWithoutLotesInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    modems?: ModemCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUUncheckedCreateWithoutLotesInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    modems?: ModemUncheckedCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUUncheckedCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUCreateOrConnectWithoutLotesInput = {
    where: CatalogoSKUWhereUniqueInput
    create: XOR<CatalogoSKUCreateWithoutLotesInput, CatalogoSKUUncheckedCreateWithoutLotesInput>
  }

  export type UserCreateWithoutLotesInput = {
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    modems?: ModemCreateNestedManyWithoutResponsableInput
  }

  export type UserUncheckedCreateWithoutLotesInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    modems?: ModemUncheckedCreateNestedManyWithoutResponsableInput
  }

  export type UserCreateOrConnectWithoutLotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLotesInput, UserUncheckedCreateWithoutLotesInput>
  }

  export type RegistroCreateWithoutLoteInput = {
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRegistrosInput
    modem: ModemCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutLoteInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    modemId: number
    createdAt?: Date | string
  }

  export type RegistroCreateOrConnectWithoutLoteInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput>
  }

  export type RegistroCreateManyLoteInputEnvelope = {
    data: RegistroCreateManyLoteInput | RegistroCreateManyLoteInput[]
    skipDuplicates?: boolean
  }

  export type ModemCreateWithoutLoteInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    responsable: UserCreateNestedOneWithoutModemsInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateWithoutLoteInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemCreateOrConnectWithoutLoteInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput>
  }

  export type ModemCreateManyLoteInputEnvelope = {
    data: ModemCreateManyLoteInput | ModemCreateManyLoteInput[]
    skipDuplicates?: boolean
  }

  export type ModemCreateWithoutLoteSalidaInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    responsable: UserCreateNestedOneWithoutModemsInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateWithoutLoteSalidaInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemCreateOrConnectWithoutLoteSalidaInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput>
  }

  export type ModemCreateManyLoteSalidaInputEnvelope = {
    data: ModemCreateManyLoteSalidaInput | ModemCreateManyLoteSalidaInput[]
    skipDuplicates?: boolean
  }

  export type CatalogoSKUUpsertWithoutLotesInput = {
    update: XOR<CatalogoSKUUpdateWithoutLotesInput, CatalogoSKUUncheckedUpdateWithoutLotesInput>
    create: XOR<CatalogoSKUCreateWithoutLotesInput, CatalogoSKUUncheckedCreateWithoutLotesInput>
    where?: CatalogoSKUWhereInput
  }

  export type CatalogoSKUUpdateToOneWithWhereWithoutLotesInput = {
    where?: CatalogoSKUWhereInput
    data: XOR<CatalogoSKUUpdateWithoutLotesInput, CatalogoSKUUncheckedUpdateWithoutLotesInput>
  }

  export type CatalogoSKUUpdateWithoutLotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    modems?: ModemUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUUncheckedUpdateWithoutLotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    modems?: ModemUncheckedUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type UserUpsertWithoutLotesInput = {
    update: XOR<UserUpdateWithoutLotesInput, UserUncheckedUpdateWithoutLotesInput>
    create: XOR<UserCreateWithoutLotesInput, UserUncheckedCreateWithoutLotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLotesInput, UserUncheckedUpdateWithoutLotesInput>
  }

  export type UserUpdateWithoutLotesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    modems?: ModemUpdateManyWithoutResponsableNestedInput
  }

  export type UserUncheckedUpdateWithoutLotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    modems?: ModemUncheckedUpdateManyWithoutResponsableNestedInput
  }

  export type RegistroUpsertWithWhereUniqueWithoutLoteInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutLoteInput, RegistroUncheckedUpdateWithoutLoteInput>
    create: XOR<RegistroCreateWithoutLoteInput, RegistroUncheckedCreateWithoutLoteInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutLoteInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutLoteInput, RegistroUncheckedUpdateWithoutLoteInput>
  }

  export type RegistroUpdateManyWithWhereWithoutLoteInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutLoteInput>
  }

  export type ModemUpsertWithWhereUniqueWithoutLoteInput = {
    where: ModemWhereUniqueInput
    update: XOR<ModemUpdateWithoutLoteInput, ModemUncheckedUpdateWithoutLoteInput>
    create: XOR<ModemCreateWithoutLoteInput, ModemUncheckedCreateWithoutLoteInput>
  }

  export type ModemUpdateWithWhereUniqueWithoutLoteInput = {
    where: ModemWhereUniqueInput
    data: XOR<ModemUpdateWithoutLoteInput, ModemUncheckedUpdateWithoutLoteInput>
  }

  export type ModemUpdateManyWithWhereWithoutLoteInput = {
    where: ModemScalarWhereInput
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyWithoutLoteInput>
  }

  export type ModemUpsertWithWhereUniqueWithoutLoteSalidaInput = {
    where: ModemWhereUniqueInput
    update: XOR<ModemUpdateWithoutLoteSalidaInput, ModemUncheckedUpdateWithoutLoteSalidaInput>
    create: XOR<ModemCreateWithoutLoteSalidaInput, ModemUncheckedCreateWithoutLoteSalidaInput>
  }

  export type ModemUpdateWithWhereUniqueWithoutLoteSalidaInput = {
    where: ModemWhereUniqueInput
    data: XOR<ModemUpdateWithoutLoteSalidaInput, ModemUncheckedUpdateWithoutLoteSalidaInput>
  }

  export type ModemUpdateManyWithWhereWithoutLoteSalidaInput = {
    where: ModemScalarWhereInput
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyWithoutLoteSalidaInput>
  }

  export type CatalogoSKUCreateWithoutModemsInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUUncheckedCreateWithoutModemsInput = {
    id: number
    nombre: string
    skuItem?: string | null
    descripcion?: string | null
    lotes?: LoteUncheckedCreateNestedManyWithoutSkuInput
    vistas?: VistaPorSKUUncheckedCreateNestedManyWithoutSkuInput
  }

  export type CatalogoSKUCreateOrConnectWithoutModemsInput = {
    where: CatalogoSKUWhereUniqueInput
    create: XOR<CatalogoSKUCreateWithoutModemsInput, CatalogoSKUUncheckedCreateWithoutModemsInput>
  }

  export type EstadoCreateWithoutModemsInput = {
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transicionesDesde?: TransicionEstadoCreateNestedManyWithoutEstadoDesdeInput
    transicionesHacia?: TransicionEstadoCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoUncheckedCreateWithoutModemsInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transicionesDesde?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoDesdeInput
    transicionesHacia?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoCreateOrConnectWithoutModemsInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutModemsInput, EstadoUncheckedCreateWithoutModemsInput>
  }

  export type LoteCreateWithoutModemsInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutLotesInput
    responsable: UserCreateNestedOneWithoutLotesInput
    registros?: RegistroCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUncheckedCreateWithoutModemsInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemUncheckedCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteCreateOrConnectWithoutModemsInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutModemsInput, LoteUncheckedCreateWithoutModemsInput>
  }

  export type LoteCreateWithoutModemsSalidaInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutLotesInput
    responsable: UserCreateNestedOneWithoutLotesInput
    registros?: RegistroCreateNestedManyWithoutLoteInput
    modems?: ModemCreateNestedManyWithoutLoteInput
  }

  export type LoteUncheckedCreateWithoutModemsSalidaInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutLoteInput
    modems?: ModemUncheckedCreateNestedManyWithoutLoteInput
  }

  export type LoteCreateOrConnectWithoutModemsSalidaInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutModemsSalidaInput, LoteUncheckedCreateWithoutModemsSalidaInput>
  }

  export type UserCreateWithoutModemsInput = {
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroCreateNestedManyWithoutUserInput
    lotes?: LoteCreateNestedManyWithoutResponsableInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutModemsInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroUncheckedCreateNestedManyWithoutUserInput
    lotes?: LoteUncheckedCreateNestedManyWithoutResponsableInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutModemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModemsInput, UserUncheckedCreateWithoutModemsInput>
  }

  export type RegistroCreateWithoutModemInput = {
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRegistrosInput
    lote: LoteCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroUncheckedCreateWithoutModemInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    loteId: number
    createdAt?: Date | string
  }

  export type RegistroCreateOrConnectWithoutModemInput = {
    where: RegistroWhereUniqueInput
    create: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput>
  }

  export type RegistroCreateManyModemInputEnvelope = {
    data: RegistroCreateManyModemInput | RegistroCreateManyModemInput[]
    skipDuplicates?: boolean
  }

  export type CatalogoSKUUpsertWithoutModemsInput = {
    update: XOR<CatalogoSKUUpdateWithoutModemsInput, CatalogoSKUUncheckedUpdateWithoutModemsInput>
    create: XOR<CatalogoSKUCreateWithoutModemsInput, CatalogoSKUUncheckedCreateWithoutModemsInput>
    where?: CatalogoSKUWhereInput
  }

  export type CatalogoSKUUpdateToOneWithWhereWithoutModemsInput = {
    where?: CatalogoSKUWhereInput
    data: XOR<CatalogoSKUUpdateWithoutModemsInput, CatalogoSKUUncheckedUpdateWithoutModemsInput>
  }

  export type CatalogoSKUUpdateWithoutModemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUpdateManyWithoutSkuNestedInput
  }

  export type CatalogoSKUUncheckedUpdateWithoutModemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    skuItem?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    lotes?: LoteUncheckedUpdateManyWithoutSkuNestedInput
    vistas?: VistaPorSKUUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type EstadoUpsertWithoutModemsInput = {
    update: XOR<EstadoUpdateWithoutModemsInput, EstadoUncheckedUpdateWithoutModemsInput>
    create: XOR<EstadoCreateWithoutModemsInput, EstadoUncheckedCreateWithoutModemsInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutModemsInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutModemsInput, EstadoUncheckedUpdateWithoutModemsInput>
  }

  export type EstadoUpdateWithoutModemsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transicionesDesde?: TransicionEstadoUpdateManyWithoutEstadoDesdeNestedInput
    transicionesHacia?: TransicionEstadoUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type EstadoUncheckedUpdateWithoutModemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transicionesDesde?: TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeNestedInput
    transicionesHacia?: TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type LoteUpsertWithoutModemsInput = {
    update: XOR<LoteUpdateWithoutModemsInput, LoteUncheckedUpdateWithoutModemsInput>
    create: XOR<LoteCreateWithoutModemsInput, LoteUncheckedCreateWithoutModemsInput>
    where?: LoteWhereInput
  }

  export type LoteUpdateToOneWithWhereWithoutModemsInput = {
    where?: LoteWhereInput
    data: XOR<LoteUpdateWithoutModemsInput, LoteUncheckedUpdateWithoutModemsInput>
  }

  export type LoteUpdateWithoutModemsInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput
    responsable?: UserUpdateOneRequiredWithoutLotesNestedInput
    registros?: RegistroUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateWithoutModemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUpsertWithoutModemsSalidaInput = {
    update: XOR<LoteUpdateWithoutModemsSalidaInput, LoteUncheckedUpdateWithoutModemsSalidaInput>
    create: XOR<LoteCreateWithoutModemsSalidaInput, LoteUncheckedCreateWithoutModemsSalidaInput>
    where?: LoteWhereInput
  }

  export type LoteUpdateToOneWithWhereWithoutModemsSalidaInput = {
    where?: LoteWhereInput
    data: XOR<LoteUpdateWithoutModemsSalidaInput, LoteUncheckedUpdateWithoutModemsSalidaInput>
  }

  export type LoteUpdateWithoutModemsSalidaInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput
    responsable?: UserUpdateOneRequiredWithoutLotesNestedInput
    registros?: RegistroUpdateManyWithoutLoteNestedInput
    modems?: ModemUpdateManyWithoutLoteNestedInput
  }

  export type LoteUncheckedUpdateWithoutModemsSalidaInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutLoteNestedInput
    modems?: ModemUncheckedUpdateManyWithoutLoteNestedInput
  }

  export type UserUpsertWithoutModemsInput = {
    update: XOR<UserUpdateWithoutModemsInput, UserUncheckedUpdateWithoutModemsInput>
    create: XOR<UserCreateWithoutModemsInput, UserUncheckedCreateWithoutModemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutModemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutModemsInput, UserUncheckedUpdateWithoutModemsInput>
  }

  export type UserUpdateWithoutModemsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUpdateManyWithoutUserNestedInput
    lotes?: LoteUpdateManyWithoutResponsableNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutModemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUncheckedUpdateManyWithoutUserNestedInput
    lotes?: LoteUncheckedUpdateManyWithoutResponsableNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RegistroUpsertWithWhereUniqueWithoutModemInput = {
    where: RegistroWhereUniqueInput
    update: XOR<RegistroUpdateWithoutModemInput, RegistroUncheckedUpdateWithoutModemInput>
    create: XOR<RegistroCreateWithoutModemInput, RegistroUncheckedCreateWithoutModemInput>
  }

  export type RegistroUpdateWithWhereUniqueWithoutModemInput = {
    where: RegistroWhereUniqueInput
    data: XOR<RegistroUpdateWithoutModemInput, RegistroUncheckedUpdateWithoutModemInput>
  }

  export type RegistroUpdateManyWithWhereWithoutModemInput = {
    where: RegistroScalarWhereInput
    data: XOR<RegistroUpdateManyMutationInput, RegistroUncheckedUpdateManyWithoutModemInput>
  }

  export type UserCreateWithoutRegistrosInput = {
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lotes?: LoteCreateNestedManyWithoutResponsableInput
    logs?: LogCreateNestedManyWithoutUserInput
    modems?: ModemCreateNestedManyWithoutResponsableInput
  }

  export type UserUncheckedCreateWithoutRegistrosInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lotes?: LoteUncheckedCreateNestedManyWithoutResponsableInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    modems?: ModemUncheckedCreateNestedManyWithoutResponsableInput
  }

  export type UserCreateOrConnectWithoutRegistrosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegistrosInput, UserUncheckedCreateWithoutRegistrosInput>
  }

  export type LoteCreateWithoutRegistrosInput = {
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutLotesInput
    responsable: UserCreateNestedOneWithoutLotesInput
    modems?: ModemCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteUncheckedCreateWithoutRegistrosInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    modems?: ModemUncheckedCreateNestedManyWithoutLoteInput
    modemsSalida?: ModemUncheckedCreateNestedManyWithoutLoteSalidaInput
  }

  export type LoteCreateOrConnectWithoutRegistrosInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutRegistrosInput, LoteUncheckedCreateWithoutRegistrosInput>
  }

  export type ModemCreateWithoutRegistrosInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    estadoActual: EstadoCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    responsable: UserCreateNestedOneWithoutModemsInput
  }

  export type ModemUncheckedCreateWithoutRegistrosInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ModemCreateOrConnectWithoutRegistrosInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutRegistrosInput, ModemUncheckedCreateWithoutRegistrosInput>
  }

  export type UserUpsertWithoutRegistrosInput = {
    update: XOR<UserUpdateWithoutRegistrosInput, UserUncheckedUpdateWithoutRegistrosInput>
    create: XOR<UserCreateWithoutRegistrosInput, UserUncheckedCreateWithoutRegistrosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegistrosInput, UserUncheckedUpdateWithoutRegistrosInput>
  }

  export type UserUpdateWithoutRegistrosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lotes?: LoteUpdateManyWithoutResponsableNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    modems?: ModemUpdateManyWithoutResponsableNestedInput
  }

  export type UserUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lotes?: LoteUncheckedUpdateManyWithoutResponsableNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    modems?: ModemUncheckedUpdateManyWithoutResponsableNestedInput
  }

  export type LoteUpsertWithoutRegistrosInput = {
    update: XOR<LoteUpdateWithoutRegistrosInput, LoteUncheckedUpdateWithoutRegistrosInput>
    create: XOR<LoteCreateWithoutRegistrosInput, LoteUncheckedCreateWithoutRegistrosInput>
    where?: LoteWhereInput
  }

  export type LoteUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: LoteWhereInput
    data: XOR<LoteUpdateWithoutRegistrosInput, LoteUncheckedUpdateWithoutRegistrosInput>
  }

  export type LoteUpdateWithoutRegistrosInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput
    responsable?: UserUpdateOneRequiredWithoutLotesNestedInput
    modems?: ModemUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modems?: ModemUncheckedUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput
  }

  export type ModemUpsertWithoutRegistrosInput = {
    update: XOR<ModemUpdateWithoutRegistrosInput, ModemUncheckedUpdateWithoutRegistrosInput>
    create: XOR<ModemCreateWithoutRegistrosInput, ModemUncheckedCreateWithoutRegistrosInput>
    where?: ModemWhereInput
  }

  export type ModemUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: ModemWhereInput
    data: XOR<ModemUpdateWithoutRegistrosInput, ModemUncheckedUpdateWithoutRegistrosInput>
  }

  export type ModemUpdateWithoutRegistrosInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
  }

  export type ModemUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutLogsInput = {
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroCreateNestedManyWithoutUserInput
    lotes?: LoteCreateNestedManyWithoutResponsableInput
    modems?: ModemCreateNestedManyWithoutResponsableInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    id?: number
    nombre: string
    userName: string
    email: string
    password: string
    rol: $Enums.Rol
    activo: boolean
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroUncheckedCreateNestedManyWithoutUserInput
    lotes?: LoteUncheckedCreateNestedManyWithoutResponsableInput
    modems?: ModemUncheckedCreateNestedManyWithoutResponsableInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUpdateManyWithoutUserNestedInput
    lotes?: LoteUpdateManyWithoutResponsableNestedInput
    modems?: ModemUpdateManyWithoutResponsableNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    activo?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroUncheckedUpdateManyWithoutUserNestedInput
    lotes?: LoteUncheckedUpdateManyWithoutResponsableNestedInput
    modems?: ModemUncheckedUpdateManyWithoutResponsableNestedInput
  }

  export type ModemCreateWithoutEstadoActualInput = {
    sn: string
    faseActual: $Enums.FaseProceso
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    sku: CatalogoSKUCreateNestedOneWithoutModemsInput
    lote: LoteCreateNestedOneWithoutModemsInput
    loteSalida?: LoteCreateNestedOneWithoutModemsSalidaInput
    responsable: UserCreateNestedOneWithoutModemsInput
    registros?: RegistroCreateNestedManyWithoutModemInput
  }

  export type ModemUncheckedCreateWithoutEstadoActualInput = {
    id?: number
    sn: string
    skuId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    registros?: RegistroUncheckedCreateNestedManyWithoutModemInput
  }

  export type ModemCreateOrConnectWithoutEstadoActualInput = {
    where: ModemWhereUniqueInput
    create: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput>
  }

  export type ModemCreateManyEstadoActualInputEnvelope = {
    data: ModemCreateManyEstadoActualInput | ModemCreateManyEstadoActualInput[]
    skipDuplicates?: boolean
  }

  export type TransicionEstadoCreateWithoutEstadoDesdeInput = {
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    estadoHacia: EstadoCreateNestedOneWithoutTransicionesHaciaInput
  }

  export type TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput = {
    id?: number
    estadoHaciaId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransicionEstadoCreateOrConnectWithoutEstadoDesdeInput = {
    where: TransicionEstadoWhereUniqueInput
    create: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput>
  }

  export type TransicionEstadoCreateManyEstadoDesdeInputEnvelope = {
    data: TransicionEstadoCreateManyEstadoDesdeInput | TransicionEstadoCreateManyEstadoDesdeInput[]
    skipDuplicates?: boolean
  }

  export type TransicionEstadoCreateWithoutEstadoHaciaInput = {
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    estadoDesde: EstadoCreateNestedOneWithoutTransicionesDesdeInput
  }

  export type TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput = {
    id?: number
    estadoDesdeId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransicionEstadoCreateOrConnectWithoutEstadoHaciaInput = {
    where: TransicionEstadoWhereUniqueInput
    create: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput>
  }

  export type TransicionEstadoCreateManyEstadoHaciaInputEnvelope = {
    data: TransicionEstadoCreateManyEstadoHaciaInput | TransicionEstadoCreateManyEstadoHaciaInput[]
    skipDuplicates?: boolean
  }

  export type ModemUpsertWithWhereUniqueWithoutEstadoActualInput = {
    where: ModemWhereUniqueInput
    update: XOR<ModemUpdateWithoutEstadoActualInput, ModemUncheckedUpdateWithoutEstadoActualInput>
    create: XOR<ModemCreateWithoutEstadoActualInput, ModemUncheckedCreateWithoutEstadoActualInput>
  }

  export type ModemUpdateWithWhereUniqueWithoutEstadoActualInput = {
    where: ModemWhereUniqueInput
    data: XOR<ModemUpdateWithoutEstadoActualInput, ModemUncheckedUpdateWithoutEstadoActualInput>
  }

  export type ModemUpdateManyWithWhereWithoutEstadoActualInput = {
    where: ModemScalarWhereInput
    data: XOR<ModemUpdateManyMutationInput, ModemUncheckedUpdateManyWithoutEstadoActualInput>
  }

  export type TransicionEstadoUpsertWithWhereUniqueWithoutEstadoDesdeInput = {
    where: TransicionEstadoWhereUniqueInput
    update: XOR<TransicionEstadoUpdateWithoutEstadoDesdeInput, TransicionEstadoUncheckedUpdateWithoutEstadoDesdeInput>
    create: XOR<TransicionEstadoCreateWithoutEstadoDesdeInput, TransicionEstadoUncheckedCreateWithoutEstadoDesdeInput>
  }

  export type TransicionEstadoUpdateWithWhereUniqueWithoutEstadoDesdeInput = {
    where: TransicionEstadoWhereUniqueInput
    data: XOR<TransicionEstadoUpdateWithoutEstadoDesdeInput, TransicionEstadoUncheckedUpdateWithoutEstadoDesdeInput>
  }

  export type TransicionEstadoUpdateManyWithWhereWithoutEstadoDesdeInput = {
    where: TransicionEstadoScalarWhereInput
    data: XOR<TransicionEstadoUpdateManyMutationInput, TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeInput>
  }

  export type TransicionEstadoScalarWhereInput = {
    AND?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
    OR?: TransicionEstadoScalarWhereInput[]
    NOT?: TransicionEstadoScalarWhereInput | TransicionEstadoScalarWhereInput[]
    id?: IntFilter<"TransicionEstado"> | number
    estadoDesdeId?: IntFilter<"TransicionEstado"> | number
    estadoHaciaId?: IntFilter<"TransicionEstado"> | number
    nombreEvento?: StringFilter<"TransicionEstado"> | string
    descripcion?: StringNullableFilter<"TransicionEstado"> | string | null
    requiereCantidad?: BoolFilter<"TransicionEstado"> | boolean
    requiereObservacion?: BoolFilter<"TransicionEstado"> | boolean
    rolesPermitidos?: StringNullableFilter<"TransicionEstado"> | string | null
    createdAt?: DateTimeFilter<"TransicionEstado"> | Date | string
    updatedAt?: DateTimeFilter<"TransicionEstado"> | Date | string
  }

  export type TransicionEstadoUpsertWithWhereUniqueWithoutEstadoHaciaInput = {
    where: TransicionEstadoWhereUniqueInput
    update: XOR<TransicionEstadoUpdateWithoutEstadoHaciaInput, TransicionEstadoUncheckedUpdateWithoutEstadoHaciaInput>
    create: XOR<TransicionEstadoCreateWithoutEstadoHaciaInput, TransicionEstadoUncheckedCreateWithoutEstadoHaciaInput>
  }

  export type TransicionEstadoUpdateWithWhereUniqueWithoutEstadoHaciaInput = {
    where: TransicionEstadoWhereUniqueInput
    data: XOR<TransicionEstadoUpdateWithoutEstadoHaciaInput, TransicionEstadoUncheckedUpdateWithoutEstadoHaciaInput>
  }

  export type TransicionEstadoUpdateManyWithWhereWithoutEstadoHaciaInput = {
    where: TransicionEstadoScalarWhereInput
    data: XOR<TransicionEstadoUpdateManyMutationInput, TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaInput>
  }

  export type EstadoCreateWithoutTransicionesDesdeInput = {
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemCreateNestedManyWithoutEstadoActualInput
    transicionesHacia?: TransicionEstadoCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoUncheckedCreateWithoutTransicionesDesdeInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemUncheckedCreateNestedManyWithoutEstadoActualInput
    transicionesHacia?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoHaciaInput
  }

  export type EstadoCreateOrConnectWithoutTransicionesDesdeInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutTransicionesDesdeInput, EstadoUncheckedCreateWithoutTransicionesDesdeInput>
  }

  export type EstadoCreateWithoutTransicionesHaciaInput = {
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemCreateNestedManyWithoutEstadoActualInput
    transicionesDesde?: TransicionEstadoCreateNestedManyWithoutEstadoDesdeInput
  }

  export type EstadoUncheckedCreateWithoutTransicionesHaciaInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    codigoInterno: string
    esFinal?: boolean
    requiereObservacion?: boolean
    ordenDisplay?: number
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    modems?: ModemUncheckedCreateNestedManyWithoutEstadoActualInput
    transicionesDesde?: TransicionEstadoUncheckedCreateNestedManyWithoutEstadoDesdeInput
  }

  export type EstadoCreateOrConnectWithoutTransicionesHaciaInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutTransicionesHaciaInput, EstadoUncheckedCreateWithoutTransicionesHaciaInput>
  }

  export type EstadoUpsertWithoutTransicionesDesdeInput = {
    update: XOR<EstadoUpdateWithoutTransicionesDesdeInput, EstadoUncheckedUpdateWithoutTransicionesDesdeInput>
    create: XOR<EstadoCreateWithoutTransicionesDesdeInput, EstadoUncheckedCreateWithoutTransicionesDesdeInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutTransicionesDesdeInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutTransicionesDesdeInput, EstadoUncheckedUpdateWithoutTransicionesDesdeInput>
  }

  export type EstadoUpdateWithoutTransicionesDesdeInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUpdateManyWithoutEstadoActualNestedInput
    transicionesHacia?: TransicionEstadoUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type EstadoUncheckedUpdateWithoutTransicionesDesdeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUncheckedUpdateManyWithoutEstadoActualNestedInput
    transicionesHacia?: TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaNestedInput
  }

  export type EstadoUpsertWithoutTransicionesHaciaInput = {
    update: XOR<EstadoUpdateWithoutTransicionesHaciaInput, EstadoUncheckedUpdateWithoutTransicionesHaciaInput>
    create: XOR<EstadoCreateWithoutTransicionesHaciaInput, EstadoUncheckedCreateWithoutTransicionesHaciaInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutTransicionesHaciaInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutTransicionesHaciaInput, EstadoUncheckedUpdateWithoutTransicionesHaciaInput>
  }

  export type EstadoUpdateWithoutTransicionesHaciaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUpdateManyWithoutEstadoActualNestedInput
    transicionesDesde?: TransicionEstadoUpdateManyWithoutEstadoDesdeNestedInput
  }

  export type EstadoUncheckedUpdateWithoutTransicionesHaciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    codigoInterno?: StringFieldUpdateOperationsInput | string
    esFinal?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    ordenDisplay?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modems?: ModemUncheckedUpdateManyWithoutEstadoActualNestedInput
    transicionesDesde?: TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeNestedInput
  }

  export type RegistroCreateManyUserInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    loteId: number
    modemId: number
    createdAt?: Date | string
  }

  export type LoteCreateManyResponsableInput = {
    id?: number
    numero: string
    skuId: number
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type LogCreateManyUserInput = {
    id?: number
    accion: string
    entidad: string
    detalle?: string | null
    createdAt?: Date | string
  }

  export type ModemCreateManyResponsableInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RegistroUpdateWithoutUserInput = {
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lote?: LoteUpdateOneRequiredWithoutRegistrosNestedInput
    modem?: ModemUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    loteId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    loteId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoteUpdateWithoutResponsableInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutLotesNestedInput
    registros?: RegistroUpdateManyWithoutLoteNestedInput
    modems?: ModemUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutLoteNestedInput
    modems?: ModemUncheckedUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateManyWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LogUpdateWithoutUserInput = {
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    accion?: StringFieldUpdateOperationsInput | string
    entidad?: StringFieldUpdateOperationsInput | string
    detalle?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModemUpdateWithoutResponsableInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateManyWithoutResponsableInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LoteCreateManySkuInput = {
    id?: number
    numero: string
    tipoLote?: $Enums.TipoLote
    esScrap?: boolean
    motivoScrap?: $Enums.MotivoScrap | null
    estado?: $Enums.EstadoLote
    prioridad?: number
    responsableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ModemCreateManySkuInput = {
    id?: number
    sn: string
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type VistaPorSKUCreateManySkuInput = {
    id?: number
    rol: $Enums.Rol
    vista: string
  }

  export type LoteUpdateWithoutSkuInput = {
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responsable?: UserUpdateOneRequiredWithoutLotesNestedInput
    registros?: RegistroUpdateManyWithoutLoteNestedInput
    modems?: ModemUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutLoteNestedInput
    modems?: ModemUncheckedUpdateManyWithoutLoteNestedInput
    modemsSalida?: ModemUncheckedUpdateManyWithoutLoteSalidaNestedInput
  }

  export type LoteUncheckedUpdateManyWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    tipoLote?: EnumTipoLoteFieldUpdateOperationsInput | $Enums.TipoLote
    esScrap?: BoolFieldUpdateOperationsInput | boolean
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    estado?: EnumEstadoLoteFieldUpdateOperationsInput | $Enums.EstadoLote
    prioridad?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ModemUpdateWithoutSkuInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateManyWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VistaPorSKUUpdateWithoutSkuInput = {
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type VistaPorSKUUncheckedUpdateWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type VistaPorSKUUncheckedUpdateManyWithoutSkuInput = {
    id?: IntFieldUpdateOperationsInput | number
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    vista?: StringFieldUpdateOperationsInput | string
  }

  export type RegistroCreateManyLoteInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    modemId: number
    createdAt?: Date | string
  }

  export type ModemCreateManyLoteInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ModemCreateManyLoteSalidaInput = {
    id?: number
    sn: string
    skuId: number
    estadoActualId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RegistroUpdateWithoutLoteInput = {
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRegistrosNestedInput
    modem?: ModemUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutLoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroUncheckedUpdateManyWithoutLoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    modemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModemUpdateWithoutLoteInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateWithoutLoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateManyWithoutLoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ModemUpdateWithoutLoteSalidaInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    estadoActual?: EstadoUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateWithoutLoteSalidaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateManyWithoutLoteSalidaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    estadoActualId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RegistroCreateManyModemInput = {
    id?: number
    sn: string
    fase: $Enums.FaseProceso
    estado: $Enums.EstadoRegistro
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    reparacion?: string | null
    userId: number
    loteId: number
    createdAt?: Date | string
  }

  export type RegistroUpdateWithoutModemInput = {
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRegistrosNestedInput
    lote?: LoteUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroUncheckedUpdateWithoutModemInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroUncheckedUpdateManyWithoutModemInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    fase?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    estado?: EnumEstadoRegistroFieldUpdateOperationsInput | $Enums.EstadoRegistro
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    reparacion?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModemCreateManyEstadoActualInput = {
    id?: number
    sn: string
    skuId: number
    faseActual: $Enums.FaseProceso
    loteId: number
    loteSalidaId?: number | null
    responsableId: number
    motivoScrap?: $Enums.MotivoScrap | null
    detalleScrap?: $Enums.DetalleScrap | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type TransicionEstadoCreateManyEstadoDesdeInput = {
    id?: number
    estadoHaciaId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransicionEstadoCreateManyEstadoHaciaInput = {
    id?: number
    estadoDesdeId: number
    nombreEvento: string
    descripcion?: string | null
    requiereCantidad?: boolean
    requiereObservacion?: boolean
    rolesPermitidos?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModemUpdateWithoutEstadoActualInput = {
    sn?: StringFieldUpdateOperationsInput | string
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sku?: CatalogoSKUUpdateOneRequiredWithoutModemsNestedInput
    lote?: LoteUpdateOneRequiredWithoutModemsNestedInput
    loteSalida?: LoteUpdateOneWithoutModemsSalidaNestedInput
    responsable?: UserUpdateOneRequiredWithoutModemsNestedInput
    registros?: RegistroUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateWithoutEstadoActualInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registros?: RegistroUncheckedUpdateManyWithoutModemNestedInput
  }

  export type ModemUncheckedUpdateManyWithoutEstadoActualInput = {
    id?: IntFieldUpdateOperationsInput | number
    sn?: StringFieldUpdateOperationsInput | string
    skuId?: IntFieldUpdateOperationsInput | number
    faseActual?: EnumFaseProcesoFieldUpdateOperationsInput | $Enums.FaseProceso
    loteId?: IntFieldUpdateOperationsInput | number
    loteSalidaId?: NullableIntFieldUpdateOperationsInput | number | null
    responsableId?: IntFieldUpdateOperationsInput | number
    motivoScrap?: NullableEnumMotivoScrapFieldUpdateOperationsInput | $Enums.MotivoScrap | null
    detalleScrap?: NullableEnumDetalleScrapFieldUpdateOperationsInput | $Enums.DetalleScrap | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransicionEstadoUpdateWithoutEstadoDesdeInput = {
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    estadoHacia?: EstadoUpdateOneRequiredWithoutTransicionesHaciaNestedInput
  }

  export type TransicionEstadoUncheckedUpdateWithoutEstadoDesdeInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoHaciaId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoUncheckedUpdateManyWithoutEstadoDesdeInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoHaciaId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoUpdateWithoutEstadoHaciaInput = {
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    estadoDesde?: EstadoUpdateOneRequiredWithoutTransicionesDesdeNestedInput
  }

  export type TransicionEstadoUncheckedUpdateWithoutEstadoHaciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoDesdeId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransicionEstadoUncheckedUpdateManyWithoutEstadoHaciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    estadoDesdeId?: IntFieldUpdateOperationsInput | number
    nombreEvento?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    requiereCantidad?: BoolFieldUpdateOperationsInput | boolean
    requiereObservacion?: BoolFieldUpdateOperationsInput | boolean
    rolesPermitidos?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}