
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  userName: 'userName',
  email: 'email',
  password: 'password',
  rol: 'rol',
  activo: 'activo',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CatalogoSKUScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  skuItem: 'skuItem',
  descripcion: 'descripcion'
};

exports.Prisma.VistaPorSKUScalarFieldEnum = {
  id: 'id',
  skuId: 'skuId',
  rol: 'rol',
  vista: 'vista'
};

exports.Prisma.LoteScalarFieldEnum = {
  id: 'id',
  numero: 'numero',
  skuId: 'skuId',
  tipoLote: 'tipoLote',
  esScrap: 'esScrap',
  motivoScrap: 'motivoScrap',
  estado: 'estado',
  prioridad: 'prioridad',
  responsableId: 'responsableId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ModemScalarFieldEnum = {
  id: 'id',
  sn: 'sn',
  skuId: 'skuId',
  estadoActualId: 'estadoActualId',
  faseActual: 'faseActual',
  loteId: 'loteId',
  loteSalidaId: 'loteSalidaId',
  responsableId: 'responsableId',
  motivoScrap: 'motivoScrap',
  detalleScrap: 'detalleScrap',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RegistroScalarFieldEnum = {
  id: 'id',
  sn: 'sn',
  fase: 'fase',
  estado: 'estado',
  motivoScrap: 'motivoScrap',
  detalleScrap: 'detalleScrap',
  reparacion: 'reparacion',
  userId: 'userId',
  loteId: 'loteId',
  modemId: 'modemId',
  createdAt: 'createdAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  accion: 'accion',
  entidad: 'entidad',
  detalle: 'detalle',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.EstadoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  codigoInterno: 'codigoInterno',
  esFinal: 'esFinal',
  requiereObservacion: 'requiereObservacion',
  ordenDisplay: 'ordenDisplay',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransicionEstadoScalarFieldEnum = {
  id: 'id',
  estadoDesdeId: 'estadoDesdeId',
  estadoHaciaId: 'estadoHaciaId',
  nombreEvento: 'nombreEvento',
  descripcion: 'descripcion',
  requiereCantidad: 'requiereCantidad',
  requiereObservacion: 'requiereObservacion',
  rolesPermitidos: 'rolesPermitidos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Rol = exports.$Enums.Rol = {
  UAI: 'UAI',
  UA: 'UA',
  UV: 'UV',
  UReg: 'UReg',
  UTI: 'UTI',
  UR: 'UR',
  UC: 'UC',
  UE: 'UE',
  ULL: 'ULL',
  UEN: 'UEN'
};

exports.TipoLote = exports.$Enums.TipoLote = {
  ENTRADA: 'ENTRADA',
  SALIDA: 'SALIDA'
};

exports.MotivoScrap = exports.$Enums.MotivoScrap = {
  FUERA_DE_RANGO: 'FUERA_DE_RANGO',
  DEFECTO_SW: 'DEFECTO_SW',
  SIN_REPARACION: 'SIN_REPARACION',
  COSMETICA: 'COSMETICA',
  INFESTADO: 'INFESTADO',
  OTRO: 'OTRO'
};

exports.EstadoLote = exports.$Enums.EstadoLote = {
  EN_PROCESO: 'EN_PROCESO',
  PAUSADO: 'PAUSADO',
  COMPLETADO: 'COMPLETADO',
  CANCELADO: 'CANCELADO'
};

exports.FaseProceso = exports.$Enums.FaseProceso = {
  REGISTRO: 'REGISTRO',
  TEST_INICIAL: 'TEST_INICIAL',
  COSMETICA: 'COSMETICA',
  LIBERACION_LIMPIEZA: 'LIBERACION_LIMPIEZA',
  ENSAMBLE: 'ENSAMBLE',
  RETEST: 'RETEST',
  EMPAQUE: 'EMPAQUE'
};

exports.DetalleScrap = exports.$Enums.DetalleScrap = {
  CIRCUITO_OK_BASE_NOK: 'CIRCUITO_OK_BASE_NOK',
  BASE_OK_CIRCUITO_NOK: 'BASE_OK_CIRCUITO_NOK',
  CIRCUITO_NOK_BASE_NOK: 'CIRCUITO_NOK_BASE_NOK',
  INFESTACION: 'INFESTACION',
  OTRO: 'OTRO'
};

exports.EstadoRegistro = exports.$Enums.EstadoRegistro = {
  SN_OK: 'SN_OK',
  SCRAP_COSMETICO: 'SCRAP_COSMETICO',
  SCRAP_ELECTRONICO: 'SCRAP_ELECTRONICO',
  SCRAP_INFESTACION: 'SCRAP_INFESTACION',
  REPARACION: 'REPARACION'
};

exports.Prisma.ModelName = {
  User: 'User',
  CatalogoSKU: 'CatalogoSKU',
  VistaPorSKU: 'VistaPorSKU',
  Lote: 'Lote',
  Modem: 'Modem',
  Registro: 'Registro',
  Log: 'Log',
  Estado: 'Estado',
  TransicionEstado: 'TransicionEstado'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
